bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
2	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  >  expected  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  >  expected	195	None	replace
3	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  >  expected  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  >  expected	195	None	replace
4	[BUG]  [BUGGY]  Constructor  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
5	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                    ClassCastException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
6	[BUG]  [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                      ClassCastException      [CONTEXT]        [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
7	[BUG]  [BUGGY]  if(typeAdapter!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	156	None	replace
8	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
9	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
10	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
11	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
12	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {	  if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
13	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.equals(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	19	2	replace
14	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	19	2	replace
15	[BUG]  [BUGGY]  if(value.equals(TypeToken.TYPE)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  TYPE  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.TYPE)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.TYPE)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  TYPE	19	None	replace
16	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {	  if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	19	None	replace
17	[BUG]  [BUGGY]  if(value.equals(TypeToken.CLASS)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  CLASS  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.CLASS)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.CLASS)||  typeAdapter.class.isAssignableFrom(value))  {	  if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  CLASS	19	None	replace
18	[BUG]  [BUGGY]  if(value.equals(TypeToken.CLASS)&&  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  CLASS  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.CLASS)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.CLASS)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  CLASS	19	None	replace
19	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(typeAdapterClass)||    value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
20	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass)||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(typeAdapterClass)||    value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	207	None	replace
21	[BUG]  [BUGGY]  if(TypeAdapter.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(typeAdapterClass)||    value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
22	[BUG]  [BUGGY]  if(type.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [CE]  cannot  find  symbol  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(type.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(typeAdapterClass)||    value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  type	207	None	replace
23	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(typeAdapterClass)||    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	207	2	replace
24	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(typeAdapterClass)||    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	207	2	replace
25	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)&&  value.isAssignableFrom(TypeAdapter.class))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)&&  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass)&&  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(typeAdapterClass)||    value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	207	None	replace
26	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	add
27	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	167	None	add
28	[BUG]  [BUGGY]  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
29	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
30	[BUG]  [BUGGY]  final  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
31	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	153	None	replace
32	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >=  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  >  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >=  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >=  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  >  expected	153	None	replace
33	[BUG]  [BUGGY]  Constructor  <?  >=  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >=  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >=  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	153	None	replace
34	[BUG]  [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
35	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
36	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
37	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapter))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapter))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapter))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
38	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
39	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType);  [CE]  illegal  start  of  type  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType);	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
40	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(fieldType));  [CE]  illegal  start  of  type  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(fieldType));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(fieldType));	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
41	[BUG]  [BUGGY]  TypeToken  gson  =  typeAdapter.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  typeAdapter.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  typeAdapter.get(TypeToken.get(typeAdapterClass));	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
42	[BUG]  [BUGGY]  TypeToken  gson  =  typeAdapterFactory.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                                            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  typeAdapterFactory.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  typeAdapterFactory.get(TypeToken.get(typeAdapterClass));	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
43	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory));  [CE]  illegal  start  of  type  [FE]                                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory));	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
44	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
45	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  field  [CE]  ')'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  field  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  field	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ')'  expected	164	None	replace
46	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
47	[BUG]  [BUGGY]  Constructor  <  TypeAdapter  <?  >>  value  =(Constructor  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter  <?  >>  value  =(Constructor  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter  <?  >>  value  =(Constructor  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
48	[BUG]  [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
49	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
50	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [CE]  illegal  start  of  type  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
51	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeName)).construct();  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeName)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeName)).construct();	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
52	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
53	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
54	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(0)).construct();  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(0)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(0)).construct();	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
55	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(fieldType)||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	78	None	replace
56	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(key)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  key  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(key)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(key)||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  key	78	None	replace
57	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	78	None	replace
58	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	add
59	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	240	None	add
60	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(typeClass))  {  [CE]  cannot  find  symbol  typeClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(typeClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(typeClass))  {	  if(TypeAdapter.class.isAssignableFrom(typeClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeClass	228	None	replace
61	[BUG]  [BUGGY]  if(typeAdapter.class!=  null  &&  value.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class!=  null  &&  value.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class!=  null  &&  value.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
62	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
63	[BUG]  [BUGGY]  if(typeAdapterClass!=  null  &&  value.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null  &&  value.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null  &&  value.isAssignableFrom(typeAdapter.class))  {	  if(value!=    null    &&    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	9	None	replace
64	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(typeAdapter.class))  {	  if(value!=    null    &&    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
65	[BUG]  [BUGGY]  if(value  ==  null  &&  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  &&  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  &&  typeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
66	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapter))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(typeAdapter))  {	  if(value!=    null    &&    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	10	None	replace
67	[BUG]  [BUGGY]  if(typeAdapter!=  null  &&  value.isAssignableFrom(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null  &&  value.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null  &&  value.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	10	None	replace
68	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.isAssignableFrom(type))  {	  if(value!=    null    &&    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	10	None	replace
69	[BUG]  [BUGGY]  if(value  ==  null  &&  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  &&  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  &&  typeAdapter.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
70	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(typeClass))  {  [CE]  cannot  find  symbol  typeClass  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(typeClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.isAssignableFrom(typeClass))  {	  if(value!=    null    &&    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeClass	10	None	replace
71	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(typeType))  {  [CE]  cannot  find  symbol  typeType  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(typeType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.isAssignableFrom(typeType))  {	  if(value!=    null    &&    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeType	10	None	replace
72	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  type  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
73	[BUG]  [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
74	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	116	None	replace
75	[BUG]  [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
76	[BUG]  [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  illegal  start  of  expression  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
77	[BUG]  [BUGGY]  Constructor  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  type  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
78	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  >  expected  [FE]                    ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	116	None	replace
79	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  typeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    &&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	203	None	replace
80	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  ||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >=  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  ||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    &&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	203	None	replace
81	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {	  if(value    instanceof    Class    <?    >>    &&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	203	None	replace
82	[BUG]  [BUGGY]  if(value  instanceof  Class  <?!=  ||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  >  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?!=  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?!=  ||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    &&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  >  expected	203	None	replace
83	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  &&  typeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >=  &&  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  &&  typeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    &&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	203	None	replace
84	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    &&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	203	None	replace
85	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	41	None	add
86	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  ||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  ||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    ||!TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
87	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	41	None	add
88	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(type))  {  [CE]  not  a  statement  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(type))  {	  	non-compiled	[CE]  not  a  statement	41	None	add
89	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  ||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  ||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    ||  typeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
90	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	41	None	add
91	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	41	None	add
92	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(fieldType))  {  [CE]  not  a  statement  [FE]                  ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(fieldType))  {	  	non-compiled	[CE]  not  a  statement	41	None	add
93	[BUG]  [BUGGY]  TypeToken  gson  =  getTypeToken();  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  getTypeToken();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  getTypeToken();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
94	[BUG]  [BUGGY]  final  TypeToken  gson  =  getTypeToken();  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  TypeToken  gson  =  getTypeToken();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  TypeToken  gson  =  getTypeToken();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
95	[BUG]  [BUGGY]  Constructor  constructor  =  getTypeConstructor();  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  getTypeConstructor();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructor  =  getTypeConstructor();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
96	[BUG]  [BUGGY]  gson  =  getTypeToken();  [CE]  illegal  start  of  type  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  gson  =  getTypeToken();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	gson  =  getTypeToken();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
97	[BUG]  [BUGGY]  Constructor  constructor  =  getConstructor();  [CE]  illegal  start  of  type  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  getConstructor();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructor  =  getConstructor();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
98	[BUG]  [BUGGY]  Constructor  annotation  =  getAnnotation(JsonConstructor.class);  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  getAnnotation(JsonConstructor.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  getAnnotation(JsonConstructor.class);	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
99	[BUG]  [BUGGY]  Constructor  annotation  =  getAnnotation(TypeToken.class);  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  getAnnotation(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  getAnnotation(TypeToken.class);	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
100	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
101	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
102	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
103	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
104	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  [CE]  reached  end  of  file  while  parsing  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  gson  =  typeAdapter.getType();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
105	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
106	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  [CE]  reached  end  of  file  while  parsing  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  gson  =  getTypeToken();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
107	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.class,  fieldType);  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.class,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.class,  fieldType);	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
108	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.TYPE_OBJECT);  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.TYPE_OBJECT);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.TYPE_OBJECT);	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
109	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.TYPE_ARRAY);  [CE]  illegal  start  of  type  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.TYPE_ARRAY);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.TYPE_ARRAY);	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
110	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.GETPROP);  [CE]  illegal  start  of  type  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.GETPROP);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.GETPROP);	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
111	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.class,  typeAdapterClass);  [CE]  illegal  start  of  type  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.class,  typeAdapterClass);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.class,  typeAdapterClass);	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
112	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.class,  value);  [CE]  illegal  start  of  type  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.class,  value);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.class,  value);	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
113	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	94	None	replace
114	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
115	[BUG]  [BUGGY]  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
116	[BUG]  [BUGGY]  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
117	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  }  [CE]  >  expected  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	94	None	replace
118	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterClass))  {	  if(typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
119	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {	  if(typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
120	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
121	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
122	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(value)||  value.isAssignableFrom(TypeToken.class))  {  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(value)||  value.isAssignableFrom(TypeToken.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(value)||  value.isAssignableFrom(TypeToken.class))  {	  if(typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
123	[BUG]  [BUGGY]  Constructor  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	88	None	replace
124	[BUG]  [BUGGY]  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  not  a  statement	88	None	replace
125	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	99	None	replace
126	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	39	2	replace
127	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	39	2	replace
128	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  &&!TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	39	2	replace
129	[BUG]  [BUGGY]  if(value  ==  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  &&!TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	39	2	replace
130	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||!TypeAdapter.class.equals(value))  {	  if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	39	2	replace
131	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.equals(value))  {  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||!TypeAdapter.class.equals(value))  {	  if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	39	2	replace
132	[BUG]  [BUGGY]  TypeToken  t  =  getTypeToken();  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  t  =  getTypeToken();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  t  =  getTypeToken();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    t    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
133	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    t    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
134	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    t    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
135	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    t    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
136	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    t    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
137	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    t    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
138	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    t    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
139	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	add
140	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	123	None	add
141	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	add
142	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	169	None	add
143	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
144	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	107	None	add
145	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  >  expected  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;	  	non-compiled	[CE]  >  expected	107	None	add
146	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  typeAdapter.getType();  [CE]  reached  end  of  file  while  parsing  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    TypeToken  gson  =  typeAdapter.getType();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
147	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  not  a  statement  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  not  a  statement	107	None	add
148	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ';'  expected	233	None	replace
149	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [CE]  >  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  >  expected	233	None	replace
150	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  }  ';'  [CE]  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  }  ';'  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  }  ';'	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  	233	None	replace
151	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  	233	None	replace
152	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  +  ';'  [CE]  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  +  ';'  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  +  ';'	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  	233	None	replace
153	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ';'  expected	233	None	replace
154	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value.class))  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(value.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value.class))  {	  if(value.class.isAssignableFrom(typeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
155	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value.class))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value.class))  {	  if(value.class.isAssignableFrom(typeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
156	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value.class))  {  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value.class))  {	  if(value.class.isAssignableFrom(typeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
157	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value).class)  {  [CE]  <identifier>  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(value).class)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value).class)  {	  if(value.class.isAssignableFrom(typeAdapter.class))    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
158	[BUG]  [BUGGY]  if(typeAdapter.equals(value.class))  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.equals(value.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.equals(value.class))  {	  if(value.equals(typeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
159	[BUG]  [BUGGY]  if(value.equals(typeAdapterClass.class))  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(typeAdapterClass.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(typeAdapterClass.class))  {	  if(value.equals(typeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
160	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapter.class.equals(value))  {	  if(value.equals(typeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	264	2	replace
161	[BUG]  [BUGGY]  if(TypeAdapter.class.equals(value))  {  [FE]  NullPointerException  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.equals(value))  {	  if(value.equals(typeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	264	2	replace
162	[BUG]  [BUGGY]  if(typeAdapter.equals(value.getClass()))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.equals(value.getClass()))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.equals(value.getClass()))  {	  if(value.equals(typeAdapter.class))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	264	None	replace
163	[BUG]  [BUGGY]  if(typeAdapter.equals(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.equals(value))  {	  if(value.equals(typeAdapter.class))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	264	None	replace
164	[BUG]  [BUGGY]  if(typeAdapter.equals(value.getValue()))  {  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.equals(value.getValue()))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.equals(value.getValue()))  {	  if(value.equals(typeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
165	[BUG]  [BUGGY]  if(typeAdapter.equals(value.equals(value))  {  [CE]  ')'  expected  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.equals(value.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.equals(value.equals(value))  {	  if(value.equals(typeAdapter.class))    {    	non-compiled	[CE]  ')'  expected	264	None	replace
166	[BUG]  [BUGGY]  if(typeAdapterClass!=  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
167	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
168	[BUG]  [BUGGY]  if(typeAdapterClass!=  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	93	None	replace
169	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
170	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
171	[BUG]  [BUGGY]  TypeAdapter  <?  >=  :  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >=  :  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >=  :  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	24	None	replace
172	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
173	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(path))  {  [CE]  cannot  find  symbol  path  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(path))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(path))  {	  if(TypeAdapter.class.isAssignableFrom(path))    {    	non-compiled	[CE]  cannot  find  symbol  path	229	None	replace
174	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(key))  {  [CE]  cannot  find  symbol  key  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(key))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(key))  {	  if(TypeAdapter.class.isAssignableFrom(path))    {    	non-compiled	[CE]  cannot  find  symbol  key	229	None	replace
175	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(path))  {  [CE]  cannot  find  symbol  path  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(path))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(path))  {	  if(TypeAdapter.class.isAssignableFrom(path))    {    	non-compiled	[CE]  cannot  find  symbol  path	229	None	replace
176	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapter))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  illegal  start  of  type	263	None	replace
177	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  >  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapter))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  >  expected	263	None	replace
178	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(TypeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(TypeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(TypeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	178	None	replace
179	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapter.class))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	178	None	replace
180	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	178	None	replace
181	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
182	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
183	[BUG]  [BUGGY]  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
184	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	148	None	replace
185	[BUG]  [BUGGY]  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
186	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  }  [CE]  >  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	148	None	replace
187	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
188	[BUG]  [BUGGY]  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	270	None	replace
189	[BUG]  [BUGGY]  TypeToken  <?  >=  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >=  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >=  type  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	270	None	replace
190	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	270	None	replace
191	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	270	None	replace
192	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >=  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >=  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >=  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	270	None	replace
193	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >=  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >=  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >=  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	270	None	replace
194	[BUG]  [BUGGY]  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	type  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	270	None	replace
195	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	add
196	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	add
197	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	add
198	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	186	None	add
199	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  typeAdapter.getType();  [CE]  reached  end  of  file  while  parsing  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    TypeToken  gson  =  typeAdapter.getType();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	add
200	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  >  expected  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;	  	non-compiled	[CE]  >  expected	186	None	add
201	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	242	None	replace
202	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterFactory.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	242	None	replace
203	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeToken.class)||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeToken.class)||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(TypeToken.class)||  typeAdapter.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	242	None	replace
204	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	242	None	replace
205	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  value.isAssignableFrom(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	242	2	replace
206	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	242	2	replace
207	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	242	None	replace
208	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
209	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(typeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
210	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
211	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	100	None	replace
212	[BUG]  [BUGGY]  if(value.equals(typeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(typeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(typeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
213	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [CE]  illegal  start  of  type  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
214	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  illegal  start  of  type  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
215	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeName)).construct();  [CE]  illegal  start  of  type  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeName)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeName)).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
216	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeId)).construct();  [CE]  illegal  start  of  type  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeId)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeId)).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	201	None	replace
217	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
218	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
219	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	72	None	replace
220	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
221	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	72	None	replace
222	[BUG]  [BUGGY]  if(value.equals(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
223	[BUG]  [BUGGY]  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
224	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
225	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
226	[BUG]  [BUGGY]  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
227	[BUG]  [BUGGY]  Constructor  <?  >=  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >=  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >=  type  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	184	None	replace
228	[BUG]  [BUGGY]  Constructor  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  not  a  statement  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	184	None	replace
229	[BUG]  [BUGGY]  Constructor  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  not  a  statement  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	184	None	replace
230	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
231	[BUG]  [BUGGY]  Constructor  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
232	[BUG]  [BUGGY]  Constructor  <  TypeAdapter  <?  >>  value  =(Constructor  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter  <?  >>  value  =(Constructor  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter  <?  >>  value  =(Constructor  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
233	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(type)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
234	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeName)).construct();  [CE]  illegal  start  of  type  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeName)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeName)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
235	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeId)).construct();  [CE]  illegal  start  of  type  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeId)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeId)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
236	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
237	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  type  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	239	None	replace
238	[BUG]  [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	239	None	replace
239	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >=  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >=  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >=  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	239	None	replace
240	[BUG]  [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	239	None	replace
241	[BUG]  [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  illegal  start  of  expression  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >=  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	239	None	replace
242	[BUG]  [BUGGY]  Constructor  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  type  [FE]                    ClassCastException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	239	None	replace
243	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  >  expected  [FE]                      ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >=  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	239	None	replace
244	[BUG]  [BUGGY]  if(type  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(type  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
245	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  type.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  type.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  type.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
246	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  type.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  type.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  type.isAssignableFrom(type))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
247	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(type))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
248	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
249	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	18	None	add
250	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	43	None	add
251	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	43	None	add
252	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  ||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  ||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    ||  typeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
253	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	43	None	add
254	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	43	None	add
255	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(type))  {  [CE]  not  a  statement  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(type))  {	  	non-compiled	[CE]  not  a  statement	43	None	add
256	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(fieldType))  {  [CE]  not  a  statement  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(fieldType))  {	  	non-compiled	[CE]  not  a  statement	43	None	add
257	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value));  [CE]  not  a  statement  [FE]                  ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value));	  	non-compiled	[CE]  not  a  statement	43	None	add
258	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	208	None	add
259	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  	non-compiled	[CE]  ';'  expected	208	None	add
260	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  >  expected  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  	non-compiled	[CE]  >  expected	208	None	add
261	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  >  expected  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  	non-compiled	[CE]  >  expected	208	None	add
262	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  >  expected  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  	non-compiled	[CE]  >  expected	208	None	add
263	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,	  	non-compiled	[CE]  illegal  start  of  expression	208	None	add
264	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  >  expected  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  	non-compiled	[CE]  >  expected	208	None	add
265	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	208	None	add
266	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeClass))  {  [CE]  cannot  find  symbol  typeClass  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeClass))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeClass	80	None	replace
267	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeTypeAdapterClass))  {  [CE]  cannot  find  symbol  typeTypeAdapterClass  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeTypeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeTypeAdapterClass))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeTypeAdapterClass	80	None	replace
268	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(fieldType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(fieldType))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	80	None	replace
269	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(type  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(type	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	151	None	replace
270	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(type  [CE]  ')'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(type	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	151	None	replace
271	[BUG]  [BUGGY]  Constructor  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
272	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
273	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	151	None	replace
274	[BUG]  [BUGGY]  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value.isAssignableFrom(TypeAdapter.class))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
275	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value.isAssignableFrom(TypeAdapter.class))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
276	[BUG]  [BUGGY]  final  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  final  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value.isAssignableFrom(TypeAdapter.class))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
277	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value.isAssignableFrom(TypeAdapter.class))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
278	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  )value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  not  a  statement  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  )value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  )value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value.isAssignableFrom(TypeAdapter.class))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  not  a  statement	165	None	replace
279	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >=  )value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  >  expected  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >=  )value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >=  )value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value.isAssignableFrom(TypeAdapter.class))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  >  expected	165	None	replace
280	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
281	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
282	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
283	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
284	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
285	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
286	[BUG]  [BUGGY]  if(type!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(type!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  type	250	None	replace
287	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(fieldType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(fieldType))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	250	None	replace
288	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(type))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  type	250	None	replace
289	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeType))  {  [CE]  cannot  find  symbol  typeType  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeType))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  typeType	250	None	replace
290	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()!=  ';'  [CE]  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()!=  ';'  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()!=  ';'	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  	257	None	replace
291	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  >>  ';'  [CE]  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  >>  ';'  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  >>  ';'	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  	257	None	replace
292	[BUG]  [BUGGY]  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
293	[BUG]  [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	210	None	replace
294	[BUG]  [BUGGY]  parent  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  parent  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	parent  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	210	None	replace
295	[BUG]  [BUGGY]  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
296	[BUG]  [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	210	None	replace
297	[BUG]  [BUGGY]  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  ||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ".);  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
298	[BUG]  [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]                    ClassCastException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ".);  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	210	None	replace
299	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	150	None	replace
300	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
301	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [CE]  ')'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	150	None	replace
302	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  >  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  >  expected	150	None	replace
303	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	150	None	replace
304	[BUG]  [BUGGY]  ||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  ||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >=    )    value;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
305	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  >  expected  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  >  expected	193	None	replace
306	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  >  expected  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  >  expected	193	None	replace
307	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(key)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  key  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(key)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(key)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeName)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  key	236	None	replace
308	[BUG]  [BUGGY]  if(type.isAssignableFrom(typeName)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeName  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(type.isAssignableFrom(typeName)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.isAssignableFrom(typeName)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeName)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeName	236	None	replace
309	[BUG]  [BUGGY]  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  not  a  statement	145	None	replace
310	[BUG]  [BUGGY]  Constructor.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Constructor.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  not  a  statement	145	None	replace
311	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  typeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  not  a  statement	145	None	replace
312	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  typeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
313	[BUG]  [BUGGY]  ||  TypeToken.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
314	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
315	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
316	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapter))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapter))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapter))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
317	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
318	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
319	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
320	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	138	None	replace
321	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	138	None	replace
322	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  }  [CE]  >  expected  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	138	None	replace
323	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  }  [CE]  >  expected  [FE]                    ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	138	None	replace
324	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  &&  value.isAssignableFrom(TypeAdapter.class))  {	  if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	108	2	replace
325	[BUG]  [BUGGY]  if(value  ==  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  &&  value.isAssignableFrom(TypeAdapter.class))  {	  if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	108	2	replace
326	[BUG]  [BUGGY]  if(value!=  null  ||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {	  if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
327	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||  value.equals(TypeAdapter.class))  {	  if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	108	2	replace
328	[BUG]  [BUGGY]  if(value!=  null  ||  value.equals(TypeAdapter.class))  {  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  value.equals(TypeAdapter.class))  {	  if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	108	2	replace
329	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  value.equals(TypeAdapter.class))  {	  if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	108	2	replace
330	[BUG]  [BUGGY]  if(value  ==  null  ||  value.equals(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.equals(TypeAdapter.class))  {	  if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	108	2	replace
331	[BUG]  [BUGGY]  Gson  gson  =  typeAdapterFactory.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  typeAdapterFactory.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  typeAdapterFactory.get(TypeToken.get(typeAdapterFactory)).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
332	[BUG]  [BUGGY]  final  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  illegal  start  of  type  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  final  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
333	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	add
334	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	add
335	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	213	None	add
336	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  not  a  statement  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  not  a  statement	213	None	add
337	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  ConstructorConstructor  constructorConstructor  =(ConstructorConstructor)value.clone();  [CE]  reached  end  of  file  while  parsing  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  ConstructorConstructor  constructorConstructor  =(ConstructorConstructor)value.clone();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    ConstructorConstructor  constructorConstructor  =(ConstructorConstructor)value.clone();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	add
338	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	add
339	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	add
340	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	add
341	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	125	None	add
342	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
343	[BUG]  [BUGGY]  TypeToken  <?  >=  :  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >=  :  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >=  :  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	86	None	replace
344	[BUG]  [BUGGY]  TypeToken  <?  >>  :  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  :  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >>  :  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	86	None	replace
345	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  value.equals(TypeToken.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.equals(TypeAdapter.class)||  value.equals(TypeToken.class))  {	  if(value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	209	2	replace
346	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)||  value.equals(TypeToken.class))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  value.equals(TypeToken.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)||  value.equals(TypeToken.class))  {	  if(value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	209	2	replace
347	[BUG]  [BUGGY]  if(type.equals(TypeAdapter.class))  {  [CE]  cannot  find  symbol  type  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(type.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.equals(TypeAdapter.class))  {	  if(value.equals(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  type	209	None	replace
348	[BUG]  [BUGGY]  if(typeAdapter.equals(TypeAdapter.class))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(typeAdapter.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.equals(TypeAdapter.class))  {	  if(value.equals(TypeAdapter.class))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	209	None	replace
349	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeToken.class.isAssignableFrom(value))  {	  if(value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	209	2	replace
350	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value))  {	  if(value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	209	2	replace
351	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.equals(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {	  if(value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	209	2	replace
352	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {	  if(value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	209	2	replace
353	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
354	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	66	None	add
355	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
356	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
357	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
358	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeType)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeType)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeType)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
359	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeName)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeName)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeName)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
360	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
361	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	129	None	replace
362	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
363	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass)||  typeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	129	None	replace
364	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	103	None	replace
365	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(type)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(type)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(type)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	103	None	replace
366	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapterFactory.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapterFactory.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapterFactory.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
367	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	103	2	replace
368	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	103	2	replace
369	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapterFactory.class)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeAdapterFactory.class)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	103	2	replace
370	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapterFactory.class)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapterFactory.class)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapterFactory.class)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	103	2	replace
371	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	103	None	replace
372	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	13	2	replace
373	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	13	2	replace
374	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {	  if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	13	None	replace
375	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.TYPE)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  TYPE  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.TYPE)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.TYPE)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  TYPE	13	None	replace
376	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get  >>  ')';  [CE]  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get  >>  ')';  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get  >>  ')';	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  	235	None	replace
377	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get  ==  ')';  [CE]  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get  ==  ')';  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get  ==  ')';	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  	235	None	replace
378	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get  >>  ')'  expected;  [CE]  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get  >>  ')'  expected;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get  >>  ')'  expected;	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  	235	None	replace
379	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get  >=  ')';  [CE]  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get  >=  ')';  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get  >=  ')';	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  	235	None	replace
380	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get!=  ')';  [CE]  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get!=  ')';  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get!=  ')';	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  	235	None	replace
381	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get  >>  ')'  [CE]  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get  >>  ')'  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get  >>  ')'	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  	235	None	replace
382	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get  ==  ')'  expected;  [CE]  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get  ==  ')'  expected;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get  ==  ')'  expected;	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  	235	None	replace
383	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value,  fieldType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value,  fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value,  fieldType))  {	  if(TypeAdapter.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	192	None	replace
384	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type,  fieldType))  {  [CE]  cannot  find  symbol  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type,  fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type,  fieldType))  {	  if(TypeAdapter.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  cannot  find  symbol  type	192	None	replace
385	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType,  annotation))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType,  annotation))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(fieldType,  annotation))  {	  if(TypeAdapter.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	192	None	replace
386	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType,  value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType,  value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(fieldType,  value))  {	  if(TypeAdapter.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	192	None	replace
387	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(fieldType))  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(fieldType))  {	  if(TypeAdapter.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
388	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get().create(gson,    fieldType);    }    	non-compiled	[CE]  illegal  start  of  type	223	None	replace
389	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get().create(gson,    fieldType);    }    	non-compiled	[CE]  illegal  start  of  type	223	None	replace
390	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  [CE]  >  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get().create(gson,    fieldType);    }    	non-compiled	[CE]  >  expected	223	None	replace
391	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  [CE]  >  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get().create(gson,    fieldType);    }    	non-compiled	[CE]  >  expected	223	None	replace
392	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeToken.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	168	None	replace
393	[BUG]  [BUGGY]  if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
394	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	168	None	replace
395	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	168	2	replace
396	[BUG]  [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	168	2	replace
397	[BUG]  [BUGGY]  if(value  ==  null  ||  typeToken.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeToken  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeToken.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeToken.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeToken	168	None	replace
398	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterClass))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	76	None	replace
399	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	76	None	replace
400	[BUG]  [BUGGY]  if(typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
401	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	76	None	replace
402	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(type)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(type)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(type)||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	76	None	replace
403	[BUG]  [BUGGY]  if(value!=  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	170	None	replace
404	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	170	None	replace
405	[BUG]  [BUGGY]  if(value!=  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
406	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	67	None	replace
407	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	67	2	replace
408	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	67	2	replace
409	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeToken)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeToken  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeToken)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(typeToken)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeToken	143	None	replace
410	[BUG]  [BUGGY]  if(value  ==  null  ||  value.class.isAssignableFrom(typeToken)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeToken  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.class.isAssignableFrom(typeToken)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.class.isAssignableFrom(typeToken)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeToken	143	None	replace
411	[BUG]  [BUGGY]  if(value  ==  null  ||  typeToken.class.isAssignableFrom(typeToken)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeToken  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeToken.class.isAssignableFrom(typeToken)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeToken.class.isAssignableFrom(typeToken)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeToken	143	None	replace
412	[BUG]  [BUGGY]  if(value!=  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
413	[BUG]  [BUGGY]  if(typeToken!=  null  ||  value.isAssignableFrom(typeToken)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeToken  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeToken!=  null  ||  value.isAssignableFrom(typeToken)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeToken!=  null  ||  value.isAssignableFrom(typeToken)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeToken	143	None	replace
414	[BUG]  [BUGGY]  if(typeToken  ==  null  ||  value.isAssignableFrom(typeToken)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeToken  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeToken  ==  null  ||  value.isAssignableFrom(typeToken)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeToken  ==  null  ||  value.isAssignableFrom(typeToken)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeToken	143	None	replace
415	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
416	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
417	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
418	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	182	None	replace
419	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	182	None	replace
420	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	214	2	replace
421	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	214	2	replace
422	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&!TypeAdapter.class.equals(value))  {	  if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	214	2	replace
423	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.equals(value))  {  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&!TypeAdapter.class.equals(value))  {	  if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	214	2	replace
424	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
425	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	179	None	replace
426	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
427	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
428	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
429	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeAdapter))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(typeAdapter))  {	  if(value    ==    null    ||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	81	None	replace
430	[BUG]  [BUGGY]  if(typeAdapter  ==  null  ||  value.isAssignableFrom(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null  ||  value.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null  ||  value.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	81	None	replace
431	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.isAssignableFrom(type))  {	  if(value    ==    null    ||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	81	None	replace
432	[BUG]  [BUGGY]  if(value!=  null  ||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  typeAdapter.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
433	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(typeType))  {  [CE]  cannot  find  symbol  typeType  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(typeType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.isAssignableFrom(typeType))  {	  if(value    ==    null    ||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeType	81	None	replace
434	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(typeClass))  {  [CE]  cannot  find  symbol  typeClass  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(typeClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.isAssignableFrom(typeClass))  {	  if(value    ==    null    ||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeClass	81	None	replace
435	[BUG]  [BUGGY]  TypeAdapter  <?  >=  :  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >=  :  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >=  :  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	84	None	replace
436	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
437	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	68	None	add
438	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(typeAdapterClass))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	82	None	replace
439	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	82	None	replace
440	[BUG]  [BUGGY]  if(typeAdapter  ==  null  ||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null  ||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null  ||  value.isAssignableFrom(typeAdapterClass))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	82	None	replace
441	[BUG]  [BUGGY]  if(type.equals(value))  {  [CE]  cannot  find  symbol  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(type.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.equals(value))  {	  if(value.equals(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  type	212	None	replace
442	[BUG]  [BUGGY]  if(typeAdapterClass.equals(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.equals(value))  {	  if(value.equals(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	212	None	replace
443	[BUG]  [BUGGY]  if(TypeToken.equals(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.equals(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.equals(typeAdapterClass))  {	  if(value.equals(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	212	None	replace
444	[BUG]  [BUGGY]  if(TypeToken.equals(value))  {  [CE]  non-static  method  equals(Object)  cannot  be  referenced  from  a  static  context  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.equals(value))  {	  if(value.equals(typeAdapterClass))    {    	non-compiled	[CE]  non-static  method  equals(Object)  cannot  be  referenced  from  a  static  context	212	None	replace
445	[BUG]  [BUGGY]  if(value.equals(typeAdapterFactory))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(typeAdapterFactory))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(typeAdapterFactory))  {	  if(value.equals(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	212	None	replace
446	[BUG]  [BUGGY]  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
447	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
448	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
449	[BUG]  [BUGGY]  ConstructorConstructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	ConstructorConstructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
450	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	251	None	replace
451	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	251	2	replace
452	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	251	2	replace
453	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterFactory.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	251	None	replace
454	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	251	None	replace
455	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	251	None	replace
456	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  typeAdapter.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	251	None	replace
457	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [CE]  ')'  expected  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	137	None	replace
458	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  >  expected  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  >  expected	137	None	replace
459	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [CE]  >  expected  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  >  expected	137	None	replace
460	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [CE]  ')'  expected  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	137	None	replace
461	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)&&  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)&&  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)&&  typeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
462	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	142	2	replace
463	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	142	2	replace
464	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	142	2	replace
465	[BUG]  [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	142	2	replace
466	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(type)&&  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(type)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(type)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	142	None	replace
467	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)&&  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)&&  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)&&  typeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
468	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
469	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
470	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  >  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  >  expected	120	None	replace
471	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
472	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  typeAdapter.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
473	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)&&  value.isAssignableFrom(typeAdapterClass))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	106	None	replace
474	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapterClass))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
475	[BUG]  [BUGGY]  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
476	[BUG]  [BUGGY]  if(!TypeAdapterFactory.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapterFactory.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapterFactory.class.isAssignableFrom(typeAdapterClass))  {	  if(!TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	40	None	replace
477	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	compilable	  [FE]  NullPointerException  	40	2	replace
478	[BUG]  [BUGGY]  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	compilable	  [FE]  NullPointerException  	40	2	replace
479	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(fieldType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(fieldType))  {	  if(!TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	40	None	replace
480	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(typeClass))  {  [CE]  cannot  find  symbol  typeClass  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(typeClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(typeClass))  {	  if(!TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeClass	40	None	replace
481	[BUG]  [BUGGY]  if(typeAdapter  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
482	[BUG]  [BUGGY]  if(typeAdapter!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	185	None	replace
483	[BUG]  [BUGGY]  if(typeAdapter!=  null  ||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null  ||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null  ||  typeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
484	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	253	None	replace
485	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	253	None	replace
486	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterFactory.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapterFactory.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterFactory.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	253	None	replace
487	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	253	2	replace
488	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	253	2	replace
489	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	253	2	replace
490	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	253	2	replace
491	[BUG]  [BUGGY]  if(typeAdapterClass!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	253	None	replace
492	[BUG]  [BUGGY]  Constructor  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
493	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	158	None	replace
494	[BUG]  [BUGGY]  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
495	[BUG]  [BUGGY]  Constructor  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	158	None	replace
496	[BUG]  [BUGGY]  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
497	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  value.isAssignableFrom(typeAdapterClass))  {	  if(value!=    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	96	None	replace
498	[BUG]  [BUGGY]  if(value!=  null  ||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  typeAdapterFactory.isAssignableFrom(value))  {	  if(value!=    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	96	None	replace
499	[BUG]  [BUGGY]  if(typeAdapterClass!=  null  ||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null  ||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null  ||  value.isAssignableFrom(typeAdapterClass))  {	  if(value!=    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	96	None	replace
500	[BUG]  [BUGGY]  if(typeAdapter!=  null  ||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null  ||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null  ||  value.isAssignableFrom(typeAdapterClass))  {	  if(value!=    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	96	None	replace
501	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
502	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
503	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
504	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  [CE]  illegal  start  of  type  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
505	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
506	[BUG]  [BUGGY]  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  not  a  statement  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >=    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  not  a  statement	118	None	replace
507	[BUG]  [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >=    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
508	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [CE]  not  a  statement  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >=    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  not  a  statement	118	None	replace
509	[BUG]  [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >=    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
510	[BUG]  [BUGGY]  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  not  a  statement  [FE]                    ClassCastException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >=    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  not  a  statement	118	None	replace
511	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [CE]  not  a  statement  [FE]                      ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >=    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  not  a  statement	118	None	replace
512	[BUG]  [BUGGY]  Constructor  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  not  a  statement  [FE]                        ClassCastException      [CONTEXT]        [BUGGY]  Constructor  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >=    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  not  a  statement	118	None	replace
513	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')');  [CE]  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')');  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')');	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  	217	None	replace
514	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')');  [CE]  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')');  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')');	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  	217	None	replace
515	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')'  expected);  [CE]  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')'  expected);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')'  expected);	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  	217	None	replace
516	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')'  expected  [CE]  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')'  expected  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')'  expected	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  	217	None	replace
517	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')');  [CE]  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')');  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')');	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  	217	None	replace
518	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')'  [CE]  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')'  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')'	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  	217	None	replace
519	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')';  [CE]  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')';  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  >>  ')';	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  	217	None	replace
520	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)&&  value  instanceof  TypeAdapter  <?  >=  )  {  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)&&  value  instanceof  TypeAdapter  <?  >=  )  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)&&  value  instanceof  TypeAdapter  <?  >=  )  {	  if(value    instanceof    Class    <?    >=    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
521	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
522	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
523	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
524	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [CE]  illegal  start  of  type  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
525	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
526	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [CE]  >  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  >  expected	154	None	replace
527	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
528	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
529	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  >  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  >  expected	33	None	replace
530	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
531	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(typeAdapter.class))  {	  if(typeAdapter.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
532	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  typeAdapter.isAssignableFrom(value))  {	  if(typeAdapter.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
533	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeAdapter))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(typeAdapter))  {	  if(typeAdapter.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	105	None	replace
534	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapter.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
535	[BUG]  [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.isAssignableFrom(typeAdapter.class))  {	  if(typeAdapter.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
536	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class)&&  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class)&&  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(TypeAdapter.class)&&  value.isAssignableFrom(typeAdapterClass))  {	  if(typeAdapter.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
537	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
538	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
539	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
540	[BUG]  [BUGGY]  TypeToken  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).    	non-compiled	[CE]  illegal  start  of  type	258	None	replace
541	[BUG]  [BUGGY]  if(Type.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(Type.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(Type.class.isAssignableFrom(value))  {	  if(value.class.isAssignableFrom(typeAdapter))    {    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
542	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(typeAdapter))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(typeAdapter))  {	  if(value.class.isAssignableFrom(typeAdapter))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	112	None	replace
543	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
544	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
545	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass)&&  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass)&&  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass)&&  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
546	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
547	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
548	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	47	2	replace
549	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	47	2	replace
550	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	47	2	replace
551	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	47	2	replace
552	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	47	2	replace
553	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	47	2	replace
554	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(!TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	47	2	replace
555	[BUG]  [BUGGY]  if(!TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	47	2	replace
556	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(type)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(type)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(type)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	47	None	replace
557	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	47	2	replace
558	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	47	2	replace
559	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  value.isAssignableFrom(typeAdapterClass))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	73	None	replace
560	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(typeAdapterClass))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	73	None	replace
561	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
562	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
563	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  ||  typeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
564	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeType)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeType)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeType)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
565	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
566	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  typeAdapter.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  typeAdapter.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  typeAdapter.get(TypeToken.get(typeAdapterClass)).construct();	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
567	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.getRawClass()).construct();  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.getRawClass()).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.getRawClass()).construct();	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
568	[BUG]  [BUGGY]  ||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  ||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
569	[BUG]  [BUGGY]  TypeToken.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  not  a  statement	247	None	replace
570	[BUG]  [BUGGY]  Constructor.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Constructor.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  not  a  statement	247	None	replace
571	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(TypeToken.class))  {  TypeToken.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(TypeToken.class))  {  TypeToken.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(TypeToken.class))  {  TypeToken.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  not  a  statement	247	None	replace
572	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  typeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  not  a  statement	247	None	replace
573	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(type)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	14	None	replace
574	[BUG]  [BUGGY]  if(TypeToken.CLASS.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  CLASS  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.CLASS.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.CLASS.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(type)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  CLASS	14	None	replace
575	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(type)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	14	2	replace
576	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(type)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	14	2	replace
577	[BUG]  [BUGGY]  if(TypeToken.TYPE.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  TYPE  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.TYPE.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.TYPE.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(type)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  TYPE	14	None	replace
578	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
579	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  ||  typeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
580	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(typeAdapterClass))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
581	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >=  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
582	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass)&&  value.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass)&&  value.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass)&&  value.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
583	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass)||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	75	None	replace
584	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter)||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	75	None	replace
585	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	75	None	replace
586	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapterClass)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(typeAdapterClass)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapterClass)||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	75	None	replace
587	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass)||  value.isAssignableFrom(typeAdapterClass))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	75	None	replace
588	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter.class)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter.class)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter.class)||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
589	[BUG]  [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  &&  value.isAssignableFrom(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  &&  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  instanceof  Class  <?  >>  &&  value.isAssignableFrom(typeAdapterClass))  {	  if(typeAdapterClass    instanceof    Class    <?    >>    ||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
590	[BUG]  [BUGGY]  if(value  instanceof  Class  <?!=  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  >  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?!=  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?!=  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapterClass    instanceof    Class    <?    >>    ||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  >  expected	174	None	replace
591	[BUG]  [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapterClass    instanceof    Class    <?    >>    ||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
592	[BUG]  [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  illegal  start  of  expression	204	None	replace
593	[BUG]  [BUGGY]  if(typeAdapter  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  illegal  start  of  expression	204	None	replace
594	[BUG]  [BUGGY]  if(typeClass.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeClass  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(typeClass.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeClass.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeClass)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeClass	104	None	replace
595	[BUG]  [BUGGY]  if(typeObjectClass.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeObjectClass  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(typeObjectClass.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeObjectClass.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeObjectClass)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeObjectClass	237	None	replace
596	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	add
597	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	141	None	add
598	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  [CE]  >  expected  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;	  	non-compiled	[CE]  >  expected	141	None	add
599	[BUG]  [BUGGY]  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  token  =  constructorConstructor.get(TypeToken.class);	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
600	[BUG]  [BUGGY]  Constructor  <?  >=  :  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >=  :  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >=  :  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  not  a  statement	205	None	replace
601	[BUG]  [BUGGY]  Constructor  <?  >>  :  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  :  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  :  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  not  a  statement	205	None	replace
602	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.class);  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.class);	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
603	[BUG]  [BUGGY]  Constructor  <?  >=  :  TypeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >=  :  TypeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >=  :  TypeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  not  a  statement	205	None	replace
604	[BUG]  [BUGGY]  Constructor  <?  >>  :  TypeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  :  TypeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  :  TypeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  not  a  statement	205	None	replace
605	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.class);  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.class);	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
606	[BUG]  [BUGGY]  if(type  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(type  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  type	268	None	replace
607	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(type))    {    	compilable	  [FE]  ClassCastException  	268	2	replace
608	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(type))    {    	compilable	  [FE]  ClassCastException  	268	2	replace
609	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(type))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  type	268	None	replace
610	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  >  expected  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  >  expected	90	None	replace
611	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  }  [CE]  >  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  >  expected	90	None	replace
612	[BUG]  [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	21	None	replace
613	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	21	None	replace
614	[BUG]  [BUGGY]  if(value!=  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	21	None	replace
615	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(fieldType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(fieldType))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	172	None	replace
616	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(typeAdapterClass))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	172	None	replace
617	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeClass))  {  [CE]  cannot  find  symbol  typeClass  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeClass))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeClass	172	None	replace
618	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	172	None	replace
619	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterFactory))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterFactory))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterFactory))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	172	None	replace
620	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	176	None	add
621	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	176	None	add
622	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  [CE]  >  expected  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;	  	non-compiled	[CE]  >  expected	176	None	add
623	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	274	None	replace
624	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	274	None	replace
625	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	274	2	replace
626	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	274	2	replace
627	[BUG]  [BUGGY]  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).    	non-compiled	[CE]  not  a  statement	234	None	replace
628	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).    	non-compiled	[CE]  ';'  expected	234	None	replace
629	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [CE]  >  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).    	non-compiled	[CE]  >  expected	234	None	replace
630	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  typeAdapter  =  constructorConstructor.get  [CE]  >  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  typeAdapter  =  constructorConstructor.get	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).    	non-compiled	[CE]  >  expected	234	None	replace
631	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeAdapter.class)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	42	2	replace
632	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	42	2	replace
633	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
634	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.equals(TypeAdapter.class)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	42	2	replace
635	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)||!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	42	2	replace
636	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	42	2	replace
637	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	42	2	replace
638	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)&&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.equals(TypeAdapter.class)&&!TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	42	2	replace
639	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)&&!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)&&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)&&!TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	42	2	replace
640	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {	  if(TypeAdapter.class.isAssignableFrom(fieldType)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	101	None	replace
641	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)&&  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(fieldType)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(fieldType)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	101	None	replace
642	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(fieldType)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
643	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(type,  value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(type,  value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(type,  value))  {	  if(TypeAdapter.class.isAssignableFrom(fieldType)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	101	None	replace
644	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(value),  typeAdapterClass)  {  [CE]  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(value),  typeAdapterClass)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(value),  typeAdapterClass)  {	  if(TypeAdapter.class.isAssignableFrom(fieldType)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  	101	None	replace
645	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(value,  typeAdapterClass))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(value,  typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(value,  typeAdapterClass))  {	  if(TypeAdapter.class.isAssignableFrom(fieldType)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	101	None	replace
646	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	177	2	replace
647	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	177	2	replace
648	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	177	2	replace
649	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	177	2	replace
650	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  value.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeAdapter.class)&&  value.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	177	2	replace
651	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  value.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  value.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)&&  value.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	177	2	replace
652	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)&&  typeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
653	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
654	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
655	[BUG]  [BUGGY]  if(typeAdapter.class  ==  null  ||  value.isAssignableFrom(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class  ==  null  ||  value.isAssignableFrom(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class  ==  null  ||  value.isAssignableFrom(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
656	[BUG]  [BUGGY]  if(typeAdapter.class!=  null  ||  value.isAssignableFrom(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class!=  null  ||  value.isAssignableFrom(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class!=  null  ||  value.isAssignableFrom(typeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
657	[BUG]  [BUGGY]  final  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  final  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
658	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
659	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  type	49	None	replace
660	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >=    &&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
661	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(typeAdapterClass))  {	  if(value    instanceof    Class    <?    >=    &&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
662	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  &&  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >=  &&  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  &&  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >=    &&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
663	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	265	None	replace
664	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(typeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	265	None	replace
665	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter.class)||  value.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter.class)||  value.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter.class)||  value.isAssignableFrom(typeAdapter.class))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	265	None	replace
666	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapter)||  typeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	265	None	replace
667	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapter.class)||  value.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(typeAdapter.class)||  value.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapter.class)||  value.isAssignableFrom(typeAdapter.class))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	265	None	replace
668	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)||  value.class.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)||  value.class.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapter)||  value.class.isAssignableFrom(typeAdapter.class))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	265	None	replace
669	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)&&    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
670	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)&&    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
671	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.equals(typeAdapterClass)&&  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.equals(typeAdapterClass)&&  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  value.equals(typeAdapterClass)&&  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)&&    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
672	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)&&    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
673	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  ||  value.isAssignableFrom(typeAdapterClass)&&  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >=  ||  value.isAssignableFrom(typeAdapterClass)&&  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  ||  value.isAssignableFrom(typeAdapterClass)&&  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)&&    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
674	[BUG]  [BUGGY]  if(typeAdapterClass!=  null  ||  value.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null  ||  value.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null  ||  value.isAssignableFrom(typeAdapter.class))  {	  if(value!=    null    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	98	None	replace
675	[BUG]  [BUGGY]  if(typeAdapter.class!=  null  ||  value.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter.class!=  null  ||  value.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class!=  null  ||  value.isAssignableFrom(value))  {	  if(value!=    null    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
676	[BUG]  [BUGGY]  if(typeAdapterClass!=  null  ||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null  ||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null  ||  typeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	98	None	replace
677	[BUG]  [BUGGY]  if(value!=  null  ||  value.class.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.class.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  value.class.isAssignableFrom(typeAdapter.class))  {	  if(value!=    null    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
678	[BUG]  [BUGGY]  if(typeAdapter.class  ==  null  ||  value.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class  ==  null  ||  value.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class  ==  null  ||  value.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
679	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
680	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  value.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  value.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  value.isAssignableFrom(typeAdapter.class))  {	  if(value    ==    null    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	79	None	replace
681	[BUG]  [BUGGY]  if(value  ==  null  ||  value.class.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.class.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.class.isAssignableFrom(typeAdapter.class))  {	  if(value    ==    null    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
682	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
683	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	12	None	add
684	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.isAssignableFrom(TypeAdapter.class))  {	  if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
685	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  value.equals(TypeAdapter.class))  {	  if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	189	2	replace
686	[BUG]  [BUGGY]  if(value!=  null  &&  value.equals(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.equals(TypeAdapter.class))  {	  if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	189	2	replace
687	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.getClass().isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  value.getClass().isAssignableFrom(TypeAdapter.class))  {	  if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	189	2	replace
688	[BUG]  [BUGGY]  if(value!=  null  &&  value.getClass().isAssignableFrom(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.getClass().isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.getClass().isAssignableFrom(TypeAdapter.class))  {	  if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	189	2	replace
689	[BUG]  [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [CE]  illegal  start  of  type  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();	  Constructor    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
690	[BUG]  [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  illegal  start  of  type  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Constructor    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
691	[BUG]  [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  illegal  start  of  type  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  Constructor    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
692	[BUG]  [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();  [CE]  illegal  start  of  type  [FE]                                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();	  Constructor    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
693	[BUG]  [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [CE]  illegal  start  of  type  [FE]                                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();	  Constructor    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
694	[BUG]  [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeName)).construct();  [CE]  illegal  start  of  type  [FE]                                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeName)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeName)).construct();	  Constructor    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
695	[BUG]  [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapterClass    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	244	None	replace
696	[BUG]  [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(typeAdapterClass    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	244	None	replace
697	[BUG]  [BUGGY]  if(typeAdapter!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	11	None	replace
698	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeClass))  {  [CE]  cannot  find  symbol  typeClass  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeClass))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeClass	11	None	replace
699	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeTypeAdapterClass))  {  [CE]  cannot  find  symbol  typeTypeAdapterClass  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeTypeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeTypeAdapterClass))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeTypeAdapterClass	11	None	replace
700	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(typeAdapterClass))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	11	None	replace
701	[BUG]  [BUGGY]  if(value!=  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
702	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	126	None	replace
703	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  type  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	238	None	replace
704	[BUG]  [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	238	None	replace
705	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >=  type  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >=  type  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >=  type  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	238	None	replace
706	[BUG]  [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  type  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  type  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  type  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	238	None	replace
707	[BUG]  [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  illegal  start  of  expression  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >=  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	238	None	replace
708	[BUG]  [BUGGY]  Constructor  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  type  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	238	None	replace
709	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  >  expected  [FE]                    ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >=  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	238	None	replace
710	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	139	None	replace
711	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	139	None	replace
712	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  >  expected  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  >  expected	139	None	replace
713	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [CE]  ')'  expected  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	139	None	replace
714	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  >  expected  [FE]                    ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  >  expected	139	None	replace
715	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct().create(gson,  fieldType,  annotation);  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct().create(gson,  fieldType,  annotation);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct().create(gson,  fieldType,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(type)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
716	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(type)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
717	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(0)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(0)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(0)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(type)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
718	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	144	None	replace
719	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(baseType))  {  [CE]  cannot  find  symbol  baseType  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(baseType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(baseType))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  baseType	144	None	replace
720	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(path))  {  [CE]  cannot  find  symbol  path  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(path))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(path))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  path	144	None	replace
721	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
722	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
723	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
724	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)&&  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)&&  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)&&  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
725	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass)&&  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass)&&  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass)&&  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
726	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.equals(typeAdapterClass)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.equals(typeAdapterClass)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  value.equals(typeAdapterClass)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
727	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(fieldType.isAssignableFrom(TypeAdapter.class))  {	  if(type.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	109	2	replace
728	[BUG]  [BUGGY]  if(fieldType.isAssignableFrom(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(fieldType.isAssignableFrom(TypeAdapter.class))  {	  if(type.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	109	2	replace
729	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType);  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType);	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
730	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(fieldType));  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(fieldType));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(fieldType));	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
731	[BUG]  [BUGGY]  final  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  final  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
732	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeFactory));  [CE]  illegal  start  of  type  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeFactory));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeFactory));	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
733	[BUG]  [BUGGY]  JsonConstructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  JsonConstructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	JsonConstructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
734	[BUG]  [BUGGY]  Gson  gson  =  typeFactory.get(TypeToken.get(typeFactory)).construct();  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  typeFactory.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  typeFactory.get(TypeToken.get(typeFactory)).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
735	[BUG]  [BUGGY]  final  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  final  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
736	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(TypeToken.class);  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(TypeToken.class);	  Constructor    <?>    annotation    =    constructorConstructor.getAnnotation(JsonToken.class);    	non-compiled	[CE]  illegal  start  of  type	225	None	replace
737	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.class,  fieldType);  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.class,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.class,  fieldType);	  Constructor    <?>    annotation    =    constructorConstructor.getAnnotation(JsonToken.class);    	non-compiled	[CE]  illegal  start  of  type	225	None	replace
738	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.TYPE_OBJECT);  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.TYPE_OBJECT);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.TYPE_OBJECT);	  Constructor    <?>    annotation    =    constructorConstructor.getAnnotation(JsonToken.class);    	non-compiled	[CE]  illegal  start  of  type	225	None	replace
739	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.class,  value);  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.class,  value);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.class,  value);	  Constructor    <?>    annotation    =    constructorConstructor.getAnnotation(JsonToken.class);    	non-compiled	[CE]  illegal  start  of  type	225	None	replace
740	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.TYPE_ARRAY);  [CE]  illegal  start  of  type  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.TYPE_ARRAY);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.TYPE_ARRAY);	  Constructor    <?>    annotation    =    constructorConstructor.getAnnotation(JsonToken.class);    	non-compiled	[CE]  illegal  start  of  type	225	None	replace
741	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(type,  JsonToken.class);  [CE]  illegal  start  of  type  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(type,  JsonToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(type,  JsonToken.class);	  Constructor    <?>    annotation    =    constructorConstructor.getAnnotation(JsonToken.class);    	non-compiled	[CE]  illegal  start  of  type	225	None	replace
742	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	51	2	replace
743	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	51	2	replace
744	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
745	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	124	None	replace
746	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	124	None	replace
747	[BUG]  [BUGGY]  Object  value  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  Object  value  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Object  value  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
748	[BUG]  [BUGGY]  Constructor  <?  >=  value  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  not  a  statement  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  Constructor  <?  >=  value  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >=  value  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	211	None	replace
749	[BUG]  [BUGGY]  Constructor  <?  >>  value  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  not  a  statement  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  value  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  value  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	211	None	replace
750	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  not  a  statement  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	211	None	replace
751	[BUG]  [BUGGY]  final  Object  value  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  final  Object  value  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  Object  value  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
752	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
753	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	135	None	replace
754	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  }  [CE]  >  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	135	None	replace
755	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
756	[BUG]  [BUGGY]  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
757	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
758	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
759	[BUG]  [BUGGY]  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
760	[BUG]  [BUGGY]  Constructor  <?  >=  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >=  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >=  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  not  a  statement	183	None	replace
761	[BUG]  [BUGGY]  Constructor  <?  >>  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  not  a  statement	183	None	replace
762	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeToken));  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeToken));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeToken));	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
763	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeToken.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
764	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeToken.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	17	None	replace
765	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(TypeToken.class)||  value.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(TypeToken.class)||  value.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(TypeToken.class)||  value.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeToken.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
766	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeToken.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
767	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(TypeToken.class)||  value.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(TypeToken.class)||  value.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(TypeToken.class)||  value.isAssignableFrom(typeAdapter.class))  {	  if(value.isAssignableFrom(TypeToken.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
768	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(TypeToken.class)||  value.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(TypeToken.class)||  value.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(TypeToken.class)||  value.isAssignableFrom(typeAdapter.class))  {	  if(value.isAssignableFrom(TypeToken.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
769	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
770	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
771	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
772	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
773	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  typeAdapter.getType();  [CE]  reached  end  of  file  while  parsing  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    TypeToken  gson  =  typeAdapter.getType();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
774	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
775	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	188	None	add
776	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	266	None	replace
777	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	266	None	replace
778	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapter))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapter))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	266	None	replace
779	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapter))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapter))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	266	None	replace
780	[BUG]  [BUGGY]  if(ValueAdapter.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(ValueAdapter.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(ValueAdapter.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	266	None	replace
781	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	add
782	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	add
783	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	add
784	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	50	None	add
785	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  not  a  statement  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  not  a  statement	50	None	add
786	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	44	2	replace
787	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	44	2	replace
788	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	44	2	replace
789	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	44	2	replace
790	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	44	2	replace
791	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	44	2	replace
792	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(type)||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(type)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(type)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	44	None	replace
793	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeAdapterFactory.class))  {	  if(TypeAdapterFactory.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	63	2	replace
794	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  [FE]  NullPointerException  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapterFactory.class))  {	  if(TypeAdapterFactory.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	63	2	replace
795	[BUG]  [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.isAssignableFrom(typeAdapterClass))  {	  if(TypeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	63	None	replace
796	[BUG]  [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterClass))  {	  if(TypeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
797	[BUG]  [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
798	[BUG]  [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
799	[BUG]  [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(TypeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
800	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	add
801	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	add
802	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	36	None	add
803	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  not  a  statement  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  not  a  statement	36	None	add
804	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	add
805	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  ConstructorConstructor  constructorConstructor  =(ConstructorConstructor)value.clone();  [CE]  reached  end  of  file  while  parsing  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  ConstructorConstructor  constructorConstructor  =(ConstructorConstructor)value.clone();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    ConstructorConstructor  constructorConstructor  =(ConstructorConstructor)value.clone();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	add
806	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  >  expected  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;	  	non-compiled	[CE]  >  expected	36	None	add
807	[BUG]  [BUGGY]  TypeToken.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  TypeToken.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  not  a  statement	246	None	replace
808	[BUG]  [BUGGY]  Constructor.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Constructor.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  not  a  statement	246	None	replace
809	[BUG]  [BUGGY]  ||  TypeToken.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  ||  TypeToken.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  TypeToken.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	246	None	replace
810	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  typeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  not  a  statement	246	None	replace
811	[BUG]  [BUGGY]  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	246	None	replace
812	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  value.isAssignableFrom(typeAdapterClass))  {	  if(typeAdapterClass    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	255	None	replace
813	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  typeAdapter.isAssignableFrom(value))  {	  if(typeAdapterClass    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	255	None	replace
814	[BUG]  [BUGGY]  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >=    )value;    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
815	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeAdapter.class)&&  TypeToken.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	69	2	replace
816	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)&&  TypeToken.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	69	2	replace
817	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	69	None	replace
818	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.equals(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	69	2	replace
819	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	69	2	replace
820	[BUG]  [BUGGY]  if(type.isAssignableFrom(TypeAdapter.class)||  type.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(type.isAssignableFrom(TypeAdapter.class)||  type.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.isAssignableFrom(TypeAdapter.class)||  type.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	69	None	replace
821	[BUG]  [BUGGY]  if(value!=  null  ||  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapterClass!=    null    ||    value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
822	[BUG]  [BUGGY]  if(value  ==  null  ||  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapterClass!=    null    ||    value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
823	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapterClass!=    null    ||    value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
824	[BUG]  [BUGGY]  if(value  instanceof  Class  <  TypeAdapter  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  generic  type  for  instanceof  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <  TypeAdapter  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <  TypeAdapter  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapterClass!=    null    ||    value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  generic  type  for  instanceof	173	None	replace
825	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
826	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	71	None	replace
827	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
828	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(TypeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
829	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
830	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
831	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	110	None	add
832	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.    	non-compiled	[CE]  illegal  start  of  expression	219	None	replace
833	[BUG]  [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.    	non-compiled	[CE]  illegal  start  of  expression	219	None	replace
834	[BUG]  [BUGGY]  TypeToken  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.    	non-compiled	[CE]  not  a  statement	219	None	replace
835	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.    	non-compiled	[CE]  illegal  start  of  expression	219	None	replace
836	[BUG]  [BUGGY]  TypeToken  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.    	non-compiled	[CE]  not  a  statement	219	None	replace
837	[BUG]  [BUGGY]  TypeToken  typeAdapterClass  =  constructorConstructor.get(TypeToken.  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  typeAdapterClass  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  typeAdapterClass  =  constructorConstructor.get(TypeToken.	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.    	non-compiled	[CE]  illegal  start  of  expression	219	None	replace
838	[BUG]  [BUGGY]  TypeToken  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  not  a  statement  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.    	non-compiled	[CE]  not  a  statement	219	None	replace
839	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
840	[BUG]  [BUGGY]  TypeToken  gson  =  typeAdapterFactory.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  typeAdapterFactory.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  typeAdapterFactory.get(TypeToken.get(typeAdapterClass)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
841	[BUG]  [BUGGY]  TypeToken  gson  =  typeAdapter.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  typeAdapter.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  typeAdapter.get(TypeToken.get(typeAdapterClass)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
842	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
843	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  illegal  start  of  type  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
844	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [CE]  illegal  start  of  type  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
845	[BUG]  [BUGGY]  Constructor  <  TypeAdapter>  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter>  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter>  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
846	[BUG]  [BUGGY]  Constructor  <  TypeAdapter>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
847	[BUG]  [BUGGY]  Constructor  <?  ==  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  >  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  ==  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  ==  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  >  expected	162	None	replace
848	[BUG]  [BUGGY]  Constructor  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	162	None	replace
849	[BUG]  [BUGGY]  if(type  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(type  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(type))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
850	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(type))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(type))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
851	[BUG]  [BUGGY]  if(type  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(type  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type  instanceof  Class  <?  >=  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(type))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
852	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(type)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(type)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(type)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(type))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
853	[BUG]  [BUGGY]  if(type  instanceof  Class  <?  >>  ||  value.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(type  instanceof  Class  <?  >>  ||  value.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type  instanceof  Class  <?  >>  ||  value.isAssignableFrom(type))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(type))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
854	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterClass))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	157	None	replace
855	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	157	None	replace
856	[BUG]  [BUGGY]  if(!TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	157	None	replace
857	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	157	None	replace
858	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(type)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(type)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(type)||  typeAdapterClass.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	157	None	replace
859	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType,  annotation);  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType,  annotation);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
860	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeClass)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
861	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType,  value);  [CE]  illegal  start  of  type  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType,  value);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType,  value);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
862	[BUG]  [BUGGY]  if(TypeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.isAssignableFrom(value))  {	  if(value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
863	[BUG]  [BUGGY]  if(type.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(type.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.isAssignableFrom(value))  {	  if(value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  type	60	None	replace
864	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterFactory))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterFactory))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterFactory))  {	  if(value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	60	None	replace
865	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(value.class))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(value.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(value.class))  {	  if(value.isAssignableFrom(typeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
866	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(value).class)  {  [CE]  <identifier>  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(value).class)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(value).class)  {	  if(value.isAssignableFrom(typeAdapter.class))    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
867	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	add
868	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	add
869	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	38	None	add
870	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  ConstructorConstructor  constructorConstructor  =(ConstructorConstructor)value.clone();  [CE]  reached  end  of  file  while  parsing  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  ConstructorConstructor  constructorConstructor  =(ConstructorConstructor)value.clone();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    ConstructorConstructor  constructorConstructor  =(ConstructorConstructor)value.clone();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	add
871	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  not  a  statement  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  not  a  statement	38	None	add
872	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	add
873	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  >  expected  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;	  	non-compiled	[CE]  >  expected	38	None	add
874	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
875	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  ||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
876	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterFactory.class))  {  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterFactory.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterFactory.class))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
877	[BUG]  [BUGGY]  if(value  instanceof  Class  <?!=  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  >  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?!=  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?!=  ||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  >  expected	5	None	replace
878	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  [Delete]  &&  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  >  expected  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  [Delete]  &&  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  [Delete]  &&  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  >  expected	5	None	replace
879	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
880	[BUG]  [BUGGY]  Constructor  <  TypeAdapter>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
881	[BUG]  [BUGGY]  Constructor  <  TypeAdapter>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
882	[BUG]  [BUGGY]  Constructor  <  TypeAdapter>  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter>  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter>  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
883	[BUG]  [BUGGY]  if(type.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(type.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.class.isAssignableFrom(value))  {	  if(value.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
884	[BUG]  [BUGGY]  if(typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
885	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&!TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	215	None	replace
886	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(fieldType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(fieldType))  {	  if(TypeAdapterFactory.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	48	None	replace
887	[BUG]  [BUGGY]  if(TypeAdapterFactory.Class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  Class  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.Class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.Class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  Class	48	None	replace
888	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType,  annotation);  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType,  annotation);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
889	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
890	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType,  value);  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType,  value);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType,  value);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
891	[BUG]  [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
892	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  value!=  null)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  value!=  null)  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass!=    null)    {    	compilable	  [FE]  NullPointerException  	269	2	replace
893	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  value!=  null)  {  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  value!=  null)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  value!=  null)  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass!=    null)    {    	compilable	  [FE]  NullPointerException  	269	2	replace
894	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterFactory!=  null)  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterFactory!=  null)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterFactory!=  null)  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	269	None	replace
895	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value)&&  value!=  null)  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value)&&  value!=  null)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value)&&  value!=  null)  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	269	None	replace
896	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass!=  null)  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass!=  null)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass!=  null)  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	269	None	replace
897	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  fieldType!=  null)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  fieldType!=  null)  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass!=    null)    {    	compilable	  [FE]  NullPointerException  	269	2	replace
898	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  fieldType!=  null)  {  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  fieldType!=  null)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  fieldType!=  null)  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass!=    null)    {    	compilable	  [FE]  NullPointerException  	269	2	replace
899	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  object!=  null)  {  [CE]  cannot  find  symbol  object  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  object!=  null)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  object!=  null)  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  object	269	None	replace
900	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	241	None	replace
901	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	241	2	replace
902	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	241	2	replace
903	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	add
904	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	64	None	add
905	[BUG]  [BUGGY]  TypeToken  gson  =  typeAdapter.getType();  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  typeAdapter.getType();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
906	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
907	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
908	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
909	[BUG]  [BUGGY]  gson  =  typeAdapter.getType();  [CE]  illegal  start  of  type  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  gson  =  typeAdapter.getType();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	gson  =  typeAdapter.getType();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
910	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
911	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
912	[BUG]  [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >=  )value;  [CE]  illegal  start  of  expression  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >=  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
913	[BUG]  [BUGGY]  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(type))    {    	non-compiled	[CE]  not  a  statement	248	None	replace
914	[BUG]  [BUGGY]  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(type))    {    	non-compiled	[CE]  illegal  start  of  expression	248	None	replace
915	[BUG]  [BUGGY]  Constructor.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(type))    {    	non-compiled	[CE]  not  a  statement	248	None	replace
916	[BUG]  [BUGGY]  if(type.isAssignableFrom(value)||  type.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(type.isAssignableFrom(value)||  type.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.isAssignableFrom(value)||  type.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(type))    {    	non-compiled	[CE]  not  a  statement	248	None	replace
917	[BUG]  [BUGGY]  if(type.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(type.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(type))    {    	non-compiled	[CE]  not  a  statement	248	None	replace
918	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  type	248	None	replace
919	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  value.isAssignableFrom(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  value.isAssignableFrom(typeAdapterClass))  {	  if(value    instanceof    Class    <?    >>    ||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
920	[BUG]  [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  ||  value.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  ||  value.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  instanceof  Class  <?  >>  ||  value.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
921	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapter.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
922	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.equals(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.equals(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  value.equals(typeAdapterClass))  {	  if(value    instanceof    Class    <?    >>    ||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
923	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)&&  typeAdapter.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	267	None	replace
924	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  value.isAssignableFrom(typeAdapter))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  value.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)&&  value.isAssignableFrom(typeAdapter))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	267	None	replace
925	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)&&  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)&&  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)&&  typeAdapter.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	267	None	replace
926	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	267	None	replace
927	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  value.isAssignableFrom(typeAdapter))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  value.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  value.isAssignableFrom(typeAdapter))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	267	None	replace
928	[BUG]  [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
929	[BUG]  [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	20	None	add
930	[BUG]  [BUGGY]  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
931	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
932	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
933	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
934	[BUG]  [BUGGY]  TypeToken  <?  >=  :  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >=  :  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >=  :  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	132	None	replace
935	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	65	2	replace
936	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	65	2	replace
937	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	65	None	replace
938	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  value.isAssignableFrom(TypeToken.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeToken.class)||  value.isAssignableFrom(TypeToken.class))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	65	2	replace
939	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  value.isAssignableFrom(TypeToken.class))  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  value.isAssignableFrom(TypeToken.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  value.isAssignableFrom(TypeToken.class))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	65	2	replace
940	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.equals(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	65	2	replace
941	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	65	2	replace
942	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterFactory))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterFactory))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterFactory))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	74	None	replace
943	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	74	None	replace
944	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	74	None	replace
945	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
946	[BUG]  [BUGGY]  TypeToken  <?  >>  :  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  :  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >>  :  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	85	None	replace
947	[BUG]  [BUGGY]  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).    	non-compiled	[CE]  not  a  statement	221	None	replace
948	[BUG]  [BUGGY]  TypeToken  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).    	non-compiled	[CE]  not  a  statement	221	None	replace
949	[BUG]  [BUGGY]  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
950	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	16	None	replace
951	[BUG]  [BUGGY]  if(value  ==  null  ||  typeToken.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeToken  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeToken.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeToken.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeToken	16	None	replace
952	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
953	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
954	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
955	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
956	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >=  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
957	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(typeType)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(typeType)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(typeType)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
958	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  value.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapter.class.isAssignableFrom(value)&&  value.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	77	2	replace
959	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  value.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  value.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  value.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	77	2	replace
960	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
961	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ')'  expected	231	None	replace
962	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	231	None	replace
963	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(typeAdapterClass))  {	  if(typeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	52	None	replace
964	[BUG]  [BUGGY]  if(typeAdapterFactory.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterFactory.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterFactory.class.isAssignableFrom(typeAdapterClass))  {	  if(typeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	52	None	replace
965	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
966	[BUG]  [BUGGY]  ||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  ||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
967	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
968	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	146	None	replace
969	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	146	None	replace
970	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
971	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	add
972	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  not  a  statement  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  not  a  statement	102	None	add
973	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	102	None	add
974	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  not  a  statement  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  not  a  statement	102	None	add
975	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	127	None	add
976	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	127	None	add
977	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	37	2	replace
978	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	37	2	replace
979	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
980	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	149	None	replace
981	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
982	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
983	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
984	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
985	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
986	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  TypeToken  gson  =  typeAdapter.getType();  }  [CE]  illegal  start  of  type  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  TypeToken  gson  =  typeAdapter.getType();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  TypeToken  gson  =  typeAdapter.getType();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
987	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  gson  =  typeAdapter.getType();  }  [CE]  illegal  start  of  type  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  gson  =  typeAdapter.getType();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  gson  =  typeAdapter.getType();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
988	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter),  fieldType).construct();  [CE]  illegal  start  of  type  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter),  fieldType).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter),  fieldType).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
989	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter,  fieldType)).construct();  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter,  fieldType)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter,  fieldType)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
990	[BUG]  [BUGGY]  final  Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  <identifier>  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  <identifier>  expected	271	None	replace
991	[BUG]  [BUGGY]  final  Class  <  TypeAdapter  <?  >=  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  >  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapter  <?  >=  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  Class  <  TypeAdapter  <?  >=  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  >  expected	271	None	replace
992	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(typeClass))  {  [CE]  cannot  find  symbol  typeClass  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(typeClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(typeClass))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeClass	97	None	replace
993	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(typeTypeAdapterClass))  {  [CE]  cannot  find  symbol  typeTypeAdapterClass  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(typeTypeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(typeTypeAdapterClass))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeTypeAdapterClass	97	None	replace
994	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(typeType))  {  [CE]  cannot  find  symbol  typeType  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(typeType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(typeType))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeType	97	None	replace
995	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(fieldType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(fieldType))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	97	None	replace
996	[BUG]  [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
997	[BUG]  [BUGGY]  final  TypeToken  gson  =  typeAdapter.getType();  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  TypeToken  gson  =  typeAdapter.getType();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
998	[BUG]  [BUGGY]  typeAdapter  =  typeAdapter.getType();  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  typeAdapter.getType();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  typeAdapter.getType();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
999	[BUG]  [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.class);  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  constructorConstructor.get(TypeToken.class);	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
1000	[BUG]  [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1001	[BUG]  [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1002	[BUG]  [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  illegal  start  of  expression  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1003	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  >  expected  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	194	None	replace
1004	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	273	None	add
1005	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	273	None	add
1006	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	273	None	add
1007	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	273	None	add
1008	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapterClass    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	254	None	replace
1009	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(typeAdapterClass    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	254	None	replace
1010	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapter.class  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapterClass    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	254	2	replace
1011	[BUG]  [BUGGY]  if(TypeAdapter.class  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapterClass    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	254	2	replace
1012	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	25	None	replace
1013	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	25	None	replace
1014	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  }  [CE]  >  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	25	None	replace
1015	[BUG]  [BUGGY]  TypeAdapter  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  not  a  statement	83	None	replace
1016	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeAdapter.class)&&  value.equals(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	111	2	replace
1017	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  value.equals(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)&&  value.equals(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	111	2	replace
1018	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	111	2	replace
1019	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [FE]  ClassCastException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	111	2	replace
1020	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	111	2	replace
1021	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	111	2	replace
1022	[BUG]  [BUGGY]  if(type.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [CE]  cannot  find  symbol  type  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(type.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  type	111	None	replace
1023	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeAdapter.equals(TypeAdapter.class))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeAdapter.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  typeAdapter.equals(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	111	None	replace
1024	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	add
1025	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  >  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  >  expected	15	None	add
1026	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	add
1027	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	add
1028	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
1029	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
1030	[BUG]  [BUGGY]  final  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
1031	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	add
1032	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	add
1033	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	add
1034	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  reached  end  of  file  while  parsing  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	add
1035	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  typeAdapter.getType();  [CE]  reached  end  of  file  while  parsing  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    TypeToken  gson  =  typeAdapter.getType();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	add
1036	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	add
1037	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	add
1038	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  getTypeToken();  [CE]  reached  end  of  file  while  parsing  [FE]                  ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  getTypeToken();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    TypeToken  gson  =  getTypeToken();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	add
1039	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    ||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
1040	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    ||  typeAdapterFactory.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
1041	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  ||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  ||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    ||  typeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
1042	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	46	None	add
1043	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  >  expected  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;	  	non-compiled	[CE]  >  expected	46	None	add
1044	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  ConstructorConstructor  constructorConstructor  =(ConstructorConstructor)value.clone();  [CE]  reached  end  of  file  while  parsing  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  ConstructorConstructor  constructorConstructor  =(ConstructorConstructor)value.clone();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    ConstructorConstructor  constructorConstructor  =(ConstructorConstructor)value.clone();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
1045	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
1046	[BUG]  [BUGGY]  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type));    	non-compiled	[CE]  not  a  statement	272	None	replace
1047	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type));    	non-compiled	[CE]  not  a  statement	272	None	replace
1048	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type));    	non-compiled	[CE]  not  a  statement	272	None	replace
1049	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type));    	non-compiled	[CE]  not  a  statement	272	None	replace
1050	[BUG]  [BUGGY]  if(type.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(type.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type));    	non-compiled	[CE]  not  a  statement	272	None	replace
1051	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  [CE]  not  a  statement  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type));    	non-compiled	[CE]  not  a  statement	272	None	replace
1052	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >=  type  =  constructorConstructor.get(TypeToken.get(type));  }  [CE]  not  a  statement  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >=  type  =  constructorConstructor.get(TypeToken.get(type));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >=  type  =  constructorConstructor.get(TypeToken.get(type));  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type));    	non-compiled	[CE]  not  a  statement	272	None	replace
1053	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	249	None	replace
1054	[BUG]  [BUGGY]  if(typeAdapter!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	249	None	replace
1055	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	249	None	replace
1056	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	249	None	replace
1057	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(type)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(type)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(type)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	249	None	replace
1058	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	249	None	replace
1059	[BUG]  [BUGGY]  if(!value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(typeAdapterClass))  {	  if(!value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	191	None	replace
1060	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||!value.isAssignableFrom(TypeAdapter.class))  {	  if(!value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	191	2	replace
1061	[BUG]  [BUGGY]  if(value!=  null  ||!value.isAssignableFrom(TypeAdapter.class))  {  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||!value.isAssignableFrom(TypeAdapter.class))  {	  if(!value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	191	2	replace
1062	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||!value.isAssignableFrom(TypeAdapter.class))  {	  if(!value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	191	2	replace
1063	[BUG]  [BUGGY]  if(value  ==  null  ||!value.isAssignableFrom(TypeAdapter.class))  {  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||!value.isAssignableFrom(TypeAdapter.class))  {	  if(!value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	191	2	replace
1064	[BUG]  [BUGGY]  if(!typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(!typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!typeAdapter.isAssignableFrom(TypeAdapter.class))  {	  if(!value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
1065	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(!value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(!value.equals(TypeAdapter.class))  {	  if(!value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	191	2	replace
1066	[BUG]  [BUGGY]  if(!value.equals(TypeAdapter.class))  {  [FE]  ClassCastException  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(!value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.equals(TypeAdapter.class))  {	  if(!value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	191	2	replace
1067	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class)||!typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class)||!typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class)||!typeAdapterClass.isAssignableFrom(value))  {	  if(!value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	191	None	replace
1068	[BUG]  [BUGGY]  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
1069	[BUG]  [BUGGY]  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
1070	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.isAssignableFrom(TypeAdapter.class))  {	  if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	187	None	replace
1071	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.getClass().isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  value.getClass().isAssignableFrom(TypeAdapter.class))  {	  if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	187	2	replace
1072	[BUG]  [BUGGY]  if(value  ==  null  ||  value.getClass().isAssignableFrom(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.getClass().isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.getClass().isAssignableFrom(TypeAdapter.class))  {	  if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	187	2	replace
1073	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	243	None	replace
1074	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterFactory.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapterFactory.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterFactory.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	243	None	replace
1075	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	243	None	replace
1076	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeToken.class)||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeToken.class)||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(TypeToken.class)||  typeAdapter.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	243	None	replace
1077	[BUG]  [BUGGY]  if(typeAdapterClass!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	243	None	replace
1078	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	243	2	replace
1079	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	243	2	replace
1080	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass,  typeAdapter))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass,  typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass,  typeAdapter))  {	  if(value.isAssignableFrom(typeAdapter))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	62	None	replace
1081	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass,  value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass,  value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass,  value))  {	  if(value.isAssignableFrom(typeAdapter))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	62	None	replace
1082	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass),  typeAdapter)  {  [CE]  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass),  typeAdapter)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass),  typeAdapter)  {	  if(value.isAssignableFrom(typeAdapter))    {    	non-compiled	[CE]  	62	None	replace
1083	[BUG]  [BUGGY]  if(TypeToken.isAssignableFrom(value))  {  [CE]  non-static  method  isAssignableFrom(Class<?>)  cannot  be  referenced  from  a  static  context  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.isAssignableFrom(value))  {	  if(value.isAssignableFrom(typeAdapter))    {    	non-compiled	[CE]  non-static  method  isAssignableFrom(Class<?>)  cannot  be  referenced  from  a  static  context	62	None	replace
1084	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	70	None	replace
1085	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	70	2	replace
1086	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	70	2	replace
1087	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	70	None	replace
1088	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  typeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  typeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
1089	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  not  a  statement	147	None	replace
1090	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  not  a  statement	147	None	replace
1091	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  not  a  statement	147	None	replace
1092	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  not  a  statement	147	None	replace
1093	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  not  a  statement	147	None	replace
1094	[BUG]  [BUGGY]  if(!TypeAdapterFactory.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapterFactory.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapterFactory.class.isAssignableFrom(type))  {	  if(!TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  type	45	None	replace
1095	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(key))  {  [CE]  cannot  find  symbol  key  [FE]                    ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(key))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(key))  {	  if(!TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  key	45	None	replace
1096	[BUG]  [BUGGY]  if(!TypeAdapterClass.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]                      ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapterClass.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapterClass.isAssignableFrom(type))  {	  if(!TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  type	45	None	replace
1097	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(TypeAdapter.class)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	128	2	replace
1098	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	128	2	replace
1099	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	128	None	replace
1100	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	128	2	replace
1101	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	128	2	replace
1102	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	166	None	replace
1103	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterFactory.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	166	None	replace
1104	[BUG]  [BUGGY]  if(typeAdapterClass!=  null  &&  value.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null  &&  value.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null  &&  value.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	166	None	replace
1105	[BUG]  [BUGGY]  if(value  ==  null  &&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  &&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  &&  typeAdapterClass.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	166	None	replace
1106	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(type)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(type)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(type)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1107	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
1108	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ')'  expected	257	None	replace
1109	[BUG]  [BUGGY]  if(value  ==  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
1110	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken  [CE]  ')'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ')'  expected	257	None	replace
1111	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  >  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  >  expected	257	None	replace
1112	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ')'  expected	257	None	replace
1113	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >=    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
1114	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >=    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
1115	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >=    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
1116	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >=    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
1117	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1118	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1119	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1120	[BUG]  [BUGGY]  if(value!=  null)  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1121	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1122	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	205	None	replace
1123	[BUG]  [BUGGY]  if(typeAdapter  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	44	None	replace
1124	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter)||  typeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	265	None	replace
1125	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)||  value.class.isAssignableFrom(typeAdapter))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)||  value.class.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapter)||  value.class.isAssignableFrom(typeAdapter))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	265	None	replace
1126	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  value.class.isAssignableFrom(typeAdapter))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  value.class.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter)||  value.class.isAssignableFrom(typeAdapter))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	265	None	replace
1127	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	265	None	replace
1128	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapter)||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
1129	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter)||  value.isAssignableFrom(typeAdapterClass))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	75	None	replace
1130	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct();  [CE]  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  	58	None	replace
1131	[BUG]  [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  illegal  start  of  type  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  Constructor    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
1132	[BUG]  [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct();  [CE]  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct();	  Constructor    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  	59	None	replace
1133	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	128	2	replace
1134	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	128	2	replace
1135	[BUG]  [BUGGY]  if(type.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  typeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(type.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  typeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  typeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(type))    {    	non-compiled	[CE]  not  a  statement	248	None	replace
1136	[BUG]  [BUGGY]  if(type.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.setAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(type.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.setAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.setAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(type))    {    	non-compiled	[CE]  not  a  statement	248	None	replace
1137	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >=    )value;    	non-compiled	[CE]  >  expected	95	None	replace
1138	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  }  [CE]  >  expected  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >=    )value;    	non-compiled	[CE]  >  expected	95	None	replace
1139	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	273	None	add
1140	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	273	None	add
1141	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	273	None	add
1142	[BUG]  [BUGGY]  if(value,  typeAdapter.class.isAssignableFrom(value))  {  [CE]  ')'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value,  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value,  typeAdapter.class.isAssignableFrom(value))  {	  if(value.class.isAssignableFrom(typeAdapter.class))    {    	non-compiled	[CE]  ')'  expected	113	None	replace
1143	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapterFactory.class))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(typeAdapterFactory.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapterFactory.class))  {	  if(value.class.isAssignableFrom(typeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
1144	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	246	None	replace
1145	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	19	2	replace
1146	[BUG]  [BUGGY]  if(value  ==  null  ||  value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	19	2	replace
1147	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1148	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1149	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	146	None	replace
1150	[BUG]  [BUGGY]  if(fieldType!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(fieldType!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).    	non-compiled	[CE]  ';'  expected	234	None	replace
1151	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(key)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  key  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(key)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(key)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(type)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  key	14	None	replace
1152	[BUG]  [BUGGY]  if(typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(type)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
1153	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	247	2	replace
1154	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	247	2	replace
1155	[BUG]  [BUGGY]  if(typeAdapter  ==  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
1156	[BUG]  [BUGGY]  if(value  ==  null  ||  value.class.isAssignableFrom(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.class.isAssignableFrom(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.class.isAssignableFrom(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
1157	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeToken.CLASS.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeToken.CLASS.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value)||  TypeToken.CLASS.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
1158	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
1159	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	add
1160	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	add
1161	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	add
1162	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	add
1163	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
1164	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
1165	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterFactory.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterFactory.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  typeAdapterFactory.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)&&    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
1166	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(typeAdapterFactory))  {  [CE]  illegal  start  of  expression  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(typeAdapterFactory))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)&&  typeAdapterFactory.isAssignableFrom(typeAdapterFactory))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)&&    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
1167	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapter)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapter)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapter)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	249	None	replace
1168	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  fieldType.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  fieldType.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	249	2	replace
1169	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  fieldType.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  fieldType.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  fieldType.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	249	2	replace
1170	[BUG]  [BUGGY]  if(value!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
1171	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	94	None	replace
1172	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  cannot  find  symbol  typeAdapterClass  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	84	None	replace
1173	[BUG]  [BUGGY]  TypeToken  t  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  t  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  t  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
1174	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
1175	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
1176	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  illegal  start  of  expression  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
1177	[BUG]  [BUGGY]  if(typeAdapter  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
1178	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
1179	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
1180	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(TypeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(TypeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(TypeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1181	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct().create(gson,  fieldType,  value);  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct().create(gson,  fieldType,  value);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct().create(gson,  fieldType,  value);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(type)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
1182	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
1183	[BUG]  [BUGGY]  Constructor  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
1184	[BUG]  [BUGGY]  Constructor  <  TypeAdapter  <?  >>  value  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  >  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter  <?  >>  value  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter  <?  >>  value  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  >  expected	164	None	replace
1185	[BUG]  [BUGGY]  TypeToken  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
1186	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  field  [CE]  ')'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  field  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  field	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ')'  expected	164	None	replace
1187	[BUG]  [BUGGY]  Constructor  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  not  a  statement	163	None	replace
1188	[BUG]  [BUGGY]  Constructor  <  TypeAdapter>  constructor  =  getTypeToken();  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter>  constructor  =  getTypeToken();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter>  constructor  =  getTypeToken();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
1189	[BUG]  [BUGGY]  Constructor  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  [CE]  not  a  statement  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  not  a  statement	163	None	replace
1190	[BUG]  [BUGGY]  Constructor  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  not  a  statement  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  not  a  statement	163	None	replace
1191	[BUG]  [BUGGY]  if(ValueToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(ValueToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(ValueToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
1192	[BUG]  [BUGGY]  if(TypeToken.isAssignableFrom(TypeAdapter.class))  {  [CE]  non-static  method  isAssignableFrom(Class<?>)  cannot  be  referenced  from  a  static  context  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.isAssignableFrom(TypeAdapter.class))  {	  if(typeAdapter.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  non-static  method  isAssignableFrom(Class<?>)  cannot  be  referenced  from  a  static  context	105	None	replace
1193	[BUG]  [BUGGY]  if(TypeToken.equals(value,  typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.equals(value,  typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.equals(value,  typeAdapter.class))  {	  if(value.equals(typeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	264	None	replace
1194	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeToken.class.equals(value))  {	  if(value.equals(typeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	264	2	replace
1195	[BUG]  [BUGGY]  if(TypeToken.class.equals(value))  {  [FE]  NullPointerException  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.equals(value))  {	  if(value.equals(typeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	264	2	replace
1196	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  fieldType.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  fieldType.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(fieldType)||  fieldType.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	192	None	replace
1197	[BUG]  [BUGGY]  if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1198	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	142	None	replace
1199	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	142	None	replace
1200	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	add
1201	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  >  expected	34	None	replace
1202	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
1203	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	add
1204	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  [CE]  not  a  statement  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  not  a  statement	50	None	add
1205	[BUG]  [BUGGY]  &&  constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  &&  constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&  constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  illegal  start  of  expression	217	None	replace
1206	[BUG]  [BUGGY]  &&  constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  &&  constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&  constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  illegal  start  of  expression	217	None	replace
1207	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
1208	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
1209	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
1210	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
1211	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(type)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(type)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(type)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
1212	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapterFactory.class.isAssignableFrom(value)&&  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	103	2	replace
1213	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)&&  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	103	2	replace
1214	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	103	2	replace
1215	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	103	2	replace
1216	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
1217	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
1218	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	46	None	add
1219	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	46	None	add
1220	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeAdapterFactory.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	46	None	add
1221	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory.class.isAssignableFrom(value)||TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory.class.isAssignableFrom(value)||TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeAdapterFactory.class.isAssignableFrom(value)||TypeAdapterFactory.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	46	None	add
1222	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(type))  {  [CE]  not  a  statement  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(type))  {	  	non-compiled	[CE]  not  a  statement	46	None	add
1223	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
1224	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(fieldType))  {  [CE]  not  a  statement  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(fieldType))  {	  	non-compiled	[CE]  not  a  statement	46	None	add
1225	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value));  [CE]  not  a  statement  [FE]                  ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value));	  	non-compiled	[CE]  not  a  statement	46	None	add
1226	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
1227	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
1228	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	195	None	replace
1229	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get  [CE]  ';'  expected  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ';'  expected	195	None	replace
1230	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(typeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(typeAdapter.class))  {	  if(type.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
1231	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  ';'  expected	235	None	replace
1232	[BUG]  [BUGGY]  if(typeAdapter  ==  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  ';'  expected	235	None	replace
1233	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  ';'  expected	235	None	replace
1234	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(type))    {    	compilable	  [FE]  ClassCastException  	250	2	replace
1235	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(type))    {    	compilable	  [FE]  ClassCastException  	250	2	replace
1236	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(baseType))  {  [CE]  cannot  find  symbol  baseType  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(baseType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(baseType))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  baseType	250	None	replace
1237	[BUG]  [BUGGY]  if(typeAdapter!=  null  &&  value.isAssignableFrom(typeAdapter))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null  &&  value.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null  &&  value.isAssignableFrom(typeAdapter))  {	  if(value!=    null    &&    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	10	None	replace
1238	[BUG]  [BUGGY]  if(typeAdapter  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(typeAdapter    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	156	None	replace
1239	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(type))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  type	144	None	replace
1240	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(type))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  type	144	None	replace
1241	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
1242	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
1243	[BUG]  [BUGGY]  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
1244	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	42	2	replace
1245	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	42	2	replace
1246	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
1247	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
1248	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
1249	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.START_OBJECT);  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.START_OBJECT);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.START_OBJECT);	  Constructor    <?>    annotation    =    constructorConstructor.getAnnotation(JsonToken.class);    	non-compiled	[CE]  illegal  start  of  type	225	None	replace
1250	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterFactory.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterFactory.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  typeAdapterFactory.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1251	[BUG]  [BUGGY]  Annotation  <?  >>  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Annotation  <?  >>  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Annotation  <?  >>  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  not  a  statement	136	None	replace
1252	[BUG]  [BUGGY]  Constructor  <?  >>  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  [CE]  not  a  statement  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  getTypeToken();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  not  a  statement	136	None	replace
1253	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterFactory))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterFactory))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterFactory))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	11	None	replace
1254	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(typeAdapterClass))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	11	None	replace
1255	[BUG]  [BUGGY]  final  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
1256	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
1257	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ')'  expected	256	None	replace
1258	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ')'  expected	256	None	replace
1259	[BUG]  [BUGGY]  if(value  ==  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
1260	[BUG]  [BUGGY]  if(value  ==  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ')'  expected	256	None	replace
1261	[BUG]  [BUGGY]  if(value  ==  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ')'  expected	256	None	replace
1262	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  >  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  >  expected	256	None	replace
1263	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
1264	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
1265	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	135	None	replace
1266	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	add
1267	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	add
1268	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  ClassCastException.class.isAssignableFrom(value))  {  [CE]  ';'  expected  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  ClassCastException.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    ClassCastException.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  ';'  expected	36	None	add
1269	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	add
1270	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	36	None	add
1271	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.class);  [CE]  reached  end  of  file  while  parsing  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.class);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	add
1272	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
1273	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
1274	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
1275	[BUG]  [BUGGY]  if(value!=  null)  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
1276	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
1277	[BUG]  [BUGGY]  if(value  ==  null)  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
1278	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >=    )    value;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
1279	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  }  [CE]  >  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >=    )    value;    	non-compiled	[CE]  >  expected	92	None	replace
1280	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	129	2	replace
1281	[BUG]  [BUGGY]  if(value.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	129	2	replace
1282	[BUG]  [BUGGY]  if(typeAdapterFactory.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterFactory.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterFactory.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	129	None	replace
1283	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    t    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
1284	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  t  =  getTypeToken();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  t  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  t  =  getTypeToken();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    t    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
1285	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  TypeToken  t  =  getTypeToken();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  TypeToken  t  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  TypeToken  t  =  getTypeToken();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    t    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
1286	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >=    )    value;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
1287	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >=    )    value;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
1288	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )value;  }  [CE]  >  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >=    )    value;    	non-compiled	[CE]  >  expected	122	None	replace
1289	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
1290	[BUG]  [BUGGY]  if(value  ==  null)  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
1291	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	181	None	replace
1292	[BUG]  [BUGGY]  if(typeAdapterFactory  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterFactory  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterFactory  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapterClass    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	255	None	replace
1293	[BUG]  [BUGGY]  if(typeAdapterType  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterType  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterType  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterType  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapterClass    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterType	255	None	replace
1294	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
1295	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(typeType)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(typeType)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(typeType)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
1296	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(type)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(type)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(type)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
1297	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get  >>  ')';  [CE]  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get  >>  ')';  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get  >>  ')';	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  	218	None	replace
1298	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get  >>  ')';  [CE]  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get  >>  ')';  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get  >>  ')';	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  	218	None	replace
1299	[BUG]  [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
1300	[BUG]  [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
1301	[BUG]  [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
1302	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	add
1303	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	add
1304	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	add
1305	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  not  a  statement	240	None	add
1306	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	add
1307	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
1308	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)	83	None	replace
1309	[BUG]  [BUGGY]  TypeToken  t  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  t  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  t  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
1310	[BUG]  [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
1311	[BUG]  [BUGGY]  if(value!=  null  &&  value.class.isAssignableFrom(typeAdapter))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.class.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.class.isAssignableFrom(typeAdapter))  {	  if(value!=    null    &&    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
1312	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
1313	[BUG]  [BUGGY]  Constructor  <  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	158	None	replace
1314	[BUG]  [BUGGY]  Preconditions.checkState(value.isAssignableFrom(TypeAdapter.class));  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkState(value.isAssignableFrom(TypeAdapter.class));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Preconditions.checkState(value.isAssignableFrom(TypeAdapter.class));	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
1315	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	add
1316	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	add
1317	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	add
1318	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	add
1319	[BUG]  [BUGGY]  if(constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1320	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1321	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
1322	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	208	None	add
1323	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	208	None	add
1324	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  TypeToken  gson  =  getTypeToken();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  TypeToken  gson  =  getTypeToken();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    TypeToken  gson  =  getTypeToken();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	208	None	add
1325	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	208	None	add
1326	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	208	None	add
1327	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	208	None	add
1328	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	208	None	add
1329	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	add
1330	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	add
1331	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	add
1332	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  >  expected  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  >  expected	190	None	add
1333	[BUG]  [BUGGY]  if(typeAdapter  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	82	None	replace
1334	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterType.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterType  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterType.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterType.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterType	82	None	replace
1335	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
1336	[BUG]  [BUGGY]  final  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  final  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
1337	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct();  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct();	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
1338	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
1339	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	182	None	replace
1340	[BUG]  [BUGGY]  if(typeAdapter  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
1341	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(type))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
1342	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	165	None	replace
1343	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  return  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  return  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  return  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	165	None	replace
1344	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	165	None	replace
1345	[BUG]  [BUGGY]  Constructor  <?  ==  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  >  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  ==  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  ==  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  >  expected	87	None	replace
1346	[BUG]  [BUGGY]  Constructor  <  TypeAdapter>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
1347	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
1348	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
1349	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	88	None	replace
1350	[BUG]  [BUGGY]  if(value!=  null  &&  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	274	None	replace
1351	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeName));  [CE]  illegal  start  of  type  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeName));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeName));	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
1352	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
1353	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
1354	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
1355	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
1356	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	266	None	replace
1357	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(TypeAdapter.class)||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(TypeAdapter.class)||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(TypeAdapter.class)||  typeAdapter.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	266	None	replace
1358	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
1359	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
1360	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  illegal  start  of  expression  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >=  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
1361	[BUG]  [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  field  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  field  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  field	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	223	None	replace
1362	[BUG]  [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	223	None	replace
1363	[BUG]  [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	223	None	replace
1364	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapterFactory))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(typeAdapterFactory))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapterFactory))  {	  if(value.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	115	None	replace
1365	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeFactory))  {  [CE]  cannot  find  symbol  typeFactory  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeFactory))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeFactory))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeFactory	172	None	replace
1366	[BUG]  [BUGGY]  if(TypeToken.CLASS.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  CLASS  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.CLASS.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.CLASS.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  CLASS	172	None	replace
1367	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	add
1368	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  type  =  constructorConstructor.get(TypeToken.get(type)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	add
1369	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  &&  value.equals(TypeAdapter.class))  {	  if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	189	2	replace
1370	[BUG]  [BUGGY]  if(value  ==  null  &&  value.equals(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  &&  value.equals(TypeAdapter.class))  {	  if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	189	2	replace
1371	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  fieldType.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapter.class.isAssignableFrom(value)&&  fieldType.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	77	2	replace
1372	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  fieldType.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  fieldType.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  fieldType.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	77	2	replace
1373	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(value)&&  constructorConstructor.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(value)&&  constructorConstructor.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(value)&&  constructorConstructor.isAssignableFrom(value))  {	  if(typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
1374	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeObjectFactory)).construct();  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeObjectFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeObjectFactory)).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
1375	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapterFactory))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapterFactory))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapterFactory))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	106	None	replace
1376	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeClass))  {  [CE]  cannot  find  symbol  typeClass  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeClass))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeClass	106	None	replace
1377	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  >  expected	121	None	replace
1378	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  >  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  >  expected	121	None	replace
1379	[BUG]  [BUGGY]  TypeToken  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).    	non-compiled	[CE]  not  a  statement	221	None	replace
1380	[BUG]  [BUGGY]  if(fieldType!=  null)  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(fieldType!=  null)  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).    	non-compiled	[CE]  ';'  expected	221	None	replace
1381	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null)  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).    	non-compiled	[CE]  ';'  expected	221	None	replace
1382	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null)  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).    	non-compiled	[CE]  ';'  expected	221	None	replace
1383	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
1384	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
1385	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeName)&&  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeName  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(typeName)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(typeName)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeName)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeName	236	None	replace
1386	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(name)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  name  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(name)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(name)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeName)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  name	236	None	replace
1387	[BUG]  [BUGGY]  if(value!=  null)  {  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ')'  expected	222	None	replace
1388	[BUG]  [BUGGY]  if(value!=  null)  {  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [CE]  ')'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ')'  expected	222	None	replace
1389	[BUG]  [BUGGY]  if(value!=  null)  {  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ';'  expected	222	None	replace
1390	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	238	None	replace
1391	[BUG]  [BUGGY]  if(type!=  null)  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(type!=  null)  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type!=  null)  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	238	None	replace
1392	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  type  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  type  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  type  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	238	None	replace
1393	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	238	None	replace
1394	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  illegal  start  of  expression  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >=  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	238	None	replace
1395	[BUG]  [BUGGY]  if(value!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
1396	[BUG]  [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	natureAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
1397	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapter))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapter))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(typeAdapter))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
1398	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeName)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeName)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeName)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
1399	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  fieldType.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapterFactory.class.isAssignableFrom(value)||  fieldType.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	76	2	replace
1400	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  fieldType.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  fieldType.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||  fieldType.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	76	2	replace
1401	[BUG]  [BUGGY]  if(typeAdapterClass!=  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapterClass    instanceof    Class    <?    >>    ||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	174	None	replace
1402	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||  value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	13	2	replace
1403	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	13	2	replace
1404	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	13	2	replace
1405	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	13	2	replace
1406	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)&&  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)&&  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapter)&&  TypeToken.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
1407	[BUG]  [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)||  typeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value.class.isAssignableFrom(typeAdapter)||  typeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.class.isAssignableFrom(typeAdapter)||  typeToken.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
1408	[BUG]  [BUGGY]  if(typeObjectClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeObjectClass  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(typeObjectClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeObjectClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeObjectClass)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeObjectClass	237	None	replace
1409	[BUG]  [BUGGY]  if(typeToken  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeToken  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(typeToken  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeToken  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeToken	143	None	replace
1410	[BUG]  [BUGGY]  if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
1411	[BUG]  [BUGGY]  if(typeAdapter  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(typeAdapter    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	185	None	replace
1412	[BUG]  [BUGGY]  if(value!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
1413	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
1414	[BUG]  [BUGGY]  if(value  ==  null)  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
1415	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
1416	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterFactory.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
1417	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
1418	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapterFactory.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(!TypeAdapterFactory.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	47	2	replace
1419	[BUG]  [BUGGY]  if(!TypeAdapterFactory.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapterFactory.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapterFactory.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	47	2	replace
1420	[BUG]  [BUGGY]  if(!TypeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  TypeAdapterClass  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapterClass.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  TypeAdapterClass	45	None	replace
1421	[BUG]  [BUGGY]  if(type.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(type.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  type	31	None	replace
1422	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(fieldType))  {  [CE]  illegal  start  of  expression  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(fieldType))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(type))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
1423	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
1424	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeName)).construct();  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeName)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeName)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
1425	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType)).construct();  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
1426	[BUG]  [BUGGY]  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  not  a  statement	89	None	replace
1427	[BUG]  [BUGGY]  Constructor  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  not  a  statement  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  not  a  statement	89	None	replace
1428	[BUG]  [BUGGY]  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
1429	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	179	None	replace
1430	[BUG]  [BUGGY]  if(value!=  null)  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
1431	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
1432	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	243	None	replace
1433	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.CLASS.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  CLASS  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.CLASS.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeToken.CLASS.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  CLASS	168	None	replace
1434	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	168	2	replace
1435	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	168	2	replace
1436	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  value.isAssignableFrom(TypeAdapter.class))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter)||  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(typeAdapterClass)||    value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	207	None	replace
1437	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterFactory)||  value.isAssignableFrom(TypeAdapter.class))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterFactory)||  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterFactory)||  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(typeAdapterClass)||    value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	207	None	replace
1438	[BUG]  [BUGGY]  if(typeAdapterFactory  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterFactory  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterFactory  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
1439	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  &&  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >=  &&  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  &&  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
1440	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(type))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
1441	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value)||  value  instanceof  Class  <  TypeAdapter  <?  >>  )  {  [CE]  illegal  start  of  expression  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value)||  value  instanceof  Class  <  TypeAdapter  <?  >>  )  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value)||  value  instanceof  Class  <  TypeAdapter  <?  >>  )  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
1442	[BUG]  [BUGGY]  if(typeAdapter  ==  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	193	None	replace
1443	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	193	None	replace
1444	[BUG]  [BUGGY]  if(typeAdapter  ==  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  illegal  start  of  expression  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
1445	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  illegal  start  of  expression  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null)  {  if(!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
1446	[BUG]  [BUGGY]  if(value!=  null)  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	231	None	replace
1447	[BUG]  [BUGGY]  if(value  ==  null)  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	231	None	replace
1448	[BUG]  [BUGGY]  if(value!=  null)  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	231	None	replace
1449	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	215	None	replace
1450	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	add
1451	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken  type  =  constructorConstructor.get(TypeToken.get(type)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	add
1452	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.class);  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken  typeToken  =  constructorConstructor.get(TypeToken.class);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	add
1453	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	176	None	add
1454	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  [CE]  not  a  statement  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  not  a  statement	176	None	add
1455	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(baseType))  {  [CE]  cannot  find  symbol  baseType  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(baseType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(baseType))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  baseType	268	None	replace
1456	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeType))  {  [CE]  cannot  find  symbol  typeType  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeType))  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  typeType	268	None	replace
1457	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
1458	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
1459	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
1460	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  constructorConstructor!=  null)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  constructorConstructor!=  null)  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass!=    null)    {    	compilable	  [FE]  NullPointerException  	269	2	replace
1461	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  constructorConstructor!=  null)  {  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  constructorConstructor!=  null)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  constructorConstructor!=  null)  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass!=    null)    {    	compilable	  [FE]  NullPointerException  	269	2	replace
1462	[BUG]  [BUGGY]  if(value!=  null  ||  typeAdapterType.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterType  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  typeAdapterType.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  typeAdapterType.isAssignableFrom(value))  {	  if(value!=    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterType	96	None	replace
1463	[BUG]  [BUGGY]  if(typeAdapter  ==  null  ||  value.isAssignableFrom(typeAdapter))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null  ||  value.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null  ||  value.isAssignableFrom(typeAdapter))  {	  if(value    ==    null    ||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	81	None	replace
1464	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.getType().isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.getType().isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.getType().isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1465	[BUG]  [BUGGY]  if(typeAdapter!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(typeAdapter!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	214	None	replace
1466	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	add
1467	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	add
1468	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	add
1469	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	add
1470	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).    	non-compiled	[CE]  ')'  expected	258	None	replace
1471	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  typeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  typeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  typeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	241	None	replace
1472	[BUG]  [BUGGY]  if(TypeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  TypeAdapterClass  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeClass)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  TypeAdapterClass	104	None	replace
1473	[BUG]  [BUGGY]  if(value  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
1474	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)	85	None	replace
1475	[BUG]  [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
1476	[BUG]  [BUGGY]  nature  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nature  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	nature  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
1477	[BUG]  [BUGGY]  AnnotationTypeAdapter  reference  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  reference  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapter  reference  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
1478	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  &&  value.isAssignableFrom(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >=  &&  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  &&  value.isAssignableFrom(typeAdapterClass))  {	  if(value    instanceof    Class    <?    >>    ||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1479	[BUG]  [BUGGY]  if(typeAdapter  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  instanceof  Class  <?  >>  ||  value.isAssignableFrom(typeAdapterClass))  {	  if(value    instanceof    Class    <?    >>    ||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1480	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
1481	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
1482	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(typeToken))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(typeToken))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(typeToken))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
1483	[BUG]  [BUGGY]  if(value!=  null)  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
1484	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(fieldType))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
1485	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(typeToken))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct()  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(typeToken))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct()  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(typeToken))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct()	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  ';'  expected	183	None	replace
1486	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	127	None	add
1487	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	127	None	add
1488	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	127	None	add
1489	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	add
1490	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  not  a  statement	102	None	add
1491	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  fieldType.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  fieldType.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	242	2	replace
1492	[BUG]  [BUGGY]  if(value  ==  null  ||  fieldType.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  fieldType.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  fieldType.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	242	2	replace
1493	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterType.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterType  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterType.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterType.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterType	242	None	replace
1494	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	242	None	replace
1495	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ';'  expected	233	None	replace
1496	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.CLASS.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  CLASS  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.CLASS.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeToken.CLASS.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  CLASS	16	None	replace
1497	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	add
1498	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	add
1499	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  ClassCastException.class.isAssignableFrom(value))  {  [CE]  ';'  expected  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  ClassCastException.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    ClassCastException.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  ';'  expected	38	None	add
1500	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	add
1501	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	38	None	add
1502	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.class);  [CE]  reached  end  of  file  while  parsing  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.class);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	add
1503	[BUG]  [BUGGY]  Constructor  <  Object>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  Object>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  Object>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
1504	[BUG]  [BUGGY]  Constructor  <  Object>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  Object>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  Object>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
1505	[BUG]  [BUGGY]  if(value!=  null  &&  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapterClass!=    null    ||    value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1506	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type));    	non-compiled	[CE]  not  a  statement	272	None	replace
1507	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type));    	non-compiled	[CE]  not  a  statement	272	None	replace
1508	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
1509	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
1510	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
1511	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
1512	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
1513	[BUG]  [BUGGY]  if(typeAdapter  ==  null  ||  value.class.isAssignableFrom(typeAdapter))  {  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null  ||  value.class.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null  ||  value.class.isAssignableFrom(typeAdapter))  {	  if(value    ==    null    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1514	[BUG]  [BUGGY]  if(value  ==  null  ||  value.class.isAssignableFrom(typeAdapter))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.class.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.class.isAssignableFrom(typeAdapter))  {	  if(value    ==    null    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1515	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
1516	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  >  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  >  expected	161	None	replace
1517	[BUG]  [BUGGY]  if(typeAdapter.class.equals(value))  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.equals(value))  {	  if(value.class.isAssignableFrom(typeAdapter))    {    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1518	[BUG]  [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterFactory))  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterFactory))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterFactory))  {	  if(TypeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
1519	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
1520	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
1521	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
1522	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  getTypeToken();  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  getTypeToken();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    TypeToken  gson  =  getTypeToken();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
1523	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
1524	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
1525	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
1526	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
1527	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
1528	[BUG]  [BUGGY]  if(typeAdapter  ==  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
1529	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct();  [CE]  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct();	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  	224	None	replace
1530	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeId)).construct();  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeId)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeId)).construct();	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
1531	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	239	None	replace
1532	[BUG]  [BUGGY]  if(typeClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(typeClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	239	None	replace
1533	[BUG]  [BUGGY]  if(typeClass  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(typeClass  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeClass  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	239	None	replace
1534	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	239	None	replace
1535	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&!value.isAssignableFrom(TypeAdapter.class))  {	  if(!value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	191	2	replace
1536	[BUG]  [BUGGY]  if(value!=  null  &&!value.isAssignableFrom(TypeAdapter.class))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&!value.isAssignableFrom(TypeAdapter.class))  {	  if(!value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  ClassCastException  	191	2	replace
1537	[BUG]  [BUGGY]  if(!typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(!typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!typeAdapter.isAssignableFrom(value))  {	  if(!value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
1538	[BUG]  [BUGGY]  if(!value.equals(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(!value.equals(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.equals(typeAdapterClass))  {	  if(!value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	191	None	replace
1539	[BUG]  [BUGGY]  if(typeAdapterType  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterType  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterType  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterType  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapterClass    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterType	254	None	replace
1540	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(type))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(type))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(type))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1541	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >=  )value;  [CE]  illegal  start  of  expression  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >=  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1542	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null)  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.    	non-compiled	[CE]  illegal  start  of  expression	219	None	replace
1543	[BUG]  [BUGGY]  if(value  >=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  >=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  >=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	39	None	replace
1544	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  typeAdapter.getType();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
1545	[BUG]  [BUGGY]  if(value  ==  null)  {  TypeToken  gson  =  typeAdapter.getType();  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  TypeToken  gson  =  typeAdapter.getType();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  TypeToken  gson  =  typeAdapter.getType();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
1546	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	43	None	add
1547	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  &&!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  &&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    &&!TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
1548	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	43	None	add
1549	[BUG]  [BUGGY]  if(typeAdapter  ==  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  ';'  expected	232	None	replace
1550	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapter))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapter))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(typeAdapter))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapter))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  illegal  start  of  expression	263	None	replace
1551	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapter))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [CE]  ')'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapter))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(typeAdapter))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapter))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ')'  expected	263	None	replace
1552	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapter))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  >  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(typeAdapter))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(typeAdapter))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapter))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  >  expected	263	None	replace
1553	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  value.isAssignableFrom(TypeAdapterFactory.class))  {	  if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	187	2	replace
1554	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapterFactory.class))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(TypeAdapterFactory.class))  {	  if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	187	2	replace
1555	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	270	None	replace
1556	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	270	None	replace
1557	[BUG]  [BUGGY]  if(type.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(type.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	270	None	replace
1558	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	270	None	replace
1559	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	270	None	replace
1560	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
1561	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
1562	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
1563	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
1564	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
1565	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
1566	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
1567	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )value;  }  [CE]  >  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >=    )    value;    	non-compiled	[CE]  >  expected	35	None	replace
1568	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	add
1569	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken  type  =  constructorConstructor.get(TypeToken.get(type)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	add
1570	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	add
1571	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null)  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    }    	compilable	  [FE]  ClassCastException  	230	2	replace
1572	[BUG]  [BUGGY]  if(value!=  null)  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [FE]  ClassCastException  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    }    	compilable	  [FE]  ClassCastException  	230	2	replace
1573	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(ValueToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(ValueToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(ValueToken.class)||  typeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeToken.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
1574	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeToken.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
1575	[BUG]  [BUGGY]  Constructor  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	155	None	replace
1576	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
1577	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
1578	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  not  a  statement	41	None	add
1579	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
1580	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(type))  {  [CE]  not  a  statement  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(type))  {	  	non-compiled	[CE]  not  a  statement	41	None	add
1581	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  >  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  >  expected	91	None	replace
1582	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  >  expected	91	None	replace
1583	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value)||  value  instanceof  Class  <  TypeAdapter  <?  >>  )  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value)||  value  instanceof  Class  <  TypeAdapter  <?  >>  )  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(value)||  value  instanceof  Class  <  TypeAdapter  <?  >>  )  {	  if(value    instanceof    Class    <?    >>    &&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
1584	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	25	None	replace
1585	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdaptement  ')');  [CE]  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdaptement  ')');  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdaptement  ')');	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  	220	None	replace
1586	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  	220	None	replace
1587	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdaptement  ')');  [CE]  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdaptement  ')');  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdaptement  ')');	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  	220	None	replace
1588	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdaptement  ')';  [CE]  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdaptement  ')';  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdaptement  ')';	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  	220	None	replace
1589	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  	220	None	replace
1590	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeProperty)).construct();  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeProperty)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeProperty)).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
1591	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeReference)).construct();  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeReference)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeReference)).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
1592	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeElement)).construct();  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeElement)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeElement)).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
1593	[BUG]  [BUGGY]  if(value!=  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value!=    null    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
1594	[BUG]  [BUGGY]  if(typeAdapter!=  null  ||  value.class.isAssignableFrom(typeAdapter))  {  [CE]  cannot  find  symbol  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null  ||  value.class.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null  ||  value.class.isAssignableFrom(typeAdapter))  {	  if(value!=    null    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
1595	[BUG]  [BUGGY]  if(value!=  null  ||  value.class.isAssignableFrom(typeAdapter))  {  [CE]  cannot  find  symbol  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.class.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  value.class.isAssignableFrom(typeAdapter))  {	  if(value!=    null    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
1596	[BUG]  [BUGGY]  if(typeAdapter!=  null  ||  value.isAssignableFrom(typeAdapter))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null  ||  value.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null  ||  value.isAssignableFrom(typeAdapter))  {	  if(value!=    null    ||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	98	None	replace
1597	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	111	2	replace
1598	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	111	2	replace
1599	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.equals(TypeAdapter.class)||  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	111	2	replace
1600	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)||  value.isAssignableFrom(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)||  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	111	2	replace
1601	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
1602	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
1603	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(typeName)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(typeName)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(typeName)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
1604	[BUG]  [BUGGY]  if(typeAdapter  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	251	None	replace
1605	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  fieldType.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  fieldType.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	251	2	replace
1606	[BUG]  [BUGGY]  if(value  ==  null  ||  fieldType.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  fieldType.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  fieldType.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	251	2	replace
1607	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	251	None	replace
1608	[BUG]  [BUGGY]  if(TypeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  TypeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  TypeAdapterClass	70	None	replace
1609	[BUG]  [BUGGY]  if(!TypeAdapterInstance.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapterInstance.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapterInstance.class.isAssignableFrom(typeAdapterClass))  {	  if(!TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	40	None	replace
1610	[BUG]  [BUGGY]  if(value.equals(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	100	None	replace
1611	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1612	[BUG]  [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  expression  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1613	[BUG]  [BUGGY]  Constructor  <?  >>  type  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  type  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  type  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  not  a  statement	160	None	replace
1614	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	99	2	replace
1615	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	99	2	replace
1616	[BUG]  [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	86	None	replace
1617	[BUG]  [BUGGY]  nature  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nature  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	nature  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
1618	[BUG]  [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
1619	[BUG]  [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	natureAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
1620	[BUG]  [BUGGY]  AnnotationTypeAdapter  reference  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  reference  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapter  reference  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
1621	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	253	None	replace
1622	[BUG]  [BUGGY]  if(typeAdapter!=  null  &&  value.isAssignableFrom(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null  &&  value.isAssignableFrom(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null  &&  value.isAssignableFrom(typeAdapter)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	253	None	replace
1623	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(typeToken.class);  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(typeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(typeToken.class);	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
1624	[BUG]  [BUGGY]  if(value!=  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	271	None	replace
1625	[BUG]  [BUGGY]  if(value  ==  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	271	None	replace
1626	[BUG]  [BUGGY]  if(value!=  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  reached  end  of  file  while  parsing	271	None	replace
1627	[BUG]  [BUGGY]  if(value!=  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	271	None	replace
1628	[BUG]  [BUGGY]  if(value  ==  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  reached  end  of  file  while  parsing	271	None	replace
1629	[BUG]  [BUGGY]  if(value  ==  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  if(TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	271	None	replace
1630	[BUG]  [BUGGY]  if(value  ==  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).    	non-compiled	[CE]  ')'  expected	260	None	replace
1631	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(fieldType))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(fieldType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapter.class.isAssignableFrom(fieldType))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
1632	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	69	2	replace
1633	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	69	2	replace
1634	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	69	2	replace
1635	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	69	2	replace
1636	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
1637	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)&&  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	177	None	replace
1638	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  typeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
1639	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	add
1640	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	add
1641	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	add
1642	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	add
1643	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  getTypeToken();  [CE]  reached  end  of  file  while  parsing  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  TypeToken  gson  =  getTypeToken();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    TypeToken  gson  =  getTypeToken();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	add
1644	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapter))  {  TypeToken  gson  =  typeAdapter.getType();  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapter))  {  TypeToken  gson  =  typeAdapter.getType();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(typeAdapter))  {  TypeToken  gson  =  typeAdapter.getType();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
1645	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)&&  typeAdapter.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	267	None	replace
1646	[BUG]  [BUGGY]  type  =  constructorConstructor.get(TypeToken.get(type)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  type  =  constructorConstructor.get(TypeToken.get(type)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	type  =  constructorConstructor.get(TypeToken.get(type)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(type))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  illegal  start  of  type	262	None	replace
1647	[BUG]  [BUGGY]  type  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  type  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	type  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(type))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  illegal  start  of  type	262	None	replace
1648	[BUG]  [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(type))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  illegal  start  of  type	262	None	replace
1649	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  not  a  statement	147	None	replace
1650	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeAdapterClass))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  not  a  statement	147	None	replace
1651	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  not  a  statement	147	None	replace
1652	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
1653	[BUG]  [BUGGY]  if(value  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
1654	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	add
1655	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	add
1656	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  ClassCastException.class.isAssignableFrom(value))  {  [CE]  ';'  expected  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  ClassCastException.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    ClassCastException.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  ';'  expected	213	None	add
1657	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	add
1658	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  >  expected  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  >  expected	213	None	add
1659	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  [CE]  >  expected  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >=  )value;	  	non-compiled	[CE]  >  expected	213	None	add
1660	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
1661	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
1662	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
1663	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
1664	[BUG]  [BUGGY]  if(typeAdapter  ==  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
1665	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1666	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [CE]  >  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  >  expected	150	None	replace
1667	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  not  a  statement	145	None	replace
1668	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	145	2	replace
1669	[BUG]  [BUGGY]  if(value.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	145	2	replace
1670	[BUG]  [BUGGY]  if(typeAdapterFactory.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterFactory.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterFactory.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	140	None	replace
1671	[BUG]  [BUGGY]  if(typeAdapterFactory.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterFactory.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterFactory.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	140	None	replace
1672	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
1673	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	148	None	replace
1674	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	148	None	replace
1675	[BUG]  [BUGGY]  AnnotationTypeAdapterFactory.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapterFactory.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapterFactory.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	210	None	replace
1676	[BUG]  [BUGGY]  if(value!=  null)  {  if(value!=  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  Class<CAP#1>  and  boolean  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value!=  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value!=  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  boolean	210	None	replace
1677	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null)  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	210	2	replace
1678	[BUG]  [BUGGY]  if(value!=  null)  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	210	2	replace
1679	[BUG]  [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( ". ");  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	210	None	replace
1680	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
1681	[BUG]  [BUGGY]  if(value!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
1682	[BUG]  [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	133	None	replace
1683	[BUG]  [BUGGY]  final  Class  <  TypeAdapter  <?  >>  )value  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  <identifier>  expected  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapter  <?  >>  )value  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  Class  <  TypeAdapter  <?  >>  )value  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  <identifier>  expected	211	None	replace
1684	[BUG]  [BUGGY]  Constructor  <  Object>  constructor  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  Constructor  <  Object>  constructor  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  Object>  constructor  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
1685	[BUG]  [BUGGY]  TypeToken  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  TypeToken  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  type  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
1686	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  gson  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  illegal  start  of  type  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  gson  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  gson  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	211	None	replace
1687	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	107	None	add
1688	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	107	None	add
1689	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
1690	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  	non-compiled	[CE]  ')'  expected	107	None	add
1691	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
1692	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	107	None	add
1693	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  	non-compiled	[CE]  ')'  expected	107	None	add
1694	[BUG]  [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [CE]  ')'  expected  [FE]                  ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type	  	non-compiled	[CE]  ')'  expected	107	None	add
1695	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  ')'  expected	232	None	replace
1696	[BUG]  [BUGGY]  if(value!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  ';'  expected	232	None	replace
1697	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [CE]  >  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  >  expected	232	None	replace
1698	[BUG]  [BUGGY]  if(value!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(Type	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  ')'  expected	232	None	replace
1699	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  ')'  expected	232	None	replace
1700	[BUG]  [BUGGY]  Constructor  <?  >>  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	155	None	replace
1701	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(baseType)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  baseType  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(baseType)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(baseType)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(type)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  baseType	14	None	replace
1702	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
1703	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
1704	[BUG]  [BUGGY]  final  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
1705	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	158	None	replace
1706	[BUG]  [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  not  a  statement	22	None	replace
1707	[BUG]  [BUGGY]  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  not  a  statement	22	None	replace
1708	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.Class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  Class  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.Class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||!TypeAdapter.Class.isAssignableFrom(value))  {	  if(typeAdapter    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  Class	156	None	replace
1709	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  object.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  object  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  object.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  object.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  object	77	None	replace
1710	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
1711	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(TypeAdapter.class))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1712	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	69	2	replace
1713	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	69	2	replace
1714	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	69	None	replace
1715	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	add
1716	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	add
1717	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type	  	non-compiled	[CE]  ')'  expected	240	None	add
1718	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	240	None	add
1719	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	240	None	add
1720	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor.  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor.	  	non-compiled	[CE]  <identifier>  expected	240	None	add
1721	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )	  	non-compiled	[CE]  illegal  start  of  expression	240	None	add
1722	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [CE]  ')'  expected  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken	  	non-compiled	[CE]  ')'  expected	240	None	add
1723	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	142	2	replace
1724	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	142	2	replace
1725	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)&&  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)&&  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)&&  typeAdapter.class.isAssignableFrom(value))  {	  if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1726	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	add
1727	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type	  	non-compiled	[CE]  ')'  expected	169	None	add
1728	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	169	None	add
1729	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	add
1730	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructor  [CE]  ';'  expected  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructor  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructor	  	non-compiled	[CE]  ';'  expected	169	None	add
1731	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  classAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  reached  end  of  file  while  parsing  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  classAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  classAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	add
1732	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  reached  end  of  file  while  parsing  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	add
1733	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [CE]  ')'  expected  [FE]                  ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken	  	non-compiled	[CE]  ')'  expected	169	None	add
1734	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	127	None	add
1735	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get	  	non-compiled	[CE]  ';'  expected	127	None	add
1736	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor	  	non-compiled	[CE]  ';'  expected	127	None	add
1737	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	127	None	add
1738	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
1739	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	127	None	add
1740	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type	  	non-compiled	[CE]  ')'  expected	127	None	add
1741	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.  [CE]  <identifier>  expected  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.	  	non-compiled	[CE]  <identifier>  expected	127	None	add
1742	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||!TypeAdapter.class.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||!TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||!TypeAdapter.class.isAssignableFrom(type))  {	  if(value    instanceof    Class    <?    >>    ||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	215	None	replace
1743	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)&&  value.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)&&  value.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)&&  value.isAssignableFrom(type))  {	  if(value.equals(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  type	209	None	replace
1744	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
1745	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
1746	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
1747	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
1748	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type	  	non-compiled	[CE]  ')'  expected	66	None	add
1749	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
1750	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  reached  end  of  file  while  parsing  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	add
1751	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	66	None	add
1752	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
1753	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get	  	non-compiled	[CE]  ';'  expected	12	None	add
1754	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type	  	non-compiled	[CE]  ')'  expected	12	None	add
1755	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(type))  {  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(type))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
1756	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor	  	non-compiled	[CE]  ';'  expected	12	None	add
1757	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.	  	non-compiled	[CE]  <identifier>  expected	12	None	add
1758	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
1759	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	add
1760	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
1761	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapterFactory.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
1762	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(type)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(type)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    if(!TypeAdapter.class.isAssignableFrom(type)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
1763	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  reached  end  of  file  while  parsing  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
1764	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(type))  {  [CE]  reached  end  of  file  while  parsing  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(type))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
1765	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
1766	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  &&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  &&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    &&!TypeAdapterFactory.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
1767	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  &&!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                  ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  &&!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    &&!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
1768	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).constructor();  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).constructor();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).constructor();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
1769	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeClass));  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeClass));	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	199	None	replace
1770	[BUG]  [BUGGY]  if(TypeAdapter.Class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  Class  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.Class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.Class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  Class	78	None	replace
1771	[BUG]  [BUGGY]  Constructor  <?  >>  type  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  type  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  type  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	162	None	replace
1772	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)||  typeAdapter.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	266	None	replace
1773	[BUG]  [BUGGY]  if(value.equals(typeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(typeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(typeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	265	None	replace
1774	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  value.isAssignableFrom(typeAdapter.class))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  value.isAssignableFrom(typeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter)||  value.isAssignableFrom(typeAdapter.class))  {	  if(typeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	265	None	replace
1775	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get().create(gson,    fieldType);    }    	non-compiled	[CE]  illegal  start  of  type	223	None	replace
1776	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get().create(gson,    fieldType);    }    	non-compiled	[CE]  illegal  start  of  type	223	None	replace
1777	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	13	2	replace
1778	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	13	2	replace
1779	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(type))  {	  if(value.isAssignableFrom(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	13	None	replace
1780	[BUG]  [BUGGY]  if(value.equals(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	129	None	replace
1781	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterFactory)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterFactory)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterFactory)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	129	None	replace
1782	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  if(value!=  typeAdapterClass)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  if(value!=  typeAdapterClass)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  if(value!=  typeAdapterClass)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  ')'  expected	218	None	replace
1783	[BUG]  [BUGGY]  &&  constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  &&  constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&  constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  illegal  start  of  expression	218	None	replace
1784	[BUG]  [BUGGY]  &&  constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  ==  ')'  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  &&  constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  ==  ')'  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&  constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  ==  ')'	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  illegal  start  of  expression	218	None	replace
1785	[BUG]  [BUGGY]  &&  constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  >=  ')'  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  &&  constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  >=  ')'  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&  constructorConstructor!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  >=  ')'	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get    	non-compiled	[CE]  illegal  start  of  expression	218	None	replace
1786	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
1787	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get	  	non-compiled	[CE]  ';'  expected	68	None	add
1788	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type	  	non-compiled	[CE]  ')'  expected	68	None	add
1789	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor	  	non-compiled	[CE]  ';'  expected	68	None	add
1790	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.  [CE]  <identifier>  expected  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.	  	non-compiled	[CE]  <identifier>  expected	68	None	add
1791	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
1792	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  reached  end  of  file  while  parsing  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
1793	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructor  [CE]  ';'  expected  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructor  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    TypeToken.class.isAssignableFrom(value))    {    if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructor	  	non-compiled	[CE]  ';'  expected	68	None	add
1794	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	add
1795	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	add
1796	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	add
1797	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	add
1798	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type	  	non-compiled	[CE]  ')'  expected	15	None	add
1799	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	add
1800	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	add
1801	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	add
1802	[BUG]  [BUGGY]  Constructor  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  not  a  statement	271	None	replace
1803	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  not  a  statement	271	None	replace
1804	[BUG]  [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	271	None	replace
1805	[BUG]  [BUGGY]  Constructor  <?  >>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  not  a  statement	160	None	replace
1806	[BUG]  [BUGGY]  if(typeAdapter!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	253	None	replace
1807	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.class);  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  typeToken  =  constructorConstructor.get(TypeToken.class);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	add
1808	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	add
1809	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  t  =  getTypeToken();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	add
1810	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  value.getType();  [CE]  reached  end  of  file  while  parsing  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  value.getType();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken  t  =  value.getType();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	add
1811	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||  typeAdapter.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
1812	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)&&  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)&&  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)&&  typeAdapter.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
1813	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	194	None	replace
1814	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	194	None	replace
1815	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	194	None	replace
1816	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass)||  typeAdapter.isAssignableFrom(value))  {	  if(value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	60	None	replace
1817	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)&&  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)&&  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass)&&  value.isAssignableFrom(typeAdapterClass))  {	  if(value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	60	None	replace
1818	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory),  fieldType).construct();  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory),  fieldType).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory),  fieldType).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	200	None	replace
1819	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)&&  typeAdapterClass.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)&&  typeAdapterClass.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)&&  typeAdapterClass.isAssignableFrom(typeAdapterClass))  {	  if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	187	None	replace
1820	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	187	None	replace
1821	[BUG]  [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.class);  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Object  value  =  constructorConstructor.get(TypeToken.class);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
1822	[BUG]  [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
1823	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
1824	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct();  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
1825	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  >  expected  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    }    	non-compiled	[CE]  >  expected	230	None	replace
1826	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
1827	[BUG]  [BUGGY]  Object  value  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Object  value  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Object  value  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
1828	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	47	2	replace
1829	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	47	2	replace
1830	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(type))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	47	None	replace
1831	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  not  a  statement	147	None	replace
1832	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  typeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  typeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  not  a  statement	147	None	replace
1833	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )  value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    	non-compiled	[CE]  not  a  statement	147	None	replace
1834	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  value.isPrimitive())  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  value.isPrimitive())  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  value.isPrimitive())  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
1835	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	7	None	add
1836	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  value.isPrimitive())  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  value.isPrimitive())  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  value.isPrimitive())  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  	non-compiled	[CE]  ';'  expected	7	None	add
1837	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  	non-compiled	[CE]  ')'  expected	7	None	add
1838	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	7	None	add
1839	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	7	None	add
1840	[BUG]  [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  }  [CE]  reached  end  of  file  while  parsing  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
1841	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1842	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1843	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1844	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	205	None	replace
1845	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1846	[BUG]  [BUGGY]  Constructor  <?  >>  )  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  )  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  )  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    token    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  not  a  statement	205	None	replace
1847	[BUG]  [BUGGY]  Constructor  <?  >>  Object>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  Object>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  Object>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	153	None	replace
1848	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).constructor();  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).constructor();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).constructor();	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
1849	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
1850	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
1851	[BUG]  [BUGGY]  TypeAdapter  <?  >>  value  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  value  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >>  value  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	161	None	replace
1852	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.equals(typeAdapterClass)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value.equals(typeAdapterClass)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  value.equals(typeAdapterClass)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1853	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
1854	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
1855	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	103	None	replace
1856	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass!=  null)  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass!=  null)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass!=  null)  {	  if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	39	None	replace
1857	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(type))  {	  if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	39	None	replace
1858	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	39	None	replace
1859	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterName)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterName)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterName)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
1860	[BUG]  [BUGGY]  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
1861	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	19	None	replace
1862	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
1863	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(type))  {	  if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	19	None	replace
1864	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(name))  {  [CE]  cannot  find  symbol  name  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(name))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(name))  {	  if(TypeAdapter.class.isAssignableFrom(path))    {    	non-compiled	[CE]  cannot  find  symbol  name	229	None	replace
1865	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(method))  {  [CE]  cannot  find  symbol  method  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(method))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(method))  {	  if(TypeAdapter.class.isAssignableFrom(path))    {    	non-compiled	[CE]  cannot  find  symbol  method	229	None	replace
1866	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  value.equals(TypeAdapter.class))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass)||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass)||  value.equals(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	111	None	replace
1867	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)&&  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value.equals(TypeAdapter.class)&&  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	111	2	replace
1868	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)&&  value.isAssignableFrom(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)&&  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)&&  value.isAssignableFrom(TypeAdapter.class))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	111	2	replace
1869	[BUG]  [BUGGY]  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
1870	[BUG]  [BUGGY]  if(value  instanceof  Class  <  TypeAdapter)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  >  expected  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <  TypeAdapter)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <  TypeAdapter)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  >  expected	195	None	replace
1871	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(type))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	195	None	replace
1872	[BUG]  [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	210	None	replace
1873	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
1874	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type	  	non-compiled	[CE]  ')'  expected	110	None	add
1875	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(typeAdapterClass)||  value.equals(TypeAdapter.class))  {  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(typeAdapterClass)||  value.equals(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass)||  value.equals(TypeAdapter.class))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
1876	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get	  	non-compiled	[CE]  ';'  expected	110	None	add
1877	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
1878	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
1879	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [CE]  ')'  expected  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken	  	non-compiled	[CE]  ')'  expected	110	None	add
1880	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||    value.equals(TypeAdapter.class))    {    if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	110	None	add
1881	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeFactory))  {  [CE]  cannot  find  symbol  typeFactory  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeFactory))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(typeFactory))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeFactory	11	None	replace
1882	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type	  	non-compiled	[CE]  ')'  expected	18	None	add
1883	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get	  	non-compiled	[CE]  ';'  expected	18	None	add
1884	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
1885	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.equals(TypeToken.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  	non-compiled	[CE]  ';'  expected	18	None	add
1886	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  >  expected  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type	  	non-compiled	[CE]  >  expected	18	None	add
1887	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
1888	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.equals(TypeToken.class)||  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type	  	non-compiled	[CE]  ')'  expected	18	None	add
1889	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [CE]  ';'  expected  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor	  	non-compiled	[CE]  ';'  expected	18	None	add
1890	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
1891	[BUG]  [BUGGY]  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	84	None	replace
1892	[BUG]  [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	84	None	replace
1893	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt!=  ')'  expected  [CE]  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt!=  ')'  expected  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt!=  ')'  expected	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  	220	None	replace
1894	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  	220	None	replace
1895	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeObjectClass))  {  [CE]  cannot  find  symbol  typeObjectClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeObjectClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeObjectClass))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeObjectClass	172	None	replace
1896	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeName))  {  [CE]  cannot  find  symbol  typeName  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeName))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(typeName))  {	  if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeName	172	None	replace
1897	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  this.typeAdapterClass!=  null)  {  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  this.typeAdapterClass!=  null)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  this.typeAdapterClass!=  null)  {	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass!=    null)    {    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	269	None	replace
1898	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(baseType))  {  [CE]  cannot  find  symbol  baseType  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(baseType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(baseType))  {	  if(!TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  baseType	45	None	replace
1899	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(path))  {  [CE]  cannot  find  symbol  path  [FE]                    ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(path))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(path))  {	  if(!TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  path	45	None	replace
1900	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  illegal  start  of  type	259	None	replace
1901	[BUG]  [BUGGY]  Constructor  <  TypeAdapter  <?  >>  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter  <?  >>  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter  <?  >>  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  illegal  start  of  type	259	None	replace
1902	[BUG]  [BUGGY]  Constructor  <?  >>  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  typeAdapterClass  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  not  a  statement	259	None	replace
1903	[BUG]  [BUGGY]  Constructor  <?  >>  )  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  )  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  )  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	184	None	replace
1904	[BUG]  [BUGGY]  final  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
1905	[BUG]  [BUGGY]  Constructor  <?  >>  Object>  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  Object>  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  Object>  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	184	None	replace
1906	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
1907	[BUG]  [BUGGY]  if(value  instanceof  Class  <  TypeAdapter  <?  >>  )  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <  TypeAdapter  <?  >>  )  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <  TypeAdapter  <?  >>  )  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
1908	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ')'  expected	233	None	replace
1909	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  	233	None	replace
1910	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.Class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  Class  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.Class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.Class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  Class	99	None	replace
1911	[BUG]  [BUGGY]  &&  typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  &&  typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	&&  typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapt    	non-compiled	[CE]  illegal  start  of  expression	217	None	replace
1912	[BUG]  [BUGGY]  Constructor  <?  >=  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >=  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >=  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  not  a  statement	152	None	replace
1913	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
1914	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
1915	[BUG]  [BUGGY]  TypeToken  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	85	None	replace
1916	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
1917	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	add
1918	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	add
1919	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	125	None	add
1920	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [CE]  ')'  expected  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken	  	non-compiled	[CE]  ')'  expected	125	None	add
1921	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  reached  end  of  file  while  parsing  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	add
1922	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructor  [CE]  ';'  expected  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructor  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructor	  	non-compiled	[CE]  ';'  expected	125	None	add
1923	[BUG]  [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  	non-compiled	[CE]  ')'  expected	125	None	add
1924	[BUG]  [BUGGY]  Constructor  <?  >>  )  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  )  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  )  {  TypeToken  typeToken  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  not  a  statement	183	None	replace
1925	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  not  a  statement	183	None	replace
1926	[BUG]  [BUGGY]  Constructor  <  TypeAdapter>  constructor  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  TypeAdapter>  constructor  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <  TypeAdapter>  constructor  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
1927	[BUG]  [BUGGY]  Constructor  <?  >>  :  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  :  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  :  constructorConstructor.get(TypeToken.get(typeToken)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  not  a  statement	183	None	replace
1928	[BUG]  [BUGGY]  Constructor  <?  >>  Object>  constructor  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  Object>  constructor  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  Object>  constructor  =  constructorConstructor.get(TypeToken.get(typeToken)).construct();	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    typeToken    =    constructorConstructor.get(TypeToken.get(typeToken)).construct();    	non-compiled	[CE]  not  a  statement	183	None	replace
1929	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	42	None	replace
1930	[BUG]  [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(typeAdapterClass.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	42	None	replace
1931	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(type))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [CE]  not  a  statement  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(type))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(type))  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >=    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  not  a  statement	118	None	replace
1932	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [CE]  not  a  statement  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  TypeAdapter  <?  >=  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >=    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  not  a  statement	118	None	replace
1933	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(type))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [CE]  not  a  statement  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(type))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(type))  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >=    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  not  a  statement	118	None	replace
1934	[BUG]  [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(TypeToken.class))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(TypeToken.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.class.isAssignableFrom(value)||  value.isAssignableFrom(TypeToken.class))  {	  if(value.isAssignableFrom(TypeToken.class)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
1935	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.Class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  Class  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.Class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&!TypeAdapter.Class.isAssignableFrom(value))  {	  if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  Class	37	None	replace
1936	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.END_ARRAY);  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.END_ARRAY);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.getAnnotation(JsonToken.END_ARRAY);	  Constructor    <?>    annotation    =    constructorConstructor.getAnnotation(JsonToken.class);    	non-compiled	[CE]  illegal  start  of  type	225	None	replace
1937	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1938	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1939	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	146	None	replace
1940	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
1941	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
1942	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	181	None	replace
1943	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
1944	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  	non-compiled	[CE]  ')'  expected	188	None	add
1945	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	188	None	add
1946	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	188	None	add
1947	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(	  	non-compiled	[CE]  illegal  start  of  expression	188	None	add
1948	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [CE]  ')'  expected  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type	  	non-compiled	[CE]  ')'  expected	188	None	add
1949	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  }  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get().create(gson,  fieldType);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
1950	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [CE]  ')'  expected  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken	  	non-compiled	[CE]  ')'  expected	188	None	add
1951	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  >  expected  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  >  expected	188	None	add
1952	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(baseType))  {  [CE]  cannot  find  symbol  baseType  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(baseType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(baseType))  {	  if(TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  baseType	49	None	replace
1953	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(object))  {  [CE]  cannot  find  symbol  object  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(object))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(object))  {	  if(TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  object	49	None	replace
1954	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(typeType))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(typeType))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  &&  typeAdapterClass.isAssignableFrom(typeType))  {	  if(value    instanceof    Class    <?    >>    &&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
1955	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapterFactory))  {  [CE]  cannot  find  symbol  TypeAdapterFactory  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapterFactory))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapterFactory))  {	  if(TypeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  TypeAdapterFactory	63	None	replace
1956	[BUG]  [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(value)||  TypeToken.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.isAssignableFrom(value)||  TypeToken.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.isAssignableFrom(value)||  TypeToken.isAssignableFrom(value))  {	  if(TypeAdapterFactory.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
1957	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  +  ';'  [CE]  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  +  ';'  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  +  ';'	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(typeAdapterClass))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  	257	None	replace
1958	[BUG]  [BUGGY]  Constructor  <?  >>  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  not  a  statement	87	None	replace
1959	[BUG]  [BUGGY]  Constructor  <?  >>  constructorConstructor.get(TypeToken.class)).construct();  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?  >>  constructorConstructor.get(TypeToken.class)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?  >>  constructorConstructor.get(TypeToken.class)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  not  a  statement	87	None	replace
1960	[BUG]  [BUGGY]  if(value  instanceof  Class  <  TypeAdapter  <?  >>  type)  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <  TypeAdapter  <?  >>  type)  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <  TypeAdapter  <?  >>  type)  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  	238	None	replace
1961	[BUG]  [BUGGY]  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  type  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	238	None	replace
1962	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >=  type  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >=  type  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >=  type  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	238	None	replace
1963	[BUG]  [BUGGY]  if(value  instanceof  Class  <  TypeAdapter  <?  >>  type)  {  Class  <  TypeAdapter  <?  >=  type  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <  TypeAdapter  <?  >>  type)  {  Class  <  TypeAdapter  <?  >=  type  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <  TypeAdapter  <?  >>  type)  {  Class  <  TypeAdapter  <?  >=  type  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    type    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  	238	None	replace
1964	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
1965	[BUG]  [BUGGY]  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	150	None	replace
1966	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
1967	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
1968	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(TypeAdapter.class.isAssignableFrom(type)||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(TypeAdapter.class.isAssignableFrom(type)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(TypeAdapter.class.isAssignableFrom(type)||!TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
1969	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(type))  {  [CE]  reached  end  of  file  while  parsing  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(type))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
1970	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
1971	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
1972	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
1973	[BUG]  [BUGGY]  if(value!=  null  &&  value.class.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.class.isAssignableFrom(typeAdapterClass))  {	  if(value!=    null    &&    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	9	None	replace
1974	[BUG]  [BUGGY]  if(typeClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeClass  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(typeClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(typeClass)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeClass	104	None	replace
1975	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(typeClass))  {  [CE]  cannot  find  symbol  typeClass  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(typeClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(typeClass))  {	  if(TypeAdapter.class.isAssignableFrom(typeClass)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeClass	104	None	replace
1976	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  fieldType.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  fieldType.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	166	2	replace
1977	[BUG]  [BUGGY]  if(value!=  null  &&  fieldType.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  fieldType.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  fieldType.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	166	2	replace
1978	[BUG]  [BUGGY]  if(value!=  null  &&  constructorConstructor.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  constructorConstructor.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  constructorConstructor.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1979	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
1980	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?>)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  instanceof  Class  <?>)  {	  if(TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	51	2	replace
1981	[BUG]  [BUGGY]  if(value  instanceof  Class  <?>)  {  [FE]  ClassCastException  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?>)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?>)  {	  if(TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	51	2	replace
1982	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null)  {	  if(TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	51	2	replace
1983	[BUG]  [BUGGY]  if(value!=  null)  {  [FE]  ClassCastException  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {	  if(TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	51	2	replace
1984	[BUG]  [BUGGY]  if(value  ==  null  ||  typeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	143	None	replace
1985	[BUG]  [BUGGY]  if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.Class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.Class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeToken.class.isAssignableFrom(value)||  TypeAdapter.Class.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
1986	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
1987	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(!TypeAdapter.class.isAssignableFrom(value)&&!TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
1988	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(type)||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(type)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(!TypeAdapter.class.isAssignableFrom(type)||!TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
1989	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(type))  {  [CE]  reached  end  of  file  while  parsing  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(type))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
1990	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
1991	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
1992	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
1993	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  ';'  expected  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  	non-compiled	[CE]  ';'  expected	190	None	add
1994	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [CE]  <identifier>  expected  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).	  	non-compiled	[CE]  <identifier>  expected	190	None	add
1995	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	190	None	add
1996	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  reached  end  of  file  while  parsing  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	add
1997	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [CE]  >  expected  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()	  	non-compiled	[CE]  >  expected	190	None	add
1998	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)  [CE]  ')'  expected  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)	  	non-compiled	[CE]  ')'  expected	190	None	add
1999	[BUG]  [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [CE]  >  expected  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(!value.isAssignableFrom(TypeAdapter.class))  {  if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!value.isAssignableFrom(TypeAdapter.class))    {    if(!value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).	  	non-compiled	[CE]  >  expected	190	None	add
2000	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  fieldType.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value  ==  null  ||  fieldType.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	82	2	replace
2001	[BUG]  [BUGGY]  if(value  ==  null  ||  fieldType.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  fieldType.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  fieldType.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	82	2	replace
2002	[BUG]  [BUGGY]  if(value  ==  null  ||  constructorConstructor.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  constructorConstructor.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  constructorConstructor.isAssignableFrom(value))  {	  if(value    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
2003	[BUG]  [BUGGY]  final  Class  <  TypeAdapter  <?  >>  )value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  <identifier>  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapter  <?  >>  )value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  Class  <  TypeAdapter  <?  >>  )value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  <identifier>  expected	180	None	replace
2004	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(typeAdapterClass))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  illegal  start  of  expression	204	None	replace
2005	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(typeAdapterClass))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  illegal  start  of  expression	204	None	replace
2006	[BUG]  [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  illegal  start  of  expression	204	None	replace
2007	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type));    	non-compiled	[CE]  not  a  statement	272	None	replace
2008	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type));    	non-compiled	[CE]  not  a  statement	272	None	replace
2009	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type));	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type));    	non-compiled	[CE]  not  a  statement	272	None	replace
2010	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(typeAdapterClass))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2011	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterName)).construct();  [CE]  illegal  start  of  type  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterName)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterName)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
2012	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	126	None	replace
2013	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(type)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	241	None	replace
2014	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
2015	[BUG]  [BUGGY]  if(type.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(type.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  type	248	None	replace
2016	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  type	248	None	replace
2017	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(type))    {    	non-compiled	[CE]  not  a  statement	248	None	replace
2018	[BUG]  [BUGGY]  if(value  ==  null  ||  type.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  type.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  type.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  type	248	None	replace
2019	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(type))    {    	non-compiled	[CE]  illegal  start  of  expression	248	None	replace
2020	[BUG]  [BUGGY]  if(baseType.isAssignableFrom(TypeAdapter.class))  {  [CE]  cannot  find  symbol  baseType  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(baseType.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(baseType.isAssignableFrom(TypeAdapter.class))  {	  if(type.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  baseType	109	None	replace
2021	[BUG]  [BUGGY]  if(class.isAssignableFrom(TypeAdapter.class))  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(class.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(class.isAssignableFrom(TypeAdapter.class))  {	  if(type.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
2022	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	36	None	add
2023	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  	non-compiled	[CE]  ')'  expected	36	None	add
2024	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	add
2025	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	36	None	add
2026	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  >  expected  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  >  expected	36	None	add
2027	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type	  	non-compiled	[CE]  ')'  expected	36	None	add
2028	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	add
2029	[BUG]  [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [CE]  ')'  expected  [FE]                  ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken	  	non-compiled	[CE]  ')'  expected	36	None	add
2030	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
2031	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
2032	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeClass));  [CE]  illegal  start  of  type  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeClass));	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
2033	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null)    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  illegal  start  of  type	231	None	replace
2034	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)||  typeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	178	None	replace
2035	[BUG]  [BUGGY]  if(ValueAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(ValueAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(ValueAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    typeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	178	None	replace
2036	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2037	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value  instanceof  Class  <  TypeAdapter  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value  instanceof  Class  <  TypeAdapter  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  value  instanceof  Class  <  TypeAdapter  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2038	[BUG]  [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2039	[BUG]  [BUGGY]  if(typeAdapterClass!=  null  &&  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null  &&  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null  &&  value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapterClass!=    null    ||    value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
2040	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    typeAdapterClass.isAssignableFrom(value)||    typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
2041	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    t    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
2042	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)&&  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  t  =  getTypeToken();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    t    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
2043	[BUG]  [BUGGY]  if(value.equals(TypeToken.class))  {  TypeToken  t  =  getTypeToken();  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class))  {  TypeToken  t  =  getTypeToken();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class))  {  TypeToken  t  =  getTypeToken();  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    t    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	206	None	replace
2044	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
2045	[BUG]  [BUGGY]  if(value!=  null)  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [CE]  not  a  statement  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  not  a  statement	119	None	replace
2046	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [CE]  not  a  statement  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  not  a  statement	119	None	replace
2047	[BUG]  [BUGGY]  if(value  ==  null)  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [CE]  not  a  statement  [FE]                  ClassCastException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  TypeAdapter  <?  >>  typeAdapterClass  =(TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    TypeAdapter    <?    >>    typeAdapterClass    =(TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  not  a  statement	119	None	replace
2048	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType);  [CE]  illegal  start  of  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(type)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
2049	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  if(value!=  typeAdapterClass)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  if(value!=  typeAdapterClass)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  if(value!=  typeAdapterClass)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.    	non-compiled	[CE]  illegal  start  of  expression	219	None	replace
2050	[BUG]  [BUGGY]  TypeToken  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.    	non-compiled	[CE]  not  a  statement	219	None	replace
2051	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.    	non-compiled	[CE]  illegal  start  of  expression	219	None	replace
2052	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  if(value!=  typeAdapterClass)  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  >  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  if(value!=  typeAdapterClass)  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  if(value!=  typeAdapterClass)  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.    	non-compiled	[CE]  >  expected	219	None	replace
2053	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
2054	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeType))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeType))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeType))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
2055	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
2056	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	86	None	replace
2057	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >=  &&  typeAdapterClass.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >=  &&  typeAdapterClass.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >=  &&  typeAdapterClass.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >=    &&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
2058	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeToken  token  =  constructorConstructor.get(TypeToken.get(type)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	add
2059	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeToken  token  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	add
2060	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  [Delete]  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  [Delete]  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  [Delete]  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >=    )value;    	non-compiled	[CE]  >  expected	95	None	replace
2061	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(type))  {	  if(typeAdapter.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  type	105	None	replace
2062	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)&&  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)&&  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)&&  typeAdapter.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	267	None	replace
2063	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
2064	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
2065	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	252	None	replace
2066	[BUG]  [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.CLASS);  [CE]  illegal  start  of  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.CLASS);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.CLASS);	  Constructor    <?>    annotation    =    constructorConstructor.get(TypeToken.class);    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
2067	[BUG]  [BUGGY]  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  not  a  statement	154	None	replace
2068	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
2069	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
2070	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeToken.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
2071	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  typeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  typeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
2072	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value  instanceof  TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  value  instanceof  TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  value  instanceof  TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  illegal  start  of  expression	275	None	replace
2073	[BUG]  [BUGGY]  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	44	2	replace
2074	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [FE]  ClassCastException  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))  {	  if(!TypeAdapter.class.isAssignableFrom(value)||!TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  ClassCastException  	44	2	replace
2075	[BUG]  [BUGGY]  if(value  >=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  >=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  >=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {	  if(value!=    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	108	None	replace
2076	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
2077	[BUG]  [BUGGY]  TypeToken  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	133	None	replace
2078	[BUG]  [BUGGY]  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	133	None	replace
2079	[BUG]  [BUGGY]  TypeToken  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	133	None	replace
2080	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType),  typeAdapterClass)  {  [CE]  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType),  typeAdapterClass)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(fieldType),  typeAdapterClass)  {	  if(TypeAdapter.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  	192	None	replace
2081	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson	  	non-compiled	[CE]  ')'  expected	208	None	add
2082	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [CE]  <identifier>  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).	  	non-compiled	[CE]  <identifier>  expected	208	None	add
2083	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create	  	non-compiled	[CE]  ';'  expected	208	None	add
2084	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType  [CE]  ')'  expected  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType	  	non-compiled	[CE]  ')'  expected	208	None	add
2085	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))    {    if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(	  	non-compiled	[CE]  illegal  start  of  expression	208	None	add
2086	[BUG]  [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeToken  token  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken  token  =  constructorConstructor.get(TypeToken.class);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	add
2087	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	38	None	add
2088	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	add
2089	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  	non-compiled	[CE]  ')'  expected	38	None	add
2090	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	38	None	add
2091	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  reached  end  of  file  while  parsing  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	38	None	add
2092	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	38	None	add
2093	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  	non-compiled	[CE]  ')'  expected	38	None	add
2094	[BUG]  [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]                  ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  ||!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	38	None	add
2095	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	add
2096	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	add
2097	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	add
2098	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	123	None	add
2099	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	add
2100	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	add
2101	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(key)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  key  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(key)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(key)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  key	70	None	replace
2102	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(baseType)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  baseType  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(baseType)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(baseType)||  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  baseType	70	None	replace
2103	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	70	2	replace
2104	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(type)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	70	2	replace
2105	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	164	None	replace
2106	[BUG]  [BUGGY]  TypeToken  <?  >>  value  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  value  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >>  value  =(TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	164	None	replace
2107	[BUG]  [BUGGY]  if(typeAdapter  ==  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null)  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
2108	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	164	None	replace
2109	[BUG]  [BUGGY]  if(value.equals(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(typeAdapter)||  TypeToken.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	72	None	replace
2110	[BUG]  [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  typeToken.class.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(typeAdapter)||  typeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(typeAdapter)||  typeToken.class.isAssignableFrom(value))  {	  if(typeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	72	None	replace
2111	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(fieldType  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(fieldType  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapterClass    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	254	2	replace
2112	[BUG]  [BUGGY]  if(fieldType  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(fieldType  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(fieldType  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {	  if(typeAdapterClass    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	254	2	replace
2113	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	25	None	replace
2114	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	25	None	replace
2115	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(value)).construct();  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(value)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(value)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
2116	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass).construct();  [CE]  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  	134	None	replace
2117	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(value)).construct();  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(value)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  )  value  =  constructorConstructor.get(TypeToken.get(value)).construct();	  if(value.isAssignableFrom(TypeAdapter.class))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  not  a  statement	163	None	replace
2118	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
2119	[BUG]  [BUGGY]  TypeAdapter  <?  >=  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >=  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeAdapter  <?  >=  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	131	None	replace
2120	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeToken.class.isAssignableFrom(type)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	274	None	replace
2121	[BUG]  [BUGGY]  if(value!=  null  &&  typeToken.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeToken  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeToken.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeToken.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeToken	274	None	replace
2122	[BUG]  [BUGGY]  if(value!=  null)  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
2123	[BUG]  [BUGGY]  if(value!=  null)  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  else  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  type  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  else  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  else  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    Object    value    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
2124	[BUG]  [BUGGY]  if(value  instanceof  Class  <?  >>  ||  fieldType.isAssignableFrom(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <?  >>  ||  fieldType.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <?  >>  ||  fieldType.isAssignableFrom(typeAdapterClass))  {	  if(value    instanceof    Class    <?    >>    ||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2125	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();  [CE]  illegal  start  of  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
2126	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(type)||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(type)||  value.isAssignableFrom(typeAdapterClass))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  type	73	None	replace
2127	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
2128	[BUG]  [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  >  expected  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeToken.class)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  >  expected	182	None	replace
2129	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  if(value  instanceof  Class  <?  >>  )  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  expression  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  if(value  instanceof  Class  <?  >>  )  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    if(value  instanceof  Class  <?  >>  )  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
2130	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  if(value  instanceof  Class  <?  >>  )  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  expression  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  if(value  instanceof  Class  <?  >>  )  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    if(value  instanceof  Class  <?  >>  )  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
2131	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	add
2132	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  if(value  instanceof  Class  <?  >>  )  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  illegal  start  of  expression  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  if(value  instanceof  Class  <?  >>  )  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    if(value  instanceof  Class  <?  >>  )  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >=  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
2133	[BUG]  [BUGGY]  final  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	final  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(value.isAssignableFrom(TypeAdapter.class))    {    Class    <    TypeAdapter    <?    >=    typeAdapterClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
2134	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	177	None	replace
2135	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)&&  typeAdapterClass.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	177	None	replace
2136	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(type  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(type	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	151	None	replace
2137	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	151	None	replace
2138	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapt	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  ')'  expected	151	None	replace
2139	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	189	None	replace
2140	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(TypeAdapter.class))  {	  if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	189	2	replace
2141	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(TypeAdapter.class))  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(TypeAdapter.class))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(TypeAdapter.class))  {	  if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    	compilable	  [FE]  NullPointerException  	189	2	replace
2142	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeAdapterClass))  {	  if(value!=    null    &&    value.isAssignableFrom(TypeAdapter.class))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	189	None	replace
2143	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterType.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterType  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterType.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value)||  typeAdapterType.isAssignableFrom(value))  {	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterType	249	None	replace
2144	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	213	None	add
2145	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  	non-compiled	[CE]  ')'  expected	213	None	add
2146	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  reached  end  of  file  while  parsing  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	213	None	add
2147	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]          ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	213	None	add
2148	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  >  expected  [FE]            ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  >  expected	213	None	add
2149	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]              ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type	  	non-compiled	[CE]  ')'  expected	213	None	add
2150	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [CE]  ')'  expected  [FE]                ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken	  	non-compiled	[CE]  ')'  expected	213	None	add
2151	[BUG]  [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [CE]  illegal  start  of  expression  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
2152	[BUG]  [BUGGY]  if(typeAdapter  ==  null  ||  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null  ||  typeAdapter.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter  ==  null  ||  typeAdapter.isAssignableFrom(value))  {	  if(typeAdapterClass    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	255	None	replace
2153	[BUG]  [BUGGY]  if(typeAdapter!=  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null  ||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null  ||  typeAdapterClass.isAssignableFrom(value))  {	  if(typeAdapterClass    ==    null    ||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	255	None	replace
2154	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(type))  {	  if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	16	None	replace
2155	[BUG]  [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).constructor();  [CE]  illegal  start  of  type  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).constructor();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).constructor();	  Constructor    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
2156	[BUG]  [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  illegal  start  of  type  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  constructorConstructor.get(TypeToken.get(type)).construct();	  Constructor    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
2157	[BUG]  [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct();  [CE]  illegal  start  of  type  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Constructor  annotation  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct();	  Constructor    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
2158	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  value.equals(typeAdapterClass))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	106	None	replace
2159	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeObjectClass))  {  [CE]  cannot  find  symbol  typeObjectClass  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeObjectClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  value.isAssignableFrom(typeObjectClass))  {	  if(value.isAssignableFrom(TypeAdapter.class)||    value.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeObjectClass	106	None	replace
2160	[BUG]  [BUGGY]  if(class.isAssignableFrom(typeAdapterClass))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(class.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(class.isAssignableFrom(typeAdapterClass))  {	  if(typeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
2161	[BUG]  [BUGGY]  if(typeClass.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeClass.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeClass.isAssignableFrom(typeAdapterClass))  {	  if(typeAdapter.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	52	None	replace
2162	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(fieldType)||  TypeAdapter.class.isAssignableFrom(type))  {	  if(TypeAdapter.class.isAssignableFrom(fieldType)||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	101	None	replace
2163	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.Class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  Class  [FE]        ClassCastException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.Class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.Class.isAssignableFrom(value))  {	  if(typeAdapter    ==    null    ||    TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  Class	185	None	replace
2164	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	176	None	add
2165	[BUG]  [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(TypeAdapter.class.isAssignableFrom(value)&&  TypeAdapter.class.isAssignableFrom(value))  {  Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapter.class.isAssignableFrom(value)&&    TypeAdapter.class.isAssignableFrom(value))    {    Object  value  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	176	None	add
2166	[BUG]  [BUGGY]  if(typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  if(TypeAdapterFactory.class.isAssignableFrom(value)||    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
2167	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.class);  [CE]  illegal  start  of  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.class);	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
2168	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.class.isAssignableFrom(value));  [CE]  illegal  start  of  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.class.isAssignableFrom(value));  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.class.isAssignableFrom(value));	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    gson    =    getTypeToken();    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
2169	[BUG]  [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Class  <  TypeAdapter  <?  >>  typeAdapterClass  =(Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  if(value.isAssignableFrom(TypeAdapter.class))    {    if(value.isAssignableFrom(type))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  <identifier>  expected	262	None	replace
2170	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	270	None	replace
2171	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	270	None	replace
2172	[BUG]  [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.equals(TypeAdapter.class)||  TypeAdapter.class.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	270	None	replace
2173	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  type.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeAdapter.class)||  type.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeAdapter.class)||  type.isAssignableFrom(value))  {  TypeToken  <?  >>  type  =  constructorConstructor.get(TypeToken.get(type)).construct();  }	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    TypeToken    <?    >>    type    =    constructorConstructor.get(TypeToken.get(type)).construct();    	non-compiled	[CE]  not  a  statement	270	None	replace
2174	[BUG]  [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value.isAssignableFrom(TypeToken.class)||  typeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value.isAssignableFrom(TypeToken.class)||  typeToken.class.isAssignableFrom(value))  {	  if(TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeToken.class.isAssignableFrom(value)&&    typeAdapterClass.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	247	None	replace
2175	[BUG]  [BUGGY]  if(value!=  null  &&  fieldType.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  fieldType.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  fieldType.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
2176	[BUG]  [BUGGY]  TypeToken  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	TypeToken  <?  >>  value  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	132	None	replace
2177	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
2178	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	273	None	add
2179	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	273	None	add
2180	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	273	None	add
2181	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type	  	non-compiled	[CE]  ')'  expected	273	None	add
2182	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	273	None	add
2183	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	273	None	add
2184	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [CE]  ')'  expected  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken	  	non-compiled	[CE]  ')'  expected	273	None	add
2185	[BUG]  [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor.  [CE]  <identifier>  expected  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  if(value!=  null  &&  TypeToken.class.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=    null    &&    TypeToken.class.isAssignableFrom(value)||    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value)||  TypeAdapter.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  constructorConstructor.	  	non-compiled	[CE]  <identifier>  expected	273	None	add
2186	[BUG]  [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          ClassCastException      [CONTEXT]        [BUGGY]  if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null)  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	239	None	replace
2187	[BUG]  [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(typeClass))  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]            ClassCastException      [CONTEXT]        [BUGGY]  if(!TypeAdapter.class.isAssignableFrom(typeClass))  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(!TypeAdapter.class.isAssignableFrom(typeClass))  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	239	None	replace
2188	[BUG]  [BUGGY]  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]              ClassCastException      [CONTEXT]        [BUGGY]  if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null)  {  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	239	None	replace
2189	[BUG]  [BUGGY]  if(value  instanceof  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [CE]  [FE]                ClassCastException      [CONTEXT]        [BUGGY]  if(value  instanceof  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  instanceof  Class  <  TypeAdapter  <?  >>  typeClass  =(Class  <  TypeAdapter  <?  >>  )value;	  if(!TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeClass    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  	239	None	replace
2190	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  fieldType.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  fieldType.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	243	2	replace
2191	[BUG]  [BUGGY]  if(value!=  null  &&  fieldType.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  fieldType.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  fieldType.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	243	2	replace
2192	[BUG]  [BUGGY]  if(typeAdapter!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter!=  null  &&  value.isAssignableFrom(typeAdapterClass)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	243	None	replace
2193	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	add	if(value!=  null  &&  value.isAssignableFrom(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	243	2	replace
2194	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(TypeToken.class)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	243	2	replace
2195	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
2196	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(typeAdapterClass))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
2197	[BUG]  [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapter))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  value.isAssignableFrom(typeAdapter))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  value.isAssignableFrom(typeAdapter))  {  Class  <  TypeAdapter  <?  >>  value  =(Class  <  TypeAdapter  <?  >>  )value;  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    value    =(Class    <    TypeAdapter    <?    >>    )value;    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
2198	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ')'  expected	222	None	replace
2199	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [CE]  ')'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapterClass.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ')'  expected	222	None	replace
2200	[BUG]  [BUGGY]  if(typeAdapterClass!=  null)  {  if(value!=  typeAdapterClass)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [CE]  ')'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapterClass!=  null)  {  if(value!=  typeAdapterClass)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass!=  null)  {  if(value!=  typeAdapterClass)  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    if(value!=    null    &&    typeAdapterClass.isAssignableFrom(value))    {    Class    <    TypeAdapter    <?    >>    typeAdapterClass    =    (Class    <    TypeAdapter    <?    >>    )    value;    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct()    	non-compiled	[CE]  ')'  expected	222	None	replace
2201	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass.isAssignableFrom(value))  {	  if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	214	None	replace
2202	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass  ==  null)  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass  ==  null)  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(value)||  typeAdapterClass  ==  null)  {	  if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	214	None	replace
2203	[BUG]  [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  type  [FE]        ClassCastException    [CONTEXT]        [BUGGY]  if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(type))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&!TypeAdapter.class.isAssignableFrom(type))  {	  if(value!=    null    &&!TypeAdapter.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  type	214	None	replace
2204	[BUG]  [BUGGY]  if(value  ==  null  ||  typeAdapter.equals(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(value  ==  null  ||  typeAdapter.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  typeAdapter.equals(value))  {	  if(value    ==    null    ||    typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	81	None	replace
2205	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(value)&&  value.isAssignableFrom(typeAdapterClass))  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(value)&&  value.isAssignableFrom(typeAdapterClass))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(value)&&  value.isAssignableFrom(typeAdapterClass))  {	  if(typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
2206	[BUG]  [BUGGY]  if(typeAdapter.isAssignableFrom(value)||  typeAdapter.equals(value))  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter.isAssignableFrom(value)||  typeAdapter.equals(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapter.isAssignableFrom(value)||  typeAdapter.equals(value))  {	  if(typeAdapter.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
2207	[BUG]  [BUGGY]  if(typeadapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(typeadapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeadapter.class.isAssignableFrom(value))  {	  if(value.class.isAssignableFrom(typeAdapter))    {    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
2208	[BUG]  [BUGGY]  if(class.isAssignableFrom(typeAdapter))  {  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(class.isAssignableFrom(typeAdapter))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(class.isAssignableFrom(typeAdapter))  {	  if(value.class.isAssignableFrom(typeAdapter))    {    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
2209	[BUG]  [BUGGY]  if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    ClassCastException    [CONTEXT]        [BUGGY]  if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(typeAdapterClass  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	170	None	replace
2210	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  typeToken.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]      ClassCastException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  typeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value  ==  null  ||  TypeAdapter.class.isAssignableFrom(value)||  typeToken.class.isAssignableFrom(value))  {	  if(value!=    null    ||    TypeAdapter.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
2211	[BUG]  [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(value!=  null  &&  typeAdapter.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value!=  null  &&  typeAdapter.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  if(value!=    null    &&    TypeAdapter.class.isAssignableFrom(value))    {    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
2212	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeFactory),  fieldType).construct();  [CE]  illegal  start  of  type  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeFactory),  fieldType).construct();  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeFactory),  fieldType).construct();	  Gson    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  illegal  start  of  type	198	None	replace
2213	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	add
2214	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	add
2215	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value  ==  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	add
2216	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [CE]  ')'  expected  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(Type	  	non-compiled	[CE]  ')'  expected	167	None	add
2217	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [CE]  reached  end  of  file  while  parsing  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	add
2218	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	add
2219	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  reached  end  of  file  while  parsing  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value!=  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value!=  null  ||  typeAdapterClass.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	add
2220	[BUG]  [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    TypeToken.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    if(value  ==  null  ||  TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	add
2221	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	186	None	add
2222	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  ')'  expected	186	None	add
2223	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  	non-compiled	[CE]  ')'  expected	186	None	add
2224	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	186	None	add
2225	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [CE]  ')'  expected  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get	  	non-compiled	[CE]  ')'  expected	186	None	add
2226	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [CE]  <identifier>  expected  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value!=  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.	  	non-compiled	[CE]  <identifier>  expected	186	None	add
2227	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [CE]  ')'  expected  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >>  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(type	  	non-compiled	[CE]  ')'  expected	186	None	add
2228	[BUG]  [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [CE]  >  expected  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(value    ==    null    ||    value.isAssignableFrom(TypeAdapter.class))    {    if(value  ==  null  ||  value.isAssignableFrom(TypeAdapter.class))  {  Class  <  TypeAdapter  <?  >=  typeAdapterClass  =  (Class  <  TypeAdapter  <?  >>  )  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapt	  	non-compiled	[CE]  >  expected	186	None	add
2229	[BUG]  [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(key))  {  [CE]  cannot  find  symbol  key  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(TypeAdapterFactory.class.isAssignableFrom(key))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(TypeAdapterFactory.class.isAssignableFrom(key))  {	  if(TypeAdapterFactory.class.isAssignableFrom(typeAdapterClass))    {    	non-compiled	[CE]  cannot  find  symbol  key	48	None	replace
2230	[BUG]  [BUGGY]  if(type  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(type  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type  instanceof  Class  <?  >>  ||  typeAdapter.class.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2231	[BUG]  [BUGGY]  if(type  instanceof  Class  <?  >>  ||  type.isAssignableFrom(value))  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(type  instanceof  Class  <?  >>  ||  type.isAssignableFrom(value))  {  [BUGGY]      Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	55	55	2	replace	if(type  instanceof  Class  <?  >>  ||  type.isAssignableFrom(value))  {	  if(value    instanceof    Class    <?    >>    ||    TypeAdapter.class.isAssignableFrom(type))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
