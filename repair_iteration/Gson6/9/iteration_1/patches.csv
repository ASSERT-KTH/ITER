bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  value.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.equals(TypeAdapterFactory.class)||  value.equals(TypeAdapterFactory.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
2	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  value.equals(TypeAdapterFactory.class))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  value.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.equals(TypeAdapterFactory.class)||  value.equals(TypeAdapterFactory.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  value.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value  ==  null  ||  value.equals(TypeAdapterFactory.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
4	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  value.equals(TypeAdapterFactory.class))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  value.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  ==  null  ||  value.equals(TypeAdapterFactory.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
5	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  ||  value.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value!=  null  ||  value.equals(TypeAdapterFactory.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  NullPointerException  	24	2	replace
6	[BUG]  [BUGGY]  }  else  if(value!=  null  ||  value.equals(TypeAdapterFactory.class))  {  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  ||  value.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  ||  value.equals(TypeAdapterFactory.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  NullPointerException  	24	2	replace
7	[BUG]  [BUGGY]  }  else  if(type.equals(TypeAdapterFactory.class))  {  [CE]  cannot  find  symbol  type  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(type.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(type.equals(TypeAdapterFactory.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	non-compiled	[CE]  cannot  find  symbol  type	24	None	replace
8	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(fieldType.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(fieldType.equals(TypeAdapterFactory.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
9	[BUG]  [BUGGY]  }  else  if(fieldType.equals(TypeAdapterFactory.class))  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(fieldType.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(fieldType.equals(TypeAdapterFactory.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
10	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!value.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(!value.equals(TypeAdapterFactory.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  NullPointerException  	24	2	replace
11	[BUG]  [BUGGY]  }  else  if(!value.equals(TypeAdapterFactory.class))  {  [FE]  NullPointerException  [FE]              IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!value.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(!value.equals(TypeAdapterFactory.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  NullPointerException  	24	2	replace
12	[BUG]  [BUGGY]  }  else  if(typeAdapter.equals(TypeAdapterFactory.class))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]                IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(typeAdapter.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(typeAdapter.equals(TypeAdapterFactory.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	24	None	replace
13	[BUG]  [BUGGY]  }  else  if(value.class.isAssignableFrom(typeAdapterFactory))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.class.isAssignableFrom(typeAdapterFactory))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.class.isAssignableFrom(typeAdapterFactory))  {	  }    else    if(typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	7	None	replace
14	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(typeAdapterFactory.class))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(typeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isAssignableFrom(typeAdapterFactory.class))  {	  }    else    if(typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
15	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(typeAdapterFactory))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(typeAdapterFactory))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isAssignableFrom(typeAdapterFactory))  {	  }    else    if(typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	7	None	replace
16	[BUG]  [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isAssignableFrom(value))  {	  }    else    if(typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
17	[BUG]  [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterFactory.class))  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(typeAdapterFactory.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterFactory.class))  {	  }    else    if(typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
18	[BUG]  [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterFactory))  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterFactory))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(typeAdapterFactory.class.isAssignableFrom(value)||  value.isAssignableFrom(typeAdapterFactory))  {	  }    else    if(typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
19	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	1	None	add
20	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	compilable	  [FE]  NullPointerException  	1	2	add
21	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	compilable	  [FE]  NullPointerException  	1	2	add
22	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  incompatible  types  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  incompatible  types	1	None	add
23	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	1	None	add
24	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]            IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	1	None	add
25	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  inconvertible  types  [FE]              IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  inconvertible  types	1	None	add
26	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	8	None	add
27	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	8	None	add
28	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  incompatible  types	8	None	add
29	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	8	None	add
30	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	11	2	replace
31	[BUG]  [BUGGY]  }  else  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	11	2	replace
32	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value  ==  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	11	2	replace
33	[BUG]  [BUGGY]  }  else  if(value  ==  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  ==  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	11	2	replace
34	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  ==  null  ||  typeAdapterFactory.isAssignableFrom(value))  {	  }    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	11	None	replace
35	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
36	[BUG]  [BUGGY]  }  else  if(value!=  null  ||  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  ||  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  ||  typeAdapterFactory.isAssignableFrom(value))  {	  }    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	11	None	replace
37	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  (Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  (Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =  (Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	5	None	add
38	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  inconvertible  types  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  inconvertible  types	5	None	add
39	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	5	None	add
40	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	5	None	add
41	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	10	None	add
42	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	10	None	add
43	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  incompatible  types	10	None	add
44	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	10	None	add
45	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	10	None	add
46	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  [CE]  inconvertible  types  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;	  	non-compiled	[CE]  inconvertible  types	10	None	add
47	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	16	None	add
48	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  inconvertible  types  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  inconvertible  types	16	None	add
49	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	16	None	add
50	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapterFactory  <?>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  type  TypeAdapterFactory  does  not  take  parameters  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  TypeAdapterFactory  <?>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    TypeAdapterFactory  <?>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  type  TypeAdapterFactory  does  not  take  parameters	16	None	add
51	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.equals(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	23	None	add
52	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}    else    if(value.equals(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	compilable	  [FE]  NullPointerException  	23	2	add
53	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.equals(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	compilable	  [FE]  NullPointerException  	23	2	add
54	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  incompatible  types  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.equals(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  incompatible  types	23	None	add
55	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.equals(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	23	None	add
56	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]            IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.equals(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	23	None	add
57	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  inconvertible  types  [FE]              IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.equals(TypeAdapterFactory.class))    {    TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  inconvertible  types	23	None	add
58	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	3	None	add
59	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  (Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =  (Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	compilable	  [FE]  NullPointerException  	3	2	add
60	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  (Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  (Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =  (Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	compilable	  [FE]  NullPointerException  	3	2	add
61	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	3	None	add
62	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  inconvertible  types  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  inconvertible  types	3	None	add
63	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.set(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.set(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.set(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
64	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value,  fieldType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value,  fieldType))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value,  fieldType))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	18	None	replace
65	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType,  value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType,  value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType,  value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	18	None	replace
66	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(type,  fieldType))  {  [CE]  cannot  find  symbol  type  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(type,  fieldType))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(type,  fieldType))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  cannot  find  symbol  type	18	None	replace
67	[BUG]  [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(fieldType))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(fieldType))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(typeAdapterFactory.class.isAssignableFrom(fieldType))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
68	[BUG]  [BUGGY]  }  else  if(type.isAssignableFrom(TypeAdapterFactory.class))  {  [CE]  cannot  find  symbol  type  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(type.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(type.isAssignableFrom(TypeAdapterFactory.class))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  cannot  find  symbol  type	18	None	replace
69	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType,  annotation))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType,  annotation))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType,  annotation))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	18	None	replace
70	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  &&  typeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
71	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  typeAdapterFactory.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  typeAdapterFactory.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  &&  typeAdapterFactory.isAssignableFrom(value))  {	  }    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	20	None	replace
72	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  typeAdapter.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  typeAdapter.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  &&  typeAdapter.isAssignableFrom(value))  {	  }    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
73	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <  TypeAdapterFactory>)  {  [CE]  illegal  generic  type  for  instanceof  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <  TypeAdapterFactory>)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  instanceof  Class  <  TypeAdapterFactory>)  {	  }    else    if(value    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  generic  type  for  instanceof	22	None	replace
74	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>  ||  value  instanceof  TypeAdapterFactory)  {  [CE]  inconvertible  types  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>  ||  value  instanceof  TypeAdapterFactory)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  instanceof  Class  <?>  ||  value  instanceof  TypeAdapterFactory)  {	  }    else    if(value    instanceof    Class    <?>)    {    	non-compiled	[CE]  inconvertible  types	22	None	replace
75	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>  ||  value  instanceof  Class  <  TypeAdapterFactory>)  {  [CE]  illegal  generic  type  for  instanceof  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>  ||  value  instanceof  Class  <  TypeAdapterFactory>)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  instanceof  Class  <?>  ||  value  instanceof  Class  <  TypeAdapterFactory>)  {	  }    else    if(value    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  generic  type  for  instanceof	22	None	replace
76	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>  ||  value  instanceof  Class  <?>)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value  instanceof  Class  <?>  ||  value  instanceof  Class  <?>)  {	  }    else    if(value    instanceof    Class    <?>)    {    	compilable	  [FE]  NullPointerException  	22	2	replace
77	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>  ||  value  instanceof  Class  <?>)  {  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>  ||  value  instanceof  Class  <?>)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  instanceof  Class  <?>  ||  value  instanceof  Class  <?>)  {	  }    else    if(value    instanceof    Class    <?>)    {    	compilable	  [FE]  NullPointerException  	22	2	replace
78	[BUG]  [BUGGY]  }  else  if(value  instanceof  TypeAdapterFactory  <?>)  {  [CE]  type  TypeAdapterFactory  does  not  take  parameters  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  TypeAdapterFactory  <?>)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  instanceof  TypeAdapterFactory  <?>)  {	  }    else    if(value    instanceof    Class    <?>)    {    	non-compiled	[CE]  type  TypeAdapterFactory  does  not  take  parameters	22	None	replace
79	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  ==?>)  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  ==?>)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  instanceof  Class  ==?>)  {	  }    else    if(value    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
80	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.isArray())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
81	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.isArray())  {  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.isArray())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
82	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  value.isArray())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
83	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  value.isArray())  {  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  value.isArray())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
84	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isArray()  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.isArray()  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    	compilable	  [FE]  NullPointerException  	9	2	replace
85	[BUG]  [BUGGY]  }  else  if(value.isArray()  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isArray()  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isArray()  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    	compilable	  [FE]  NullPointerException  	9	2	replace
86	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)&&  value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)&&  value.isArray())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
87	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)&&  value.isArray())  {  [FE]  IllegalArgumentException  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)&&  value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)&&  value.isArray())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
88	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapter.isArray())  {  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapter.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapter.isArray())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
89	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	12	None	add
90	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	12	None	add
91	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	12	None	add
92	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  [CE]  inconvertible  types  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;	  	non-compiled	[CE]  inconvertible  types	12	None	add
93	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.isAssignableFrom(TypeAdapterFactory.class))  {	  }    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
94	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.isAssignableFrom(TypeAdapterFactory.class))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.isAssignableFrom(TypeAdapterFactory.class))  {	  }    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
95	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.equals(TypeAdapterFactory.class))  {	  }    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
96	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.equals(TypeAdapterFactory.class))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.equals(TypeAdapterFactory.class))  {	  }    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
97	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(!value.isAssignableFrom(TypeAdapterFactory.class))  {	  }    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    	compilable	  [FE]  NullPointerException  	2	2	replace
98	[BUG]  [BUGGY]  }  else  if(!value.isAssignableFrom(TypeAdapterFactory.class))  {  [FE]  NullPointerException  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(!value.isAssignableFrom(TypeAdapterFactory.class))  {	  }    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    	compilable	  [FE]  NullPointerException  	2	2	replace
99	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapterFactory.class))  {	  }    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
100	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapterFactory.class))  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  ==  null  ||  value.isAssignableFrom(TypeAdapterFactory.class))  {	  }    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
101	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.isPrimitive())  {	  }    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
102	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  value.isPrimitive())  {	  }    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
103	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  ||  value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value!=  null  ||  value.isAssignableFrom(TypeAdapterFactory.class))  {	  }    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    	compilable	  [FE]  NullPointerException  	2	2	replace
104	[BUG]  [BUGGY]  }  else  if(value!=  null  ||  value.isAssignableFrom(TypeAdapterFactory.class))  {  [FE]  NullPointerException  [FE]              IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  ||  value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  ||  value.isAssignableFrom(TypeAdapterFactory.class))  {	  }    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    	compilable	  [FE]  NullPointerException  	2	2	replace
105	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  value.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	13	2	replace
106	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  value.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  value.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	13	2	replace
107	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType)||  value.isPrimitive())  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType)||  value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType)||  value.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	13	None	replace
108	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapter.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapter.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapter.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
109	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)&&  value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)&&  value.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	13	2	replace
110	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)&&  value.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)&&  value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)&&  value.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	13	2	replace
111	[BUG]  [BUGGY]  }  else  if(typeAdapter.class.isAssignableFrom(value)||  value.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(typeAdapter.class.isAssignableFrom(value)||  value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(typeAdapter.class.isAssignableFrom(value)||  value.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
112	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	21	None	add
113	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)	21	None	add
114	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeAdapterFactory  <?>  typeAdapterFactory  =(TypeAdapterFactory)value;  [CE]  type  TypeAdapterFactory  does  not  take  parameters  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeAdapterFactory  <?>  typeAdapterFactory  =(TypeAdapterFactory)value;  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    TypeAdapterFactory  <?>  typeAdapterFactory  =(TypeAdapterFactory)value;	  	non-compiled	[CE]  type  TypeAdapterFactory  does  not  take  parameters	21	None	add
115	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  [CE]  inconvertible  types  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;	  	non-compiled	[CE]  inconvertible  types	21	None	add
116	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	21	None	add
117	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value.clone();  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value.clone();	  	non-compiled	[CE]  clone()  has  protected  access  in  Object	21	None	add
118	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeAdapterFactory  <?>  typeAdapterFactory  =(TypeAdapterFactory)value.clone();  [CE]  type  TypeAdapterFactory  does  not  take  parameters  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeAdapterFactory  <?>  typeAdapterFactory  =(TypeAdapterFactory)value.clone();  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    TypeAdapterFactory  <?>  typeAdapterFactory  =(TypeAdapterFactory)value.clone();	  	non-compiled	[CE]  type  TypeAdapterFactory  does  not  take  parameters	21	None	add
119	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	21	None	add
120	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType)||  TypeToken.class.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType)||  TypeToken.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	17	None	replace
121	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  TypeToken.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	17	2	replace
122	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  TypeToken.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	17	2	replace
123	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
124	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
125	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	17	2	replace
126	[BUG]  [BUGGY]  }  else  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  IllegalArgumentException  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeToken.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	17	2	replace
127	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	17	2	replace
128	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [FE]  IllegalArgumentException  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  TypeToken.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	17	2	replace
129	[BUG]  [BUGGY]  }  else  if(typeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(typeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(typeAdapter.class.isAssignableFrom(value)||  typeAdapter.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
130	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));	      	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	15	None	replace
131	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);	      	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	15	None	replace
132	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	      	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	15	None	replace
133	[BUG]  [BUGGY]  TypeToken  gson  =  typeAdapterFactory.getType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  TypeToken  gson  =  typeAdapterFactory.getType();  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	TypeToken  gson  =  typeAdapterFactory.getType();	      	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	15	None	replace
134	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson);  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            IllegalArgumentException    [CONTEXT]      [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson);	      	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	15	None	replace
135	[BUG]  [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).reset();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]              IllegalArgumentException    [CONTEXT]      [BUGGY]  Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).reset();  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).reset();	      	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	15	None	replace
136	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  gson.getConstructor();  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                IllegalArgumentException    [CONTEXT]      [BUGGY]  ConstructorConstructor  constructorConstructor  =  gson.getConstructor();  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	ConstructorConstructor  constructorConstructor  =  gson.getConstructor();	      	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	15	None	replace
137	[BUG]  [BUGGY]      Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).getAnnotation(fieldType);  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]      Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).getAnnotation(fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	        Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).getAnnotation(fieldType);	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	14	None	add
138	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	19	None	add
139	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	19	None	add
140	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  incompatible  types	19	None	add
141	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	19	None	add
142	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	add
143	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)	19	None	add
144	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	6	2	replace
145	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	6	2	replace
146	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	6	None	replace
147	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	6	2	replace
148	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	6	2	replace
149	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
150	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	6	2	replace
151	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)&&  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	6	2	replace
152	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.equals(TypeAdapterFactory.class)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	6	2	replace
153	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.equals(TypeAdapterFactory.class)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	6	2	replace
154	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	4	2	replace
155	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	4	2	replace
156	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value!=  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	4	2	replace
157	[BUG]  [BUGGY]  }  else  if(value!=  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	4	2	replace
158	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	4	2	replace
159	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	4	2	replace
160	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(fieldType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(fieldType))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(!TypeAdapterFactory.class.isAssignableFrom(fieldType))  {	  }    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	4	None	replace
161	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.Class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  Class  [FE]            IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.Class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||!TypeAdapterFactory.Class.isAssignableFrom(value))  {	  }    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  Class	4	None	replace
162	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {	  }    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	4	2	replace
163	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {	  }    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	4	2	replace
164	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	16	None	add
165	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	compilable	  [FE]  NullPointerException  	16	2	add
166	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	compilable	  [FE]  NullPointerException  	16	2	add
167	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  incompatible  types	16	None	add
168	[BUG]  [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value)&&  value.isAssignableFrom(typeAdapterFactory))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value)&&  value.isAssignableFrom(typeAdapterFactory))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(typeAdapterFactory.class.isAssignableFrom(value)&&  value.isAssignableFrom(typeAdapterFactory))  {	  }    else    if(typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
169	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value),  fieldType)  {  [CE]  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value),  fieldType)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value),  fieldType)  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  	18	None	replace
170	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType),  value)  {  [CE]  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType),  value)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType),  value)  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  	18	None	replace
171	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	6	2	replace
172	[BUG]  [BUGGY]  }  else  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	6	2	replace
173	[BUG]  [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(typeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
174	[BUG]  [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(typeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
175	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	3	None	add
176	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  incompatible  types	3	None	add
177	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	3	None	add
178	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  value  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	3	None	add
179	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	3	None	add
180	[BUG]  [BUGGY]  }  else  if(value!=  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  ||  typeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
181	[BUG]  [BUGGY]  }  else  if(value  >=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  >=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  >=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	11	None	replace
182	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	add
183	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	add
184	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  value.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value!=  null  &&  value.equals(TypeAdapterFactory.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
185	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  value.equals(TypeAdapterFactory.class))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  value.equals(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  &&  value.equals(TypeAdapterFactory.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
186	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  value!=  null)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.equals(TypeAdapterFactory.class)||  value!=  null)  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  NullPointerException  	24	2	replace
187	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  value!=  null)  {  [FE]  NullPointerException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  value!=  null)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.equals(TypeAdapterFactory.class)||  value!=  null)  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  NullPointerException  	24	2	replace
188	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  value  ==  null)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.equals(TypeAdapterFactory.class)||  value  ==  null)  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
189	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  value  ==  null)  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  value  ==  null)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.equals(TypeAdapterFactory.class)||  value  ==  null)  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
190	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  value.equals(TypeToken.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.equals(TypeAdapterFactory.class)||  value.equals(TypeToken.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
191	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  value.equals(TypeToken.class))  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  value.equals(TypeToken.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.equals(TypeAdapterFactory.class)||  value.equals(TypeToken.class))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
192	[BUG]  [BUGGY]      Validate.notNull(value);  [CE]  cannot  find  symbol  Validate  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]      Validate.notNull(value);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	        Validate.notNull(value);	  	non-compiled	[CE]  cannot  find  symbol  Validate	14	None	add
193	[BUG]  [BUGGY]      Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(scope,  fieldType);  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]      Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(scope,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	        Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(scope,  fieldType);	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	14	None	add
194	[BUG]  [BUGGY]      Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(value,  fieldType);  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]      Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(value,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	        Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(value,  fieldType);	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	14	None	add
195	[BUG]  [BUGGY]      Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).resolve(gson,  fieldType);  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]      Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).resolve(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	        Gson  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).resolve(gson,  fieldType);	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	14	None	add
196	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  incompatible  types  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  incompatible  types	12	None	add
197	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>  &&  fieldType.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>  &&  fieldType.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  instanceof  Class  <?>  &&  fieldType.isPrimitive())  {	  }    else    if(value    instanceof    Class    <?>)    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
198	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>  &&  fieldType!=  null)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value  instanceof  Class  <?>  &&  fieldType!=  null)  {	  }    else    if(value    instanceof    Class    <?>)    {    	compilable	  [FE]  NullPointerException  	22	2	replace
199	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>  &&  fieldType!=  null)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>  &&  fieldType!=  null)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  instanceof  Class  <?>  &&  fieldType!=  null)  {	  }    else    if(value    instanceof    Class    <?>)    {    	compilable	  [FE]  NullPointerException  	22	2	replace
200	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	5	None	add
201	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
202	[BUG]  [BUGGY]  }  else  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
203	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value!=  null  &&  value.isAssignableFrom(TypeAdapterFactory.class))  {	  }    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
204	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  value.isAssignableFrom(TypeAdapterFactory.class))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  &&  value.isAssignableFrom(TypeAdapterFactory.class))  {	  }    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
205	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	1	None	add
206	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	1	None	add
207	[BUG]  [BUGGY]  }  else  if(value  >=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  >=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  >=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	20	None	replace
208	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.Class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  Class  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.Class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  &&  TypeAdapterFactory.Class.isAssignableFrom(value))  {	  }    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  Class	20	None	replace
209	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.equals(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	23	None	add
210	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.equals(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  value  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	23	None	add
211	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.equals(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  value  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	23	None	add
212	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.equals(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	23	None	add
213	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	compilable	  [FE]  NullPointerException  	13	2	replace
214	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	compilable	  [FE]  NullPointerException  	13	2	replace
215	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isPrimitive())  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	13	None	replace
216	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  fieldType.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  fieldType.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  fieldType.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
217	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeToken  <?>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeToken  <?>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    TypeToken  <?>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	21	None	add
218	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeToken  <?>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeToken  <?>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    TypeToken  <?>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	21	None	add
219	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeToken  <?>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeToken  <?>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    TypeToken  <?>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	21	None	add
220	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeToken  <?>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeToken  <?>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    TypeToken  <?>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	21	None	add
221	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeToken  <?>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeToken  <?>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    TypeToken  <?>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	21	None	add
222	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeToken  <?>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  TypeToken  <?>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    TypeToken  <?>  typeAdapterFactory  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	21	None	add
223	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isConstructor())  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isConstructor())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(!TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isConstructor())  {	  }    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	4	None	replace
224	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    	compilable	  [FE]  NullPointerException  	9	2	replace
225	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    	compilable	  [FE]  NullPointerException  	9	2	replace
226	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isArray())  {  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  typeAdapterFactory.isArray())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	9	None	replace
227	[BUG]  [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value)&&  value.isArray())  {  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value)&&  value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(typeAdapterFactory.class.isAssignableFrom(value)&&  value.isArray())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
228	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	compilable	  [FE]  NullPointerException  	10	2	add
229	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	compilable	  [FE]  NullPointerException  	10	2	add
230	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  value  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	10	None	add
231	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    ==    null    ||    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	10	None	add
232	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {	  }    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	20	2	replace
233	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {	  }    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	20	2	replace
234	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  value.startsWith( ".class "))  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  value.startsWith( ".class "))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.equals(TypeAdapterFactory.class)||  value.startsWith( ".class "))  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
235	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)&&  value!=  null)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.equals(TypeAdapterFactory.class)&&  value!=  null)  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
236	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)&&  value!=  null)  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)&&  value!=  null)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.equals(TypeAdapterFactory.class)&&  value!=  null)  {	  }    else    if(value.equals(TypeAdapterFactory.class))    {    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
237	[BUG]  [BUGGY]  }  else  if(value.equals(typeAdapterFactory.class))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(typeAdapterFactory.class))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.equals(typeAdapterFactory.class))  {	  }    else    if(typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
238	[BUG]  [BUGGY]  }  else  if(value,  typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  ')'  expected  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value,  typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value,  typeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(typeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
239	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.isAssignableFrom(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	1	None	add
240	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>  &&((  Class  <  TypeAdapterFactory>)value).isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value  instanceof  Class  <?>  &&((  Class  <  TypeAdapterFactory>)value).isArray())  {	  }    else    if(value    instanceof    Class    <?>)    {    	compilable	  [FE]  IllegalArgumentException  	22	2	replace
241	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>  &&((  Class  <  TypeAdapterFactory>)value).isArray())  {  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>  &&((  Class  <  TypeAdapterFactory>)value).isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  instanceof  Class  <?>  &&((  Class  <  TypeAdapterFactory>)value).isArray())  {	  }    else    if(value    instanceof    Class    <?>)    {    	compilable	  [FE]  IllegalArgumentException  	22	2	replace
242	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>  &&((  Class  <  TypeAdapterFactory>)value).getClass().isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value  instanceof  Class  <?>  &&((  Class  <  TypeAdapterFactory>)value).getClass().isArray())  {	  }    else    if(value    instanceof    Class    <?>)    {    	compilable	  [FE]  IllegalArgumentException  	22	2	replace
243	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>  &&((  Class  <  TypeAdapterFactory>)value).getClass().isArray())  {  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>  &&((  Class  <  TypeAdapterFactory>)value).getClass().isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  instanceof  Class  <?>  &&((  Class  <  TypeAdapterFactory>)value).getClass().isArray())  {	  }    else    if(value    instanceof    Class    <?>)    {    	compilable	  [FE]  IllegalArgumentException  	22	2	replace
244	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>  &&((  Class  <  TypeAdapterFactory>)value).isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value  instanceof  Class  <?>  &&((  Class  <  TypeAdapterFactory>)value).isPrimitive())  {	  }    else    if(value    instanceof    Class    <?>)    {    	compilable	  [FE]  IllegalArgumentException  	22	2	replace
245	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>  &&((  Class  <  TypeAdapterFactory>)value).isPrimitive())  {  [FE]  IllegalArgumentException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>  &&((  Class  <  TypeAdapterFactory>)value).isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  instanceof  Class  <?>  &&((  Class  <  TypeAdapterFactory>)value).isPrimitive())  {	  }    else    if(value    instanceof    Class    <?>)    {    	compilable	  [FE]  IllegalArgumentException  	22	2	replace
246	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value.equals(TypeAdapterFactory.class))    {    Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	23	None	add
247	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  }  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  }  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  }	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	21	None	add
248	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  }  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  }	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
249	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  }  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  }	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
250	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  }  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  }  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  }	  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	21	None	add
251	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)  [CE]  ')'  expected  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)	  	non-compiled	[CE]  ')'  expected	21	None	add
252	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct()  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct()  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value    instanceof    Class    <?>)    {    if(value  instanceof  Class  <?>)  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct()	  	non-compiled	[CE]  ';'  expected	21	None	add
253	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value!=  null  &&!TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	4	2	replace
254	[BUG]  [BUGGY]  }  else  if(value!=  null  &&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  &&!TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	4	2	replace
255	[BUG]  [BUGGY]  }  else  if(typeAdapter  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(typeAdapter  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(typeAdapter  ==  null  ||!TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	4	None	replace
256	[BUG]  [BUGGY]      Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]      Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	        Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory));	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
257	[BUG]  [BUGGY]      Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]      Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	        Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
258	[BUG]  [BUGGY]      Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]      Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	        Constructor  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
259	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType)&&  value  instanceof  Class  <  TypeAdapterFactory>)  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType)&&  value  instanceof  Class  <  TypeAdapterFactory>)  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType)&&  value  instanceof  Class  <  TypeAdapterFactory>)  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(fieldType))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	18	None	replace
260	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.isArray())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
261	[BUG]  [BUGGY]  }  else  if(value.isArray())  {  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isArray())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isArray())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
262	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(value!=    null    &&    TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	add
263	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isArray())    {    Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value;  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
264	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	12	None	add
265	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isPrimitive()  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.isPrimitive()  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	compilable	  [FE]  NullPointerException  	13	2	replace
266	[BUG]  [BUGGY]  }  else  if(value.isPrimitive()  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isPrimitive()  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isPrimitive()  ||  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	compilable	  [FE]  NullPointerException  	13	2	replace
267	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	compilable	  [FE]  NullPointerException  	13	2	replace
268	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	compilable	  [FE]  NullPointerException  	13	2	replace
269	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	13	2	replace
270	[BUG]  [BUGGY]  }  else  if(value.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.isPrimitive())  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isPrimitive())  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    value.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	13	2	replace
271	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  ==  null  ||  typeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeAdapterFactory.class.isAssignableFrom(value))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
272	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}    else    if(!TypeAdapterFactory.class.isAssignableFrom(value))    {    Class  <  TypeAdapterFactory>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	3	None	add
273	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
274	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  NullPointerException  	17	2	replace
275	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.equals(TypeAdapterFactory.class)||  TypeToken.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	17	2	replace
276	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  IllegalArgumentException  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]    Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(     "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.   ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.equals(TypeAdapterFactory.class)||  TypeToken.class.isAssignableFrom(value))  {	  }    else    if(TypeAdapterFactory.class.isAssignableFrom(value)||    TypeToken.class.isAssignableFrom(value))    {    	compilable	  [FE]  IllegalArgumentException  	17	2	replace
