bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  IllegalArgumentException  	17	2	replace
2	[BUG]  [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  [FE]  IllegalArgumentException  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.isAssignableFrom(TypeAdapterFactory.class))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  IllegalArgumentException  	17	2	replace
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  IllegalArgumentException  	17	2	replace
4	[BUG]  [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  IllegalArgumentException  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(!TypeAdapterFactory.class.isAssignableFrom(value))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  IllegalArgumentException  	17	2	replace
5	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	17	2	replace
6	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeAdapterFactory.class.isAssignableFrom(value))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	17	2	replace
7	[BUG]  [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(typeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(typeAdapterFactory.class.isAssignableFrom(value))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
8	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	17	2	replace
9	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  [FE]  NullPointerException  [FE]            NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isArray())  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	17	2	replace
10	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	17	2	replace
11	[BUG]  [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]              NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  ==  null  ||  TypeAdapterFactory.class.isAssignableFrom(value))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	17	2	replace
12	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	17	2	replace
13	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  [FE]  NullPointerException  [FE]                NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  value.isPrimitive())  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	17	2	replace
14	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  NullPointerException  [CONTEXT]    [BUGGY]    [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	  	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  IllegalArgumentException  	17	2	replace
15	[BUG]  [BUGGY]    [FE]  IllegalArgumentException  [FE]                  NullPointerException  [CONTEXT]    [BUGGY]    [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	  	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  IllegalArgumentException  	17	2	replace
16	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	17	2	replace
17	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(value)||  TypeToken.class.isAssignableFrom(value))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	17	2	replace
18	[BUG]  [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(TypeAdapterFactory.class.isAssignableFrom(fieldType))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	17	None	replace
19	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	17	2	replace
20	[BUG]  [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [FE]  NullPointerException  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value!=  null  &&  TypeAdapterFactory.class.isAssignableFrom(value))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	17	2	replace
21	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value  instanceof  Class  <?>)  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	17	2	replace
22	[BUG]  [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  [FE]  NullPointerException  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(value  instanceof  Class  <?>)  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value  instanceof  Class  <?>)  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  NullPointerException  	17	2	replace
23	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	add	}  else  if(value.equals(TypeAdapterFactory.class))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  IllegalArgumentException  	17	2	replace
24	[BUG]  [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  [FE]  IllegalArgumentException  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  }  else  if(value.equals(TypeAdapterFactory.class))  {  [BUGGY]  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	58	58	2	replace	}  else  if(value.equals(TypeAdapterFactory.class))  {	}  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  	compilable	  [FE]  IllegalArgumentException  	17	2	replace
