bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType;  [CE]  inconvertible  types  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType;  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)fieldType;	Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  	non-compiled	[CE]  inconvertible  types	19	None	replace
2	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.clone();  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.clone();	Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  	non-compiled	[CE]  clone()  has  protected  access  in  Object	19	None	replace
3	[BUG]  [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  [CE]  inconvertible  types  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	TypeAdapterFactory  typeAdapterFactory  =(TypeAdapterFactory)value;	Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  	non-compiled	[CE]  inconvertible  types	19	None	replace
4	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  [CE]  inconvertible  types  [FE]          NullPointerException  [CONTEXT]    [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapter;	Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  	non-compiled	[CE]  inconvertible  types	19	None	replace
5	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.value;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]            NullPointerException  [CONTEXT]    [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.value;  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)this.value;	Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	19	None	replace
6	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  typeAdapterFactory  [FE]              NullPointerException  [CONTEXT]    [BUGGY]    [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	  	Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	19	None	replace
7	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory;  [CE]  variable  typeAdapterFactory  might  not  have  been  initialized  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory;  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)typeAdapterFactory;	Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  	non-compiled	[CE]  variable  typeAdapterFactory  might  not  have  been  initialized	19	None	replace
8	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.getAnnotation();  [CE]  method  getAnnotation  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.getAnnotation();  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)value.getAnnotation();	Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  	non-compiled	[CE]  method  getAnnotation  in  class  Class<T>  cannot  be  applied  to  given  types;	19	None	replace
9	[BUG]  [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.typeAdapterFactory;  [CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.typeAdapterFactory;  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	59	59	2	replace	Class  <  TypeAdapterFactory>  typeAdapterFactory  =(Class  <  TypeAdapterFactory>)super.typeAdapterFactory;	Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  	non-compiled	[CE]  non-static  variable  super  cannot  be  referenced  from  a  static  context	19	None	replace
