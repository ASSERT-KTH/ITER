bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [BUGGY]  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()    .create(gson,  fieldType);  	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	21	None	replace
2	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  typeAdapterFactory).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  typeAdapterFactory).construct().create(gson,  fieldType);  [BUGGY]  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  typeAdapterFactory).construct().create(gson,  fieldType);	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()    .create(gson,  fieldType);  	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	21	None	replace
3	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()    .create(gson,  fieldType);  	non-compiled	[CE]  ';'  expected	21	None	replace
4	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  GETPROP  [FE]          NullPointerException  [CONTEXT]    [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  typeAdapterFactory);	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()    .create(gson,  fieldType);  	non-compiled	[CE]  cannot  find  symbol  GETPROP	21	None	replace
5	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_ARRAY  [FE]            NullPointerException  [CONTEXT]    [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY).construct().create(gson,  fieldType);  [BUGGY]  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY).construct().create(gson,  fieldType);	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()    .create(gson,  fieldType);  	non-compiled	[CE]  cannot  find  symbol  TYPE_ARRAY	21	None	replace
6	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]              NullPointerException  [CONTEXT]    [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME);  [BUGGY]  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME);	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()    .create(gson,  fieldType);  	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	21	None	replace
7	[BUG]  [BUGGY]    [CE]  variable  typeAdapter  might  not  have  been  initialized  [FE]                NullPointerException  [CONTEXT]    [BUGGY]    [BUGGY]  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	  	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()    .create(gson,  fieldType);  	non-compiled	[CE]  variable  typeAdapter  might  not  have  been  initialized	21	None	replace
8	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  GETPROP  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP).construct().create(gson,  fieldType);  [BUGGY]  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP).construct().create(gson,  fieldType);	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()    .create(gson,  fieldType);  	non-compiled	[CE]  cannot  find  symbol  GETPROP	21	None	replace
9	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()    .create(gson,  fieldType);  	non-compiled	[CE]  ';'  expected	21	None	replace
10	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  GETPROP  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);  [BUGGY]  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()    .create(gson,  fieldType);  	non-compiled	[CE]  cannot  find  symbol  GETPROP	21	None	replace
11	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [BUGGY]  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()    .create(gson,  fieldType);  	non-compiled	[CE]  ';'  expected	21	None	replace
12	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  fieldType);  [BUGGY]  .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(   "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference. ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  fieldType);	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()    .create(gson,  fieldType);  	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	21	None	replace
