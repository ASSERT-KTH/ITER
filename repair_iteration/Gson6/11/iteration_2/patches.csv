bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	43	None	replace
2	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	43	None	replace
3	[BUG]  [BUGGY]  typeAdapter  =  constructorFactory.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorFactory.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorFactory.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	43	None	replace
4	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.SETPROP,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	53	None	replace
5	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  annotation).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  SETPROP  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  annotation).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  annotation).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.SETPROP,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  SETPROP	53	None	replace
6	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  typeAdapter).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  typeAdapter).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  typeAdapter).construct().create(gson,  fieldType);	  typeAdapter    =    typeAdapterFactory.get(TypeToken.FIELD_NAME,    constructorConstructor).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	44	None	replace
7	[BUG]  [BUGGY]  typeAdapter  =  typeAdapterFactory.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  constructorConstructor);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  typeAdapterFactory.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  typeAdapterFactory.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  constructorConstructor);	  typeAdapter    =    typeAdapterFactory.get(TypeToken.FIELD_NAME,    constructorConstructor).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	44	None	replace
8	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  typeToken).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  typeToken).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  typeToken).construct().create(gson,  fieldType);	  typeAdapter    =    typeAdapterFactory.get(TypeToken.FIELD_NAME,    constructorConstructor).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	44	None	replace
9	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  typeFactory).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  typeFactory).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  typeFactory).construct().create(gson,  fieldType);	  typeAdapter    =    typeAdapterFactory.get(TypeToken.FIELD_NAME,    constructorConstructor).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	44	None	replace
10	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  typeName).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  typeName).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  typeName).construct().create(gson,  fieldType);	  typeAdapter    =    typeAdapterFactory.get(TypeToken.FIELD_NAME,    constructorConstructor).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	44	None	replace
11	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
12	[BUG]  [BUGGY]  AnnotationTypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
13	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
14	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
15	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_NAME,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_NAME  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_NAME,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_NAME,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_NAME	29	None	replace
16	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_NAME),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_NAME),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_NAME),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	29	None	replace
17	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)?    fieldType    :    null).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	73	None	replace
18	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)?    fieldType    :    null).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	73	None	replace
19	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)?    fieldType    :    null).construct().create(gson,    fieldType);    	non-compiled	[CE]  	73	None	replace
20	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)?    fieldType    :    null).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	73	None	replace
21	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct();  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)?    fieldType    :    null).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	73	None	replace
22	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  NON_OBJECT).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  NON_OBJECT).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  NON_OBJECT).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)?    fieldType    :    null).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	73	None	replace
23	[BUG]  [BUGGY]  typeAdapter  =  annotation.get(TypeToken.FIELD_NAME,  constructorConstructor);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  annotation.get(TypeToken.FIELD_NAME,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  annotation.get(TypeToken.FIELD_NAME,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    annotation);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	8	None	replace
24	[BUG]  [BUGGY]  typeAdapter  =  annotation.get(TypeToken.FIELD_NAME);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  annotation.get(TypeToken.FIELD_NAME);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  annotation.get(TypeToken.FIELD_NAME);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    annotation);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	8	None	replace
25	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  gson);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  gson);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    annotation);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	8	None	replace
26	[BUG]  [BUGGY]  typeAdapter  =  context.get(TypeToken.FIELD_NAME,  annotation);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  context.get(TypeToken.FIELD_NAME,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  context.get(TypeToken.FIELD_NAME,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    annotation);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	8	None	replace
27	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  fieldType);	  typeAdapter    =    constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	85	None	replace
28	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  annotation);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  annotation);	  typeAdapter    =    constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	85	None	replace
29	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  fieldType);	  typeAdapter    =    constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	85	None	replace
30	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType));  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType));	  typeAdapter    =    constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	85	None	replace
31	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);	  typeAdapter    =    constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	85	None	replace
32	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  gson);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  gson);	  typeAdapter    =    constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	85	None	replace
33	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.OBJECTLIT,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  OBJECTLIT  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.OBJECTLIT,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.OBJECTLIT,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.OBJECTLIT).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  OBJECTLIT	18	None	replace
34	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ANNOTATION).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  ANNOTATION  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ANNOTATION).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.ANNOTATION).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.OBJECTLIT).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  ANNOTATION	18	None	replace
35	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.OBJECTLIT),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.OBJECTLIT),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.OBJECTLIT),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.OBJECTLIT).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	18	None	replace
36	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  ASSIGN  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.ASSIGN).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  ASSIGN	71	None	replace
37	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  ASSIGN  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN)?  null  :  constructorConstructor.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.ASSIGN).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  ASSIGN	71	None	replace
38	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN).construct(),  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN).construct(),  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN).construct(),  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.ASSIGN).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	71	None	replace
39	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.ASSIGN).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	71	None	replace
40	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.ASSIGN).construct().create(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	71	None	replace
41	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType);	  typeAdapter    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	23	None	replace
42	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(genson,  fieldType);  [CE]  cannot  find  symbol  genson  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor(genson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(genson,  fieldType);	  typeAdapter    =    constructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol  genson	23	None	replace
43	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(fieldType);  [CE]  cannot  find  symbol  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(fieldType);	  typeAdapter    =    constructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
44	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(fieldType,  gson);  [CE]  cannot  find  symbol  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor(fieldType,  gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(fieldType,  gson);	  typeAdapter    =    constructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
45	[BUG]  [BUGGY]  typeAdapter  =  getTypeAdapterConstructor(gson);  [CE]  cannot  find  symbol  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  getTypeAdapterConstructor(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  getTypeAdapterConstructor(gson);	  typeAdapter    =    constructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
46	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ATTRIBUTE),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ATTRIBUTE),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ATTRIBUTE),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ATTRIBUTE).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	84	None	replace
47	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ATTRIBUTE,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_ATTRIBUTE  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ATTRIBUTE,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ATTRIBUTE,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ATTRIBUTE).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_ATTRIBUTE	84	None	replace
48	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.SETPROP).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	15	None	replace
49	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	58	None	replace
50	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  EMPTY  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  EMPTY	58	None	replace
51	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY).construct(),  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY).construct(),  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY).construct(),  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	58	None	replace
52	[BUG]  [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.EMPTY).construct().create(gson,  constructorConstructor);  [CE]  cannot  find  symbol  EMPTY  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.EMPTY).construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  fieldType.get(TypeToken.EMPTY).construct().create(gson,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  EMPTY	58	None	replace
53	[BUG]  [BUGGY]  typeAdapter  =  constructor.get(TypeToken.EMPTY).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  EMPTY  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructor.get(TypeToken.EMPTY).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructor.get(TypeToken.EMPTY).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  EMPTY	58	None	replace
54	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.SETPROP,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	67	None	replace
55	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.SETPROP,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  	67	None	replace
56	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.SETPROP,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  	67	None	replace
57	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.SETPROP,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	67	None	replace
58	[BUG]  [BUGGY]  typeAdapter  =  getTypeAdapter(gson,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  getTypeAdapter(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  getTypeAdapter(gson,  fieldType);	  typeAdapter    =    getTypeAdapter(fieldType);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	65	None	replace
59	[BUG]  [BUGGY]  typeAdapter  =  getTypeAdapter(gson);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  getTypeAdapter(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  getTypeAdapter(gson);	  typeAdapter    =    getTypeAdapter(fieldType);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	65	None	replace
60	[BUG]  [BUGGY]  typeAdapter  =  getTypeAdapter(type,  fieldType);  [CE]  cannot  find  symbol  type  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  getTypeAdapter(type,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  getTypeAdapter(type,  fieldType);	  typeAdapter    =    getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  type	65	None	replace
61	[BUG]  [BUGGY]  typeAdapter  =  getTypeAdapter(gson.fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  getTypeAdapter(gson.fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  getTypeAdapter(gson.fieldType);	  typeAdapter    =    getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fieldType	65	None	replace
62	[BUG]  [BUGGY]  typeAdapter  =  getTypeAdapter(fieldType,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  getTypeAdapter(fieldType,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  getTypeAdapter(fieldType,  annotation);	  typeAdapter    =    getTypeAdapter(fieldType);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	65	None	replace
63	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson);    	non-compiled	[CE]  ';'  expected	48	None	replace
64	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  annotation);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	48	None	replace
65	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson);  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson);    	non-compiled	[CE]  ';'  expected	48	None	replace
66	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  typeAdapter);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  typeAdapter);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  typeAdapter);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapter);    	non-compiled	[CE]  ';'  expected	45	None	replace
67	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  typeAdapter);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  typeAdapter);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  typeAdapter);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapter);    	non-compiled	[CE]  ';'  expected	45	None	replace
68	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  null).construct().create(gson,  typeAdapter);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  null).construct().create(gson,  typeAdapter);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  null).construct().create(gson,  typeAdapter);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapter);    	non-compiled	[CE]  ';'  expected	45	None	replace
69	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  typeAdapter);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  typeAdapter);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  typeAdapter);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapter);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	45	None	replace
70	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType,  annotation);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType,  annotation);	  JsonAdapter    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	63	None	replace
71	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(gson,  annotation);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(gson,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  constructorConstructor(gson,  annotation);	  JsonAdapter    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	63	None	replace
72	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  getTypeAdapter(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  typeAdapter  =  getTypeAdapter(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  getTypeAdapter(gson,  fieldType);	  JsonAdapter    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	63	None	replace
73	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  constructor(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  typeAdapter  =  constructor(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  constructor(gson,  fieldType);	  JsonAdapter    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	63	None	replace
74	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType,  reference);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType,  reference);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType,  reference);	  JsonAdapter    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	63	None	replace
75	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  _constructorConstructor(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  typeAdapter  =  _constructorConstructor(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  _constructorConstructor(gson,  fieldType);	  JsonAdapter    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	63	None	replace
76	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  constructorConstructor);  [CE]  cannot  find  symbol  NAME  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  NAME	4	None	replace
77	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  constructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  constructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  constructor	4	None	replace
78	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType.construct().create(gson,  constructorConstructor);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType.construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType.construct().create(gson,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	4	None	replace
79	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	4	None	replace
80	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  context);  [CE]  cannot  find  symbol  context  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  context);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  context);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  context	4	None	replace
81	[BUG]  [BUGGY]  AnnotationTypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
82	[BUG]  [BUGGY]  adapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  adapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	adapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
83	[BUG]  [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	natureAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
84	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.FIELD_NAME);  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.FIELD_NAME);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.FIELD_NAME);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	62	None	replace
85	[BUG]  [BUGGY]  AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
86	[BUG]  [BUGGY]  AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.FIELD_NAME);  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.FIELD_NAME);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.FIELD_NAME);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
87	[BUG]  [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
88	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	16	None	replace
89	[BUG]  [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.STRING).construct().create(gson,  constructorConstructor);  [CE]  cannot  find  symbol  STRING  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.STRING).construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  fieldType.get(TypeToken.STRING).construct().create(gson,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  STRING	16	None	replace
90	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  constructorConstructor);  [CE]  cannot  find  symbol  STRING  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  STRING	16	None	replace
91	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING),  fieldType.construct().create(gson,  constructorConstructor);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING),  fieldType.construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING),  fieldType.construct().create(gson,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	16	None	replace
92	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  context);  [CE]  cannot  find  symbol  context  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  context);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  context);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  context	16	None	replace
93	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)+  2;  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)+  2;  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)+  2;	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)+    1;    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	69	None	replace
94	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)/  1;  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)/  1;  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)/  1;	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)+    1;    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	69	None	replace
95	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)+  0;  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)+  0;  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)+  0;	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)+    1;    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	69	None	replace
96	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)+  3;  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)+  3;  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)+  3;	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)+    1;    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	69	None	replace
97	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)+  4;  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)+  4;  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)+  4;	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)+    1;    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	69	None	replace
98	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  annotation);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeMultiply(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	9	None	replace
99	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(gson,  fieldType));  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(gson,  fieldType));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(gson,  fieldType));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeMultiply(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	9	None	replace
100	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(gson));  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(gson));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(gson));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeMultiply(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	9	None	replace
101	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(type));  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(type));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(type));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeMultiply(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	9	None	replace
102	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType,  annotation));  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType,  annotation));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType,  annotation));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeMultiply(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	9	None	replace
103	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  gson);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  gson);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeMultiply(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	9	None	replace
104	[BUG]  [BUGGY]  nisipy  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  nisipy  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  nisipy  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	nisipy  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  nisipy	79	None	replace
105	[BUG]  [BUGGY]  AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
106	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	79	None	replace
107	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
108	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	50	None	replace
109	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  	50	None	replace
110	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	50	None	replace
111	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	50	None	replace
112	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  annotation).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  annotation).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  annotation).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	50	None	replace
113	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  typeAdapter);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  typeAdapter);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  typeAdapter);	  JsonAdapter    annotation    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	21	None	replace
114	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  null);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  null);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  null);	  JsonAdapter    annotation    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	21	None	replace
115	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  typeToken);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  typeToken);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  typeToken);	  JsonAdapter    annotation    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	21	None	replace
116	[BUG]  [BUGGY]  JsonAdapter  annotation  =  getTypeAdapter(gson,  fieldType);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  getTypeAdapter(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  getTypeAdapter(gson,  fieldType);	  JsonAdapter    annotation    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	21	None	replace
117	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  reference);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  reference);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  reference);	  JsonAdapter    annotation    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	21	None	replace
118	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  Object.class);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  Object.class);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  Object.class);	  JsonAdapter    annotation    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	21	None	replace
119	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  this);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  this);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  this);	  JsonAdapter    annotation    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	21	None	replace
120	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  annotation);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  annotation);	  JsonToken    <?>    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
121	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  getTypeAdapter(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  getTypeAdapter(fieldType);	  JsonToken    <?>    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
122	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  annotation.constructorConstructor(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  annotation.constructorConstructor(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  annotation.constructorConstructor(gson,  fieldType);	  JsonToken    <?>    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
123	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructor(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructor(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructor(gson,  fieldType);	  JsonToken    <?>    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
124	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  annotation);  [CE]  cannot  find  symbol  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  annotation);	  JsonToken    <?>    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
125	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  ConstructorConstructor.construct(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  ConstructorConstructor.construct(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  ConstructorConstructor.construct(gson,  fieldType);	  JsonToken    <?>    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
126	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  fieldType.create(gson,  constructorConstructor);  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  fieldType.create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  fieldType.create(gson,  constructorConstructor);	  Constructor    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
127	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  annotation);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  annotation);	  Constructor    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
128	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  context.constructorConstructor.create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  context.constructorConstructor.create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  context.constructorConstructor.create(gson,  fieldType);	  Constructor    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
129	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorFactory.create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructorFactory.create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorFactory.create(gson,  fieldType);	  Constructor    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
130	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  typeAdapter.create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  typeAdapter.create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  typeAdapter.create(gson,  fieldType);	  Constructor    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
131	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	54	None	replace
132	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	54	None	replace
133	[BUG]  [BUGGY]  typeAdapter  =  constructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  STRING  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  STRING	54	None	replace
134	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  fieldType.construct(),  create(gson,  fieldType);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  fieldType.construct(),  create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  fieldType.construct(),  create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	54	None	replace
135	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  fieldType.getTypeAdapter();  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  fieldType.getTypeAdapter();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  fieldType.getTypeAdapter();	  Constructor    <?>    typeAdapter    =    constructorConstructor.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
136	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.getTypeAdapter(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.getTypeAdapter(fieldType);	  Constructor    <?>    typeAdapter    =    constructorConstructor.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
137	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructor.getTypeAdapter();  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructor.getTypeAdapter();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructor.getTypeAdapter();	  Constructor    <?>    typeAdapter    =    constructorConstructor.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
138	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.findTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.findTypeAdapter(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.findTypeAdapter(fieldType);	  Constructor    <?>    typeAdapter    =    constructorConstructor.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
139	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.getTypeAdapter(gson);  [CE]  cannot  find  symbol  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.getTypeAdapter(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.getTypeAdapter(gson);	  Constructor    <?>    typeAdapter    =    constructorConstructor.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
140	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  typeAdapter.getTypeAdapter();  [CE]  cannot  find  symbol  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  typeAdapter.getTypeAdapter();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  typeAdapter.getTypeAdapter();	  Constructor    <?>    typeAdapter    =    constructorConstructor.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
141	[BUG]  [BUGGY]  adapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  adapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	adapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
142	[BUG]  [BUGGY]  AnnotationTypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
143	[BUG]  [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	natureAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
144	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType);  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	13	None	replace
145	[BUG]  [BUGGY]  AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
146	[BUG]  [BUGGY]  AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
147	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
148	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY),  fieldType.construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY),  fieldType.construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY),  fieldType.construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	83	None	replace
149	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  	83	None	replace
150	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)?  null  :  constructorConstructor.get(TypeToken.TYPE_ARRAY),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)?  null  :  constructorConstructor.get(TypeToken.TYPE_ARRAY),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)?  null  :  constructorConstructor.get(TypeToken.TYPE_ARRAY),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	83	None	replace
151	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)?  null  :  constructorConstructor.get(TypeToken.TYPE_ARRAY,  fieldType.construct().create(gson,  fieldType);  [CE]  ')'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)?  null  :  constructorConstructor.get(TypeToken.TYPE_ARRAY,  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)?  null  :  constructorConstructor.get(TypeToken.TYPE_ARRAY,  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ')'  expected	83	None	replace
152	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY,  fieldType.construct().create(gson,  fieldType));  [CE]  cannot  find  symbol  TYPE_ARRAY  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY,  fieldType.construct().create(gson,  fieldType));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY,  fieldType.construct().create(gson,  fieldType));	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_ARRAY	83	None	replace
153	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)&&  fieldType.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_ARRAY  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)&&  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)&&  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_ARRAY	83	None	replace
154	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);	  TypeAdapter    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	37	None	replace
155	[BUG]  [BUGGY]  if(fieldType!=  null)  {  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }	  TypeAdapter    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	37	None	replace
156	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  annotation).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  annotation).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  annotation).construct().create(gson,  fieldType);	  TypeAdapter    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	37	None	replace
157	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.construct().get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.construct().get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.construct().get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)?    null    :    constructorConstructor.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	60	None	replace
158	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)?    null    :    constructorConstructor.construct().create(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	60	None	replace
159	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.constructor().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.constructor().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.constructor().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)?    null    :    constructorConstructor.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	60	None	replace
160	[BUG]  [BUGGY]  typeAdapter  =  constructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)?    null    :    constructorConstructor.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	60	None	replace
161	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType):  null  :  constructorConstructor.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType):  null  :  constructorConstructor.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType):  null  :  constructorConstructor.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)?    null    :    constructorConstructor.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	60	None	replace
162	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.START_OBJECT,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	66	None	replace
163	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.START_OBJECT,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	66	None	replace
164	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.END_OBJECT,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  END_OBJECT  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.END_OBJECT,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.END_OBJECT,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.START_OBJECT,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  END_OBJECT	66	None	replace
165	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	74	None	replace
166	[BUG]  [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.FOR).construct().create(gson,  constructorConstructor);  [CE]  cannot  find  symbol  FOR  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.FOR).construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  fieldType.get(TypeToken.FOR).construct().create(gson,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FOR	74	None	replace
167	[BUG]  [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.FOR,  constructorConstructor).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FOR  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.FOR,  constructorConstructor).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  fieldType.get(TypeToken.FOR,  constructorConstructor).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FOR	74	None	replace
168	[BUG]  [BUGGY]  typeAdapter  =  constructor.get(TypeToken.FOR,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FOR  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructor.get(TypeToken.FOR,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructor.get(TypeToken.FOR,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FOR	74	None	replace
169	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType),  fieldType.construct(),  create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType),  fieldType.construct(),  create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType),  fieldType.construct(),  create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	74	None	replace
170	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	74	None	replace
171	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	72	None	replace
172	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	72	None	replace
173	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ANNOTATION,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  ANNOTATION  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ANNOTATION,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.ANNOTATION,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  ANNOTATION	72	None	replace
174	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    typeAdapterFactory).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	47	None	replace
175	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)&&  typeAdapterFactory).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)&&  typeAdapterFactory).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)&&  typeAdapterFactory).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    typeAdapterFactory).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	47	None	replace
176	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    typeAdapterFactory).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	47	None	replace
177	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    typeAdapterFactory).construct().create(gson,    fieldType);    	non-compiled	[CE]  	47	None	replace
178	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  annotation);  [CE]  ';'  expected  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    typeAdapterFactory).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	47	None	replace
179	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    typeAdapterFactory).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	47	None	replace
180	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	39	None	replace
181	[BUG]  [BUGGY]  typeAdapter  =  typeAdapterFactory.get(TypeToken.NAME,  fieldType).construct().create(gson,  constructorConstructor);  [CE]  cannot  find  symbol  NAME  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  typeAdapterFactory.get(TypeToken.NAME,  fieldType).construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  typeAdapterFactory.get(TypeToken.NAME,  fieldType).construct().create(gson,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  NAME	39	None	replace
182	[BUG]  [BUGGY]  typeAdapter  =  constructorFactory.get(TypeToken.NAME,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  NAME  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorFactory.get(TypeToken.NAME,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorFactory.get(TypeToken.NAME,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  NAME	39	None	replace
183	[BUG]  [BUGGY]  typeAdapter  =  constructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  NAME  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  NAME	39	None	replace
184	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct(),  typeAdapterFactory.create(gson,  fieldType);  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct(),  typeAdapterFactory.create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct(),  typeAdapterFactory.create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	39	None	replace
185	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	52	None	replace
186	[BUG]  [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.NAME).construct().create(gson,  constructorConstructor);  [CE]  cannot  find  symbol  NAME  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.NAME).construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  fieldType.get(TypeToken.NAME).construct().create(gson,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  NAME	52	None	replace
187	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	52	None	replace
188	[BUG]  [BUGGY]  typeAdapter  =  constructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  NAME  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  NAME	52	None	replace
189	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  annotation);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(gson,  fieldType,  annotation);	  typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
190	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType,  annotation);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType,  annotation);	  typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	20	None	replace
191	[BUG]  [BUGGY]  typeAdapter  =  _constructorConstructor(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  _constructorConstructor(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  _constructorConstructor(gson,  fieldType);	  typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
192	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  reference);  [CE]  cannot  find  symbol  reference  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  reference);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(gson,  fieldType,  reference);	  typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  reference	20	None	replace
193	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(gson,  annotation);  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor(gson,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(gson,  annotation);	  typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
194	[BUG]  [BUGGY]  typeAdapter  =  ConstructorConstructor.construct(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  ConstructorConstructor.construct(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  ConstructorConstructor.construct(gson,  fieldType);	  typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
195	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	41	None	replace
196	[BUG]  [BUGGY]  typeAdapter  =  typeAdapterFactory.get(TypeToken.STRING,  fieldType).construct().create(gson,  constructorConstructor);  [CE]  cannot  find  symbol  STRING  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  typeAdapterFactory.get(TypeToken.STRING,  fieldType).construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  typeAdapterFactory.get(TypeToken.STRING,  fieldType).construct().create(gson,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  STRING	41	None	replace
197	[BUG]  [BUGGY]  typeAdapter  =  constructorFactory.get(TypeToken.STRING,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  STRING  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorFactory.get(TypeToken.STRING,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorFactory.get(TypeToken.STRING,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  STRING	41	None	replace
198	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	41	None	replace
199	[BUG]  [BUGGY]  typeAdapter  =  constructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  STRING  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  STRING	41	None	replace
200	[BUG]  [BUGGY]  JsonAdapter  annotation  =  getTypeAdapter(gson);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  getTypeAdapter(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  getTypeAdapter(gson);	  JsonAdapter    annotation    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	24	None	replace
201	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(fieldType,  gson);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(fieldType,  gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(fieldType,  gson);	  JsonAdapter    annotation    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	24	None	replace
202	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(fieldType);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(fieldType);	  JsonAdapter    annotation    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	24	None	replace
203	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(typeType,  gson);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(typeType,  gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(typeType,  gson);	  JsonAdapter    annotation    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	24	None	replace
204	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(getTypeAdapter(),  gson);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(getTypeAdapter(),  gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(getTypeAdapter(),  gson);	  JsonAdapter    annotation    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	24	None	replace
205	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructor(gson,  fieldType);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                            NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructor(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructor(gson,  fieldType);	  JsonAdapter    annotation    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	24	None	replace
206	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  context);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  context);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  context);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    context);    	non-compiled	[CE]  ';'  expected	2	None	replace
207	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  scope);  [CE]  cannot  find  symbol  scope  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  scope);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  scope);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    context);    	non-compiled	[CE]  cannot  find  symbol  scope	2	None	replace
208	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  construct().create(gson,  context);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  construct().create(gson,  context);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  construct().create(gson,  context);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    context);    	non-compiled	[CE]  ';'  expected	2	None	replace
209	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.SETPROP,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	40	None	replace
210	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  TYPE  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.SETPROP,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  TYPE	40	None	replace
211	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  reference);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  reference);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  reference);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType,    annotation);    	non-compiled	[CE]  ';'  expected	31	None	replace
212	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  FIELD_NAME  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	31	None	replace
213	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType,    annotation);    	non-compiled	[CE]  ';'  expected	31	None	replace
214	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType,  annotation);  }  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType,  annotation);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType,  annotation);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType,    annotation);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	31	None	replace
215	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    typeAdapterFactory.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	42	None	replace
216	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)&&  typeAdapterFactory.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  GETPROP  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)&&  typeAdapterFactory.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)&&  typeAdapterFactory.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    typeAdapterFactory.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  GETPROP	42	None	replace
217	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    typeAdapterFactory.construct().create(gson,    fieldType);    	non-compiled	[CE]  	42	None	replace
218	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    typeAdapterFactory.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	42	None	replace
219	[BUG]  [BUGGY]  typeAdapter  =  constructorFactory.get(TypeToken.GETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorFactory.get(TypeToken.GETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorFactory.get(TypeToken.GETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    typeAdapterFactory.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	42	None	replace
220	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType.construct().create(gson,  fieldType));  [CE]  cannot  find  symbol  FIELD_NAME  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType.construct().create(gson,  fieldType));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType.construct().create(gson,  fieldType));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	1	None	replace
221	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType.construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType.construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType.construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	1	None	replace
222	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  	1	None	replace
223	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	1	None	replace
224	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType.construct().create(gson,  fieldType);  [CE]  ')'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ')'  expected	1	None	replace
225	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType);  [CE]  cannot  find  symbol  FOR  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR);    	non-compiled	[CE]  cannot  find  symbol  FOR	86	None	replace
226	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(typeToken);  [CE]  cannot  find  symbol  typeToken  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(typeToken);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(typeToken);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR);    	non-compiled	[CE]  cannot  find  symbol  typeToken	86	None	replace
227	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.BLOCK);  [CE]  cannot  find  symbol  BLOCK  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.BLOCK);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.BLOCK);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR);    	non-compiled	[CE]  cannot  find  symbol  BLOCK	86	None	replace
228	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  annotation);  [CE]  cannot  find  symbol  FOR  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR);    	non-compiled	[CE]  cannot  find  symbol  FOR	86	None	replace
229	[BUG]  [BUGGY]  typeAdapter  =  constructorFactory.get(TypeToken.FOR);  [CE]  cannot  find  symbol  FOR  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorFactory.get(TypeToken.FOR);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorFactory.get(TypeToken.FOR);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR);    	non-compiled	[CE]  cannot  find  symbol  FOR	86	None	replace
230	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  fieldType.create(gson,  constructorConstructor);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  fieldType.create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  fieldType.create(gson,  constructorConstructor);	  JsonToken    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
231	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  annotation);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  annotation);	  JsonToken    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
232	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  context.constructorConstructor.create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  context.constructorConstructor.create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  context.constructorConstructor.create(gson,  fieldType);	  JsonToken    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
233	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructor.create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructor.create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructor.create(gson,  fieldType);	  JsonToken    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
234	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  typeAdapter.create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  typeAdapter.create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  typeAdapter.create(gson,  fieldType);	  JsonToken    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
235	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	81	None	replace
236	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	81	None	replace
237	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType.construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType.construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType.construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	17	None	replace
238	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  	17	None	replace
239	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	17	None	replace
240	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType,  annotation.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType,  annotation.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType,  annotation.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	17	None	replace
241	[BUG]  [BUGGY]  adapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  adapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	adapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	34	None	replace
242	[BUG]  [BUGGY]  AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapterFactory  reference  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	34	None	replace
243	[BUG]  [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	natureAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	34	None	replace
244	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType);  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	34	None	replace
245	[BUG]  [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	34	None	replace
246	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
247	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	80	None	replace
248	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType,  annotation).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType,  annotation).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType,  annotation).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	80	None	replace
249	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  	80	None	replace
250	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	80	None	replace
251	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  annotation).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  annotation).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  annotation).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	80	None	replace
252	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.START_OBJECT).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	61	None	replace
253	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.END_OBJECT).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  END_OBJECT  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.END_OBJECT).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.END_OBJECT).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.START_OBJECT).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  END_OBJECT	61	None	replace
254	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_ARRAY).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  EXPR_ARRAY  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_ARRAY).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_ARRAY).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  EXPR_ARRAY	70	None	replace
255	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	70	None	replace
256	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	55	None	replace
257	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	55	None	replace
258	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	55	None	replace
259	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType),  fieldType.construct().create(gson);  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType),  fieldType.construct().create(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType),  fieldType.construct().create(gson);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	55	None	replace
260	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECTLIT),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECTLIT),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECTLIT),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_OBJECTLIT).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	27	None	replace
261	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ANNOTATION).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_ANNOTATION  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ANNOTATION).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ANNOTATION).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_OBJECTLIT).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_ANNOTATION	27	None	replace
262	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  fieldType.getTypeToken();  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  fieldType.getTypeToken();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  fieldType.getTypeToken();	  TypeToken    <?>    typeAdapter    =    annotation.getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
263	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  constructorConstructor.getTypeToken();  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  constructorConstructor.getTypeToken();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  constructorConstructor.getTypeToken();	  TypeToken    <?>    typeAdapter    =    annotation.getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
264	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.getTypeToken(fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.getTypeToken(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  annotation.getTypeToken(fieldType);	  TypeToken    <?>    typeAdapter    =    annotation.getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
265	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.getTypeToken().restrictByNotNullOrUndefined();  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.getTypeToken().restrictByNotNullOrUndefined();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  annotation.getTypeToken().restrictByNotNullOrUndefined();	  TypeToken    <?>    typeAdapter    =    annotation.getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
266	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.nullSafe();  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.nullSafe();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  annotation.nullSafe();	  TypeToken    <?>    typeAdapter    =    annotation.getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
267	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.getTypeToken(JsonTypeFactory.class);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.getTypeToken(JsonTypeFactory.class);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  annotation.getTypeToken(JsonTypeFactory.class);	  TypeToken    <?>    typeAdapter    =    annotation.getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
268	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECT),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECT),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECT),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_OBJECT).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	26	None	replace
269	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_STRING),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_STRING),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_STRING),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_STRING).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	28	None	replace
270	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_STRING,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_STRING  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_STRING,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_STRING,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_STRING).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_STRING	28	None	replace
271	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType,  annotation).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType,  annotation).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType,  annotation).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
272	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType).construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
273	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  	3	None	replace
274	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
275	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
276	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
277	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  }  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  }	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	32	None	replace
278	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
279	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.START_OBJECT,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	56	None	replace
280	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.START_OBJECT,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	56	None	replace
281	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.END_OBJECT,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  END_OBJECT  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.END_OBJECT,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.END_OBJECT,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.START_OBJECT,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  END_OBJECT	56	None	replace
282	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  }  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType.construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	38	None	replace
283	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType.construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  	38	None	replace
284	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType.construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	38	None	replace
285	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)&&  fieldType.construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  GETPROP  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)&&  fieldType.construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)&&  fieldType.construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType.construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  GETPROP	38	None	replace
286	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  }  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType.construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	38	None	replace
287	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType.construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  	38	None	replace
288	[BUG]  [BUGGY]  typeAdapter  =  typeAdapter.getTypeAdapter();  [CE]  cannot  find  symbol  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  typeAdapter.getTypeAdapter();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  typeAdapter.getTypeAdapter();	  typeAdapter    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
289	[BUG]  [BUGGY]  typeAdapter  =  annotation.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  annotation.getTypeAdapter(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  annotation.getTypeAdapter(fieldType);	  typeAdapter    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
290	[BUG]  [BUGGY]  typeAdapter  =  fieldType.getTypeAdapter();  [CE]  cannot  find  symbol  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  fieldType.getTypeAdapter();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  fieldType.getTypeAdapter();	  typeAdapter    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
291	[BUG]  [BUGGY]  typeAdapter  =  gson.getTypeAdapter();  [CE]  cannot  find  symbol  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  gson.getTypeAdapter();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  gson.getTypeAdapter();	  typeAdapter    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
292	[BUG]  [BUGGY]  typeAdapter  =  annotation.findTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  annotation.findTypeAdapter(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  annotation.findTypeAdapter(fieldType);	  typeAdapter    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
293	[BUG]  [BUGGY]  typeAdapter  =  annotation.getTypeAdapter(gson);  [CE]  cannot  find  symbol  [FE]                                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  annotation.getTypeAdapter(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  annotation.getTypeAdapter(gson);	  typeAdapter    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
294	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	11	None	replace
295	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	12	None	replace
296	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	12	None	replace
297	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  	12	None	replace
298	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)&&  fieldType.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  GETPROP  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)&&  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)&&  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  GETPROP	12	None	replace
299	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  GETPROP  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  GETPROP	12	None	replace
300	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType),  annotation);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType),  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType),  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeNegate(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	7	None	replace
301	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(gson));  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(gson));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(gson));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeNegate(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	7	None	replace
302	[BUG]  [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType));  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  fieldType.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeNegate(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	7	None	replace
303	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType),  gson);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType),  gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType),  gson);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeNegate(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	7	None	replace
304	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(type));  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(type));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(type));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeNegate(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	7	None	replace
305	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType));  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeNegate(fieldType));    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	replace
306	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECT,  fieldType),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECT,  fieldType),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECT,  fieldType),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_OBJECT,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	30	None	replace
307	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_ARRAY  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_OBJECT,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_ARRAY	30	None	replace
308	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECT,  fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECT,  fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_OBJECT,  fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_OBJECT,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	30	None	replace
309	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_TYPE),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_TYPE),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_TYPE),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_TYPE).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	59	None	replace
310	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_TYPE,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  EXPR_TYPE  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_TYPE,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_TYPE,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_TYPE).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  EXPR_TYPE	59	None	replace
311	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_TYPE).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE	59	None	replace
312	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken(fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  getTypeToken(fieldType);	  TypeToken    <?>    typeAdapter    =    getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	22	None	replace
313	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken(gson);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  getTypeToken(gson);	  TypeToken    <?>    typeAdapter    =    getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	22	None	replace
314	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken(annotation);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken(annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  getTypeToken(annotation);	  TypeToken    <?>    typeAdapter    =    getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	22	None	replace
315	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken().annotation;  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken().annotation;  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  getTypeToken().annotation;	  TypeToken    <?>    typeAdapter    =    getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	22	None	replace
316	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken().type;  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken().type;  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  getTypeToken().type;	  TypeToken    <?>    typeAdapter    =    getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	22	None	replace
317	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken().getJsonType();  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken().getJsonType();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  getTypeToken().getJsonType();	  TypeToken    <?>    typeAdapter    =    getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	22	None	replace
318	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	57	None	replace
319	[BUG]  [BUGGY]  typeAdapter  =  constructorFactory.get(TypeToken.EMPTY,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  EMPTY  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorFactory.get(TypeToken.EMPTY,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorFactory.get(TypeToken.EMPTY,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  EMPTY	57	None	replace
320	[BUG]  [BUGGY]  typeAdapter  =  typeAdapterFactory.get(TypeToken.EMPTY,  fieldType).construct().create(gson,  constructorConstructor);  [CE]  cannot  find  symbol  EMPTY  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  typeAdapterFactory.get(TypeToken.EMPTY,  fieldType).construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  typeAdapterFactory.get(TypeToken.EMPTY,  fieldType).construct().create(gson,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  EMPTY	57	None	replace
321	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	57	None	replace
322	[BUG]  [BUGGY]  typeAdapter  =  constructor.get(TypeToken.EMPTY,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  EMPTY  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructor.get(TypeToken.EMPTY,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructor.get(TypeToken.EMPTY,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  EMPTY	57	None	replace
323	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
324	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	49	None	replace
325	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)&&  fieldType.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)&&  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)&&  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	49	None	replace
326	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  	49	None	replace
327	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	49	None	replace
328	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType,  annotation);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	5	None	replace
329	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType));  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType);    	non-compiled	[CE]  ';'  expected	5	None	replace
330	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  annotation);  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType);    	non-compiled	[CE]  ';'  expected	5	None	replace
331	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	5	None	replace
332	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).restrictByNotNullOrUndefined();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).restrictByNotNullOrUndefined();	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	5	None	replace
333	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(fieldType,  gson);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(fieldType,  gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  constructorConstructor(fieldType,  gson);	  JsonAdapter    typeAdapter    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	64	None	replace
334	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  getTypeAdapter(gson);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  typeAdapter  =  getTypeAdapter(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  getTypeAdapter(gson);	  JsonAdapter    typeAdapter    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	64	None	replace
335	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  constructorConstructor(fieldType);	  JsonAdapter    typeAdapter    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	64	None	replace
336	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  constructor(gson);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  typeAdapter  =  constructor(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  constructor(gson);	  JsonAdapter    typeAdapter    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	64	None	replace
337	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType);  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	68	None	replace
338	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY);  [CE]  cannot  find  symbol  EMPTY  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  EMPTY	68	None	replace
339	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_ARRAY);  [CE]  cannot  find  symbol  EXPR_ARRAY  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_ARRAY);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_ARRAY);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  EXPR_ARRAY	68	None	replace
340	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME);  [CE]  cannot  find  symbol  NAME  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  NAME	68	None	replace
341	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.OBJECTLIT);  [CE]  cannot  find  symbol  OBJECTLIT  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.OBJECTLIT);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.OBJECTLIT);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  OBJECTLIT	68	None	replace
342	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.OBJECT_TYPE);  [CE]  cannot  find  symbol  OBJECT_TYPE  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.OBJECT_TYPE);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.OBJECT_TYPE);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  OBJECT_TYPE	68	None	replace
343	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  typeAdapterFactory);	  TypeAdapter    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	46	None	replace
344	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);	  TypeAdapter    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	46	None	replace
345	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  null).construct().create(gson,  typeAdapterFactory);  [CE]  <identifier>  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  null).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  null).construct().create(gson,  typeAdapterFactory);	  TypeAdapter    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
346	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  typeAdapter);  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  typeAdapter);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  typeAdapter);	  TypeAdapter    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	46	None	replace
347	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ALIASING,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_ALIASING  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ALIASING,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ALIASING,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ALIASING).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_ALIASING	82	None	replace
348	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ALIASING),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ALIASING),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ALIASING),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ALIASING).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	82	None	replace
349	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME  +  2);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME  +  2);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME  +  2);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME    +    1);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	6	None	replace
350	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType  +  1);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType  +  1);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType  +  1);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME    +    1);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	6	None	replace
351	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME  +  1,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME  +  1,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME  +  1,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME    +    1);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	6	None	replace
352	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME  /  1);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME  /  1);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME  /  1);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME    +    1);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	6	None	replace
353	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME  +  3);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME  +  3);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME  +  3);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME    +    1);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	6	None	replace
354	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson);	  TypeAdapter    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	51	None	replace
355	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);  }  [CE]  cannot  find  symbol  GETPROP  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);  }	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  cannot  find  symbol  GETPROP	10	None	replace
356	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.STRING).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.STRING).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.STRING).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING).construct().create(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	16	None	replace
357	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  annotation);  [CE]  cannot  find  symbol  START_OBJECT  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    annotation);    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	8	None	replace
358	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  annotation);  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    annotation);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	8	None	replace
359	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  false).construct().create(gson,  typeAdapter);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  false).construct().create(gson,  typeAdapter);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  false).construct().create(gson,  typeAdapter);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapter);    	non-compiled	[CE]  ';'  expected	45	None	replace
360	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapter.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapter.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapter.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapter);    	non-compiled	[CE]  ';'  expected	45	None	replace
361	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  START  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.START_OBJECT,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  START	66	None	replace
362	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_INT).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_INT  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_INT).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_INT).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_OBJECT).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_INT	26	None	replace
363	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  STRING  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  STRING	54	None	replace
364	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  null).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  null).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  null).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	54	None	replace
365	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	54	None	replace
366	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETNAME).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  SETNAME  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETNAME).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.SETNAME).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.SETPROP).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  SETNAME	15	None	replace
367	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    typeAdapterFactory.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	42	None	replace
368	[BUG]  [BUGGY]  typeAdapter  =  annotation.nullSafe();  [CE]  cannot  find  symbol  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  annotation.nullSafe();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  annotation.nullSafe();	  typeAdapter    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
369	[BUG]  [BUGGY]  typeAdapter  =  reference.getTypeAdapter();  [CE]  cannot  find  symbol  reference  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  reference.getTypeAdapter();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  reference.getTypeAdapter();	  typeAdapter    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol  reference	25	None	replace
370	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR)+  1;  [CE]  cannot  find  symbol  FOR  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR)+  1;  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FOR)+  1;	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR);    	non-compiled	[CE]  cannot  find  symbol  FOR	86	None	replace
371	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR  +  1);  [CE]  cannot  find  symbol  FOR  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR  +  1);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FOR  +  1);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR);    	non-compiled	[CE]  cannot  find  symbol  FOR	86	None	replace
372	[BUG]  [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	34	None	replace
373	[BUG]  [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	34	None	replace
374	[BUG]  [BUGGY]  AnnotationTypeAdapterFactory  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapterFactory  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapterFactory  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	34	None	replace
375	[BUG]  [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  [CE]  not  a  statement  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	34	None	replace
376	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	58	None	replace
377	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY),  fieldType.construct().create(gson,  constructorConstructor);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY),  fieldType.construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY),  fieldType.construct().create(gson,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	58	None	replace
378	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_ARRAY).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  START_ARRAY  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_ARRAY).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_ARRAY).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.START_OBJECT).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  START_ARRAY	61	None	replace
379	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  START  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.START_OBJECT).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  START	61	None	replace
380	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.newInstance();  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.newInstance();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.newInstance();	  Constructor    <?>    typeAdapter    =    constructorConstructor.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
381	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.create(fieldType);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.create(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.create(fieldType);	  Constructor    <?>    typeAdapter    =    constructorConstructor.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
382	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType),  null).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType),  null).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType),  null).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.START_OBJECT,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	56	None	replace
383	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  START  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.START_OBJECT,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  START	56	None	replace
384	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  null).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  null).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  null).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	39	None	replace
385	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	39	None	replace
386	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  false).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  false).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  false).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	39	None	replace
387	[BUG]  [BUGGY]  typeAdapter  =  getTypeAdapter(generator,  fieldType);  [CE]  cannot  find  symbol  generator  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  getTypeAdapter(generator,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  getTypeAdapter(generator,  fieldType);	  typeAdapter    =    getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  generator	65	None	replace
388	[BUG]  [BUGGY]  typeAdapter  =  getTypeAdapter(reference,  fieldType);  [CE]  cannot  find  symbol  reference  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  getTypeAdapter(reference,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  getTypeAdapter(reference,  fieldType);	  typeAdapter    =    getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  reference	65	None	replace
389	[BUG]  [BUGGY]  typeAdapter  =  getTypeAdapter(generateJsonParameterTypes(fieldType));  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  getTypeAdapter(generateJsonParameterTypes(fieldType));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  getTypeAdapter(generateJsonParameterTypes(fieldType));	  typeAdapter    =    getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
390	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeName();  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeName();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  getTypeName();	  TypeToken    <?>    typeAdapter    =    getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	22	None	replace
391	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeDeclaration();  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeDeclaration();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  getTypeDeclaration();	  TypeToken    <?>    typeAdapter    =    getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	22	None	replace
392	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  getType(fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  getType(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  getType(fieldType);	  TypeToken    <?>    typeAdapter    =    getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	22	None	replace
393	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeTypeToken(fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeTypeToken(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  getTypeTypeToken(fieldType);	  TypeToken    <?>    typeAdapter    =    getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	22	None	replace
394	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  reference);  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  reference);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  reference);	  Constructor    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
395	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  null);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  null);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  null);	  Constructor    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
396	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(null,  gson);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(null,  gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(null,  gson);	  JsonAdapter    annotation    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	24	None	replace
397	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructor(gson);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructor(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructor(gson);	  JsonAdapter    annotation    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	24	None	replace
398	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(genon,  fieldType);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(genon,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(genon,  fieldType);	  JsonAdapter    annotation    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	24	None	replace
399	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  true);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  true);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  true);	  JsonAdapter    annotation    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	21	None	replace
400	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  null);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  null);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  null);	  JsonToken    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
401	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  reference);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  reference);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  reference);	  JsonToken    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
402	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorFactory.create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorFactory.create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorFactory.create(gson,  fieldType);	  JsonToken    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
403	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor.findTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor.findTypeAdapter(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorConstructor.findTypeAdapter(fieldType);	  JsonToken    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
404	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  NAME  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)?    null    :    constructorConstructor.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  NAME	60	None	replace
405	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  START_NAME  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)?    null    :    constructorConstructor.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  START_NAME	60	None	replace
406	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.getTypeName();  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.getTypeName();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  annotation.getTypeName();	  TypeToken    <?>    typeAdapter    =    annotation.getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
407	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_NAME),  fieldType.construct().create(gson,  constructorConstructor);  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_NAME),  fieldType.construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_NAME),  fieldType.construct().create(gson,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	29	None	replace
408	[BUG]  [BUGGY]  nisipIgnoreCase(fieldType)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  nisipIgnoreCase(fieldType)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	nisipIgnoreCase(fieldType)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
409	[BUG]  [BUGGY]  aughtExceptionHandler  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  aughtExceptionHandler  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	aughtExceptionHandler  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
410	[BUG]  [BUGGY]  AnnotationTypeAdapterFactory  annotation  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapterFactory  annotation  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapterFactory  annotation  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
411	[BUG]  [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	natureAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
412	[BUG]  [BUGGY]  AnnotationTypeAdapterFactory  annotation  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapterFactory  annotation  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapterFactory  annotation  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
413	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  null).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  null).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  null).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	52	None	replace
414	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	52	None	replace
415	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  null).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  null).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  null).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	72	None	replace
416	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	72	None	replace
417	[BUG]  [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	62	None	replace
418	[BUG]  [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	62	None	replace
419	[BUG]  [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	62	None	replace
420	[BUG]  [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	62	None	replace
421	[BUG]  [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	62	None	replace
422	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  null);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  null);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(gson,  fieldType,  null);	  typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
423	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  value);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  value);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(gson,  fieldType,  value);	  typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
424	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  false);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  false);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(gson,  fieldType,  false);	  typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
425	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  Object.class);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  Object.class);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(gson,  fieldType,  Object.class);	  typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
426	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP)?  null  :  constructorConstructor.get(TypeToken.GETPROP),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP)?  null  :  constructorConstructor.get(TypeToken.GETPROP),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP)?  null  :  constructorConstructor.get(TypeToken.GETPROP),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	17	None	replace
427	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP)&&  fieldType.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  GETPROP  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP)&&  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP)&&  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  GETPROP	17	None	replace
428	[BUG]  [BUGGY]  typeAdapter  =  typeAdapterFactory.get(TypeToken.FIELD_NAME,  fieldType),  constructorConstructor).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  typeAdapterFactory.get(TypeToken.FIELD_NAME,  fieldType),  constructorConstructor).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  typeAdapterFactory.get(TypeToken.FIELD_NAME,  fieldType),  constructorConstructor).construct().create(gson,  fieldType);	  typeAdapter    =    typeAdapterFactory.get(TypeToken.FIELD_NAME,    constructorConstructor).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	44	None	replace
429	[BUG]  [BUGGY]  typeAdapter  =  getTypeAdapterFactory().get(TypeToken.FIELD_NAME,  constructorConstructor).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  getTypeAdapterFactory().get(TypeToken.FIELD_NAME,  constructorConstructor).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  getTypeAdapterFactory().get(TypeToken.FIELD_NAME,  constructorConstructor).construct().create(gson,  fieldType);	  typeAdapter    =    typeAdapterFactory.get(TypeToken.FIELD_NAME,    constructorConstructor).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	44	None	replace
430	[BUG]  [BUGGY]  typeAdapter  =  typeAdapterFactory.get(TypeToken.FIELD_NAME,  annotation).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  typeAdapterFactory.get(TypeToken.FIELD_NAME,  annotation).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  typeAdapterFactory.get(TypeToken.FIELD_NAME,  annotation).construct().create(gson,  fieldType);	  typeAdapter    =    typeAdapterFactory.get(TypeToken.FIELD_NAME,    constructorConstructor).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	44	None	replace
431	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_FIELD_NAME  +  1);  [CE]  cannot  find  symbol  TYPE_FIELD_NAME  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_FIELD_NAME  +  1);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_FIELD_NAME  +  1);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME    +    1);    	non-compiled	[CE]  cannot  find  symbol  TYPE_FIELD_NAME	6	None	replace
432	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  null).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  null).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  null).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	57	None	replace
433	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	57	None	replace
434	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  false).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  false).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  false).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	57	None	replace
435	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY,  fieldType),  construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	57	None	replace
436	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.TYPE_FIELD_NAME);  [CE]  cannot  find  symbol  TYPE_FIELD_NAME  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.TYPE_FIELD_NAME);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.TYPE_FIELD_NAME);	  typeAdapter    =    constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  TYPE_FIELD_NAME	85	None	replace
437	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME  +  1);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME  +  1);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME  +  1);	  typeAdapter    =    constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	85	None	replace
438	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.EXPR_RESULT);  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.EXPR_RESULT);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.EXPR_RESULT);	  typeAdapter    =    constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	85	None	replace
439	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FOR);  [CE]  cannot  find  symbol  FOR  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FOR);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FOR);	  typeAdapter    =    constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FOR	85	None	replace
440	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	50	None	replace
441	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType.construct().create(gson,  constructor);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType.construct().create(gson,  constructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType.construct().create(gson,  constructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	4	None	replace
442	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType).construct().create(gson,  constructorConstructor);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType).construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType).construct().create(gson,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	4	None	replace
443	[BUG]  [BUGGY]  if(fieldType!=  null)  {  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  TypeAdapter    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  	37	None	replace
444	[BUG]  [BUGGY]  final  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  final  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	final  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	  TypeAdapter    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	37	None	replace
445	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson);  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson);	  TypeAdapter    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	37	None	replace
446	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  null).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  null).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  null).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	43	None	replace
447	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  false).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  false).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  false).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	43	None	replace
448	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	43	None	replace
449	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    context);    	non-compiled	[CE]  ';'  expected	2	None	replace
450	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  objectType);  [CE]  cannot  find  symbol  objectType  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  objectType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  objectType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    context);    	non-compiled	[CE]  cannot  find  symbol  objectType	2	None	replace
451	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(null,  gson);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(null,  gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  constructorConstructor(null,  gson);	  JsonAdapter    typeAdapter    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	64	None	replace
452	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD,  FieldUtils.safeNegate(fieldType));  [CE]  cannot  find  symbol  FIELD  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD,  FieldUtils.safeNegate(fieldType));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD,  FieldUtils.safeNegate(fieldType));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeNegate(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD	7	None	replace
453	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType),  null);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType),  null);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType),  null);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeNegate(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	7	None	replace
454	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType),  false);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType),  false);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeNegate(fieldType),  false);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeNegate(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	7	None	replace
455	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  FieldUtils.safeNegate(fieldType));  [CE]  cannot  find  symbol  START_OBJECT  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  FieldUtils.safeNegate(fieldType));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  FieldUtils.safeNegate(fieldType));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeNegate(fieldType));    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	7	None	replace
456	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType,    annotation);    	non-compiled	[CE]  	31	None	replace
457	[BUG]  [BUGGY]  if(typeAdapter  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(typeAdapter  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType,    annotation);    	non-compiled	[CE]  	31	None	replace
458	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  }  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType,    annotation);    	non-compiled	[CE]  ';'  expected	31	None	replace
459	[BUG]  [BUGGY]  if(typeAdapter  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  }  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(typeAdapter  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(typeAdapter  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType,  annotation);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType,    annotation);    	non-compiled	[CE]  ';'  expected	31	None	replace
460	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	49	None	replace
461	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	49	None	replace
462	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	80	None	replace
463	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	80	None	replace
464	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	80	None	replace
465	[BUG]  [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	13	None	replace
466	[BUG]  [BUGGY]  security  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  [CE]  not  a  statement  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	13	None	replace
467	[BUG]  [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  [CE]  not  a  statement  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	13	None	replace
468	[BUG]  [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  [CE]  not  a  statement  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	13	None	replace
469	[BUG]  [BUGGY]  security  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  [CE]  not  a  statement  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	13	None	replace
470	[BUG]  [BUGGY]  security  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  [CE]  not  a  statement  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	13	None	replace
471	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  JsonAdapterFactory.class);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  JsonAdapterFactory.class);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  JsonAdapterFactory.class);	  TypeAdapter    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	46	None	replace
472	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  null);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  null);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  null);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeMultiply(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	9	None	replace
473	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  false);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  false);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  false);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeMultiply(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	9	None	replace
474	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD,  FieldUtils.safeMultiply(fieldType));  [CE]  cannot  find  symbol  FIELD  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD,  FieldUtils.safeMultiply(fieldType));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD,  FieldUtils.safeMultiply(fieldType));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeMultiply(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD	9	None	replace
475	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  FieldUtils.safeMultiply(fieldType));  [CE]  cannot  find  symbol  START_OBJECT  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  FieldUtils.safeMultiply(fieldType));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  FieldUtils.safeMultiply(fieldType));	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeMultiply(fieldType));    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	9	None	replace
476	[BUG]  [BUGGY]  aughtExceptionHandler  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  aughtExceptionHandler  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	aughtExceptionHandler  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
477	[BUG]  [BUGGY]  AnnotationTypeAdapter  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapter  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
478	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson);  }  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson);  }	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
479	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)?    fieldType    :    null).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	73	None	replace
480	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson);	  TypeAdapter    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	51	None	replace
481	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  ASSIGN  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.SETPROP,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  ASSIGN	40	None	replace
482	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  FIELD  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.SETPROP,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  FIELD	40	None	replace
483	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_TYPE,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  EXPR_TYPE  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_TYPE,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_TYPE,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.SETPROP,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  EXPR_TYPE	40	None	replace
484	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType,  null).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType,  null).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType,  null).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	3	None	replace
485	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE	55	None	replace
486	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType).construct().create(gson);  [CE]  cannot  find  symbol  TYPE  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType).construct().create(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE,  fieldType).construct().create(gson);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE	55	None	replace
487	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  reference);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  reference);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  reference);	  JsonToken    <?>    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
488	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  null);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  null);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  null);	  JsonToken    <?>    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
489	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  context);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  context);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  context);	  JsonToken    <?>    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
490	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  value);  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  value);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  value);	  JsonToken    <?>    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
491	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(null,  gson);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor(null,  gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(null,  gson);	  typeAdapter    =    constructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
492	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(null);  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor(null);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(null);	  typeAdapter    =    constructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
493	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson);  }  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson);  }	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
494	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  null).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  null).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  null).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	41	None	replace
495	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	41	None	replace
496	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  false).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  false).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  false).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	41	None	replace
497	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	41	None	replace
498	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  _construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  _construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType),  _construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	41	None	replace
499	[BUG]  [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  annotation);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  annotation);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
500	[BUG]  [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  natureAdapter  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	natureAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  natureAdapter	79	None	replace
501	[BUG]  [BUGGY]  aughtExceptionHandler  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  aughtExceptionHandler  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	aughtExceptionHandler  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	79	None	replace
502	[BUG]  [BUGGY]  nisipIsSynthetic(fieldType)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  [CE]  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  nisipIsSynthetic(fieldType)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	nisipIsSynthetic(fieldType)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
503	[BUG]  [BUGGY]  nisipIsSynthetic(fieldType)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  nisipIsSynthetic(fieldType)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	nisipIsSynthetic(fieldType)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  }	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	79	None	replace
504	[BUG]  [BUGGY]  nisipIsSynthetic()  &&  fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  }  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  nisipIsSynthetic()  &&  fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	nisipIsSynthetic()  &&  fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  }	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	79	None	replace
505	[BUG]  [BUGGY]  nisipHandler  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  nisipHandler  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  nisipHandler  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	nisipHandler  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  nisipHandler	79	None	replace
506	[BUG]  [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	11	None	replace
507	[BUG]  [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	security  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	11	None	replace
508	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  GETPROP  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType.construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  GETPROP	38	None	replace
509	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME),  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	1	None	replace
510	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)&&  fieldType.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)&&  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)&&  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	1	None	replace
511	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType);  [CE]  cannot  find  symbol  START_OBJECT  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	5	None	replace
512	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType  -  1);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType  -  1);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType  -  1);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	5	None	replace
513	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD,  fieldType);  [CE]  cannot  find  symbol  FIELD  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD	5	None	replace
514	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT  +  1);  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT  +  1);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT  +  1);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	68	None	replace
515	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ANNOTATION,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_ANNOTATION  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ANNOTATION,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ANNOTATION,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_OBJECT,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_ANNOTATION	30	None	replace
516	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)?  null  :  constructorConstructor.get(TypeToken.TYPE_ARRAY);  [CE]  cannot  find  symbol  TYPE_ARRAY  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)?  null  :  constructorConstructor.get(TypeToken.TYPE_ARRAY);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)?  null  :  constructorConstructor.get(TypeToken.TYPE_ARRAY);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_ARRAY	83	None	replace
517	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)?  null  :  constructorConstructor.get(TypeToken.TYPE_ARRAY,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_ARRAY  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)?  null  :  constructorConstructor.get(TypeToken.TYPE_ARRAY,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)?  null  :  constructorConstructor.get(TypeToken.TYPE_ARRAY,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_ARRAY	83	None	replace
518	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)?  fieldType  :  fieldType.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_ARRAY  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)?  fieldType  :  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ARRAY)?  fieldType  :  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_ARRAY),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_ARRAY	83	None	replace
519	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  null).construct().create(gson);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  null).construct().create(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  null).construct().create(gson);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson);    	non-compiled	[CE]  ';'  expected	48	None	replace
520	[BUG]  [BUGGY]  AnnotationTypeAdapterFactory  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapterFactory  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapterFactory  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
521	[BUG]  [BUGGY]  AnnotationTypeAdapterFactory  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapterFactory  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapterFactory  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
522	[BUG]  [BUGGY]  aughtExceptionHandler  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  aughtExceptionHandler  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	aughtExceptionHandler  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
523	[BUG]  [BUGGY]  AnnotationTypeAdapterFactory  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapterFactory  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapterFactory  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
524	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FOR  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FOR	74	None	replace
525	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType),  construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType),  construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FOR,  fieldType),  construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	74	None	replace
526	[BUG]  [BUGGY]  typeAdapter  =  annotation.findTypeAdapter(fieldType).getTypeAdapter();  [CE]  cannot  find  symbol  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  annotation.findTypeAdapter(fieldType).getTypeAdapter();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  annotation.findTypeAdapter(fieldType).getTypeAdapter();	  typeAdapter    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
527	[BUG]  [BUGGY]  typeAdapter  =  annotation.createTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  annotation.createTypeAdapter(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  annotation.createTypeAdapter(fieldType);	  typeAdapter    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
528	[BUG]  [BUGGY]  typeAdapter  =  annotation.createTypeAdapter(fieldType).getTypeAdapter();  [CE]  cannot  find  symbol  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  annotation.createTypeAdapter(fieldType).getTypeAdapter();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  annotation.createTypeAdapter(fieldType).getTypeAdapter();	  typeAdapter    =    annotation.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
529	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType,  null);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType,  null);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType,  null);	  JsonAdapter    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	63	None	replace
530	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType,  this);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType,  this);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  constructorConstructor(gson,  fieldType,  this);	  JsonAdapter    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	63	None	replace
531	[BUG]  [BUGGY]  Constructor  <?>  fieldType  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  fieldType  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  fieldType  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
532	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType));  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType));	  typeAdapter    =    constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	85	None	replace
533	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  null);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  null);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME,  null);	  typeAdapter    =    constructorConstructor.findTypeAdapter(TypeToken.FIELD_NAME);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	85	None	replace
534	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FUNCTION).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FUNCTION  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FUNCTION).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FUNCTION).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FUNCTION	70	None	replace
535	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  START_OBJECT  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.START_OBJECT,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	66	None	replace
536	[BUG]  [BUGGY]  typeAdapter  =  getTypeAdapter(annotation,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  getTypeAdapter(annotation,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  getTypeAdapter(annotation,  fieldType);	  typeAdapter    =    getTypeAdapter(fieldType);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	65	None	replace
537	[BUG]  [BUGGY]  typeAdapter  =  getTypeAdapter(generateParameterTypes(fieldType));  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  getTypeAdapter(generateParameterTypes(fieldType));  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  getTypeAdapter(generateParameterTypes(fieldType));	  typeAdapter    =    getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
538	[BUG]  [BUGGY]  typeAdapter  =  getTypeAdapter(text,  fieldType);  [CE]  cannot  find  symbol  text  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  getTypeAdapter(text,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  getTypeAdapter(text,  fieldType);	  typeAdapter    =    getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  text	65	None	replace
539	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(json,  fieldType);  [CE]  cannot  find  symbol  json  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor(json,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(json,  fieldType);	  typeAdapter    =    constructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol  json	23	None	replace
540	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	4	None	replace
541	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType,  construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType,  construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType,  construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	4	None	replace
542	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType.construct(),  create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType.construct(),  create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME),  fieldType.construct(),  create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	4	None	replace
543	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP)?  fieldType  :  fieldType.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  GETPROP  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP)?  fieldType  :  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP)?  fieldType  :  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  GETPROP	17	None	replace
544	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.construct(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.construct(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.construct(gson,  fieldType);	  Constructor    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
545	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  fieldType);  }  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  fieldType);  }	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	33	None	replace
546	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_NAME),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_NAME),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_NAME),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_NAME).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	29	None	replace
547	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);  }  [CE]  cannot  find  symbol  GETPROP  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);  }	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  cannot  find  symbol  GETPROP	14	None	replace
548	[BUG]  [BUGGY]  Constructor  <?>  fieldType  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  fieldType  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  fieldType  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)).construct().create(gson,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
549	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  pathType);  [CE]  cannot  find  symbol  pathType  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  pathType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  pathType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    context);    	non-compiled	[CE]  cannot  find  symbol  pathType	2	None	replace
550	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  this.fieldType);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  this.fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  this.fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    context);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	2	None	replace
551	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  fieldType.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	49	None	replace
552	[BUG]  [BUGGY]  aughtExceptionHandler(constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  aughtExceptionHandler(constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	aughtExceptionHandler(constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	32	None	replace
553	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType),    typeAdapterFactory).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	47	None	replace
554	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,  fieldType,  annotation);  [CE]  cannot  find  symbol  EMPTY  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,  fieldType,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,  fieldType,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.EMPTY).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  EMPTY	58	None	replace
555	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(genson,  fieldType);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(genson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(genson,  fieldType);	  JsonAdapter    annotation    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	24	None	replace
556	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)?    null    :    constructorConstructor.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD	60	None	replace
557	[BUG]  [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(genson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  typeAdapter  =  constructorConstructor(genson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  typeAdapter  =  constructorConstructor(genson,  fieldType);	  JsonAdapter    typeAdapter    =    constructorConstructor(gson);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	64	None	replace
558	[BUG]  [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.FOR,  constructorConstructor).construct().create(gson,  constructorConstructor);  [CE]  cannot  find  symbol  FOR  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.FOR,  constructorConstructor).construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  fieldType.get(TypeToken.FOR,  constructorConstructor).construct().create(gson,  constructorConstructor);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FOR	74	None	replace
559	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT)+  1;  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT)+  1;  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT)+  1;	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	68	None	replace
560	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING);  [CE]  cannot  find  symbol  STRING  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  STRING	68	None	replace
561	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  fieldType.construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  GETPROP  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  fieldType.construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  fieldType.construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType.construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  GETPROP	38	None	replace
562	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  typeAdapterFactory.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  GETPROP  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  typeAdapterFactory.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  typeAdapterFactory.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    typeAdapterFactory.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  GETPROP	42	None	replace
563	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  objectType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  objectType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  objectType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    annotation);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	8	None	replace
564	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  name);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  name);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  name);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    annotation);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	8	None	replace
565	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  context);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  context);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  context);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    annotation);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	8	None	replace
566	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.class.getTypeAdapter();  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.class.getTypeAdapter();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.class.getTypeAdapter();	  Constructor    <?>    typeAdapter    =    constructorConstructor.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
567	[BUG]  [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.createTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  typeAdapter  =  constructorConstructor.createTypeAdapter(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  typeAdapter  =  constructorConstructor.createTypeAdapter(fieldType);	  Constructor    <?>    typeAdapter    =    constructorConstructor.getTypeAdapter();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
568	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType),  fieldType).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	39	None	replace
569	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  STRING  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  STRING	41	None	replace
570	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  fieldType.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  GETPROP  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)?  null  :  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  GETPROP	12	None	replace
571	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType),  fieldType.construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalStateException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  	12	None	replace
572	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.STRING,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	54	None	replace
573	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  beanDesc);  [CE]  cannot  find  symbol  beanDesc  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  beanDesc);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(gson,  fieldType,  beanDesc);	  typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  beanDesc	20	None	replace
574	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  objectType);  [CE]  cannot  find  symbol  objectType  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor(gson,  fieldType,  objectType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor(gson,  fieldType,  objectType);	  typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  objectType	20	None	replace
575	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.START_OBJECT),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.START_OBJECT).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	61	None	replace
576	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	72	None	replace
577	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.typeToken();  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.typeToken();  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  annotation.typeToken();	  TypeToken    <?>    typeAdapter    =    annotation.getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
578	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.findTypeAdapter(fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  annotation.findTypeAdapter(fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  annotation.findTypeAdapter(fieldType);	  TypeToken    <?>    typeAdapter    =    annotation.getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
579	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.construct(TypeToken.FIELD_NAME)+  1;  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.construct(TypeToken.FIELD_NAME)+  1;  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.construct(TypeToken.FIELD_NAME)+  1;	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)+    1;    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	69	None	replace
580	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ADD,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_ADD  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ADD,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_ADD,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_OBJECT,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_ADD	30	None	replace
581	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  true);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  true);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  true);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeMultiply(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	9	None	replace
582	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  context);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  context);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  FieldUtils.safeMultiply(fieldType),  context);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    FieldUtils.safeMultiply(fieldType));    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	9	None	replace
583	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  }  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)?    fieldType    :    null).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	73	None	replace
584	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType  ==  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  null).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)?    fieldType    :    null).construct().create(gson,    fieldType);    	non-compiled	[CE]  	73	None	replace
585	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  NON_GLOBAL).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  NON_GLOBAL).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  NON_GLOBAL).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)?    fieldType    :    null).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	73	None	replace
586	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  typeAdapter);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  typeAdapter);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  typeAdapter);	  JsonToken    <?>    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
587	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  objectType);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  objectType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorConstructor(gson,  fieldType,  objectType);	  JsonToken    <?>    typeAdapter    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
588	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  typeFactory);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  typeFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  typeFactory);	  JsonAdapter    annotation    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	21	None	replace
589	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  _objectIdReader);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  _objectIdReader);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonAdapter  annotation  =  constructorConstructor(gson,  fieldType,  _objectIdReader);	  JsonAdapter    annotation    =    constructorConstructor(gson,    fieldType);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	21	None	replace
590	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).adapter;  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).adapter;  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).adapter;	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	5	None	replace
591	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_RESULT,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_RESULT,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	81	None	replace
592	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ACC_OBJECTLIT).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  ACC_OBJECTLIT  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ACC_OBJECTLIT).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.ACC_OBJECTLIT).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.OBJECTLIT).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  ACC_OBJECTLIT	18	None	replace
593	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.VAR).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  VAR  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.VAR).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.VAR).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.OBJECTLIT).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  VAR	18	None	replace
594	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN).construct().create(gson,  fieldType,  annotation);  [CE]  cannot  find  symbol  ASSIGN  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN).construct().create(gson,  fieldType,  annotation);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.ASSIGN).construct().create(gson,  fieldType,  annotation);	  typeAdapter    =    constructorConstructor.get(TypeToken.ASSIGN).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  ASSIGN	71	None	replace
595	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.getTypeAdapter(TypeToken.FOR);  [CE]  cannot  find  symbol  FOR  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.getTypeAdapter(TypeToken.FOR);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.getTypeAdapter(TypeToken.FOR);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR);    	non-compiled	[CE]  cannot  find  symbol  FOR	86	None	replace
596	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.construct(gson,  TypeToken.FOR);  [CE]  cannot  find  symbol  FOR  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.construct(gson,  TypeToken.FOR);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.construct(gson,  TypeToken.FOR);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR);    	non-compiled	[CE]  cannot  find  symbol  FOR	86	None	replace
597	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
598	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(typeToken.FOR);  [CE]  cannot  find  symbol  typeToken  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.findTypeAdapter(typeToken.FOR);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.findTypeAdapter(typeToken.FOR);	  typeAdapter    =    constructorConstructor.get(TypeToken.FOR);    	non-compiled	[CE]  cannot  find  symbol  typeToken	86	None	replace
599	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.SETPROP,  fieldType),  typeAdapterFactory.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.SETPROP,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  ';'  expected	40	None	replace
600	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  fieldType.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME)?  fieldType  :  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME),    fieldType.construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	1	None	replace
601	[BUG]  [BUGGY]  typeAdapter  =  typeAdapterFactory.getTypeToken(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  constructorConstructor);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  typeAdapterFactory.getTypeToken(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  constructorConstructor);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  typeAdapterFactory.getTypeToken(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  constructorConstructor);	  typeAdapter    =    typeAdapterFactory.get(TypeToken.FIELD_NAME,    constructorConstructor).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	44	None	replace
602	[BUG]  [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.FIELD_NAME,  constructorConstructor).construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  fieldType.get(TypeToken.FIELD_NAME,  constructorConstructor).construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  fieldType.get(TypeToken.FIELD_NAME,  constructorConstructor).construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    typeAdapterFactory.get(TypeToken.FIELD_NAME,    constructorConstructor).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	44	None	replace
603	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  typeAdapterFactory);  [CE]  cannot  find  symbol  FIELD_NAME  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  typeAdapterFactory);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)?  null  :  constructorConstructor.construct().create(gson,  typeAdapterFactory);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	43	None	replace
604	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  null).construct().create(gson,  fieldType);  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  null).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  null).construct().create(gson,  fieldType);	  TypeAdapter    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
605	[BUG]  [BUGGY]  Constructor  <?>  fieldType  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  fieldType  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  fieldType  =  constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	62	None	replace
606	[BUG]  [BUGGY]  Constructor  <?>  fieldType  =  constructorConstructor.get(TypeToken.FIELD_NAME);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  fieldType  =  constructorConstructor.get(TypeToken.FIELD_NAME);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	Constructor  <?>  fieldType  =  constructorConstructor.get(TypeToken.FIELD_NAME);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
607	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	16	None	replace
608	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING)&&  fieldType.construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  STRING  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.STRING)&&  fieldType.construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.STRING)&&  fieldType.construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.STRING).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  STRING	16	None	replace
609	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_TYPE),  fieldType).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_TYPE),  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.EXPR_TYPE),  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.EXPR_TYPE).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	59	None	replace
610	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  objectType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  objectType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType).construct().create(gson,  objectType);	  TypeAdapter    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson,    typeAdapterFactory);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	46	None	replace
611	[BUG]  [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  natureAdapter  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  natureAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	natureAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  natureAdapter	13	None	replace
612	[BUG]  [BUGGY]  adapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  adapter  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  adapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	adapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType).construct().create(gson,  fieldType);	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  adapter	13	None	replace
613	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  false).construct().create(gson);  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  false).construct().create(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType),  false).construct().create(gson);	  typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType).construct().create(gson);    	non-compiled	[CE]  ';'  expected	48	None	replace
614	[BUG]  [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  typeAdapter);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  JsonToken  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  typeAdapter);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	JsonToken  <?>  typeAdapter  =  constructorConstructor.create(gson,  fieldType,  typeAdapter);	  JsonToken    <?>    typeAdapter    =    constructorConstructor.create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
615	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)&  0xff).construct().create(gson,  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)&  0xff).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.GETPROP,  fieldType)&  0xff).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.GETPROP,    fieldType),    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  ';'  expected	80	None	replace
616	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_RESULT).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  TYPE_RESULT  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_RESULT).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.TYPE_RESULT).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.TYPE_OBJECTLIT).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  TYPE_RESULT	27	None	replace
617	[BUG]  [BUGGY]  nisip  nisip  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  nisip  nisip  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	nisip  nisip  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
618	[BUG]  [BUGGY]  AnnotationTypeAdapter  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapter  constructor  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
619	[BUG]  [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,  fieldType);	  if(fieldType!=    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
620	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken(JsonTypeFactory.class);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken(JsonTypeFactory.class);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  getTypeToken(JsonTypeFactory.class);	  TypeToken    <?>    typeAdapter    =    getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	22	None	replace
621	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken(json);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  getTypeToken(json);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeToken  <?>  typeAdapter  =  getTypeToken(json);	  TypeToken    <?>    typeAdapter    =    getTypeToken();    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	22	None	replace
622	[BUG]  [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  [CE]  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	if(fieldType!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.FIELD_NAME,  fieldType)).construct().create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException( "@JsonAdapter  value  must  be  TypeAdapter	  if(fieldType    ==    null)    {    typeAdapter    =    constructorConstructor.get(TypeToken.FIELD_NAME,    fieldType)).construct().create(gson,    fieldType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	35	None	replace
623	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  fieldType);  [CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  fieldType);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  variable  typeAdapter  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	52	None	replace
624	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson);  [CE]  cannot  find  symbol  NAME  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson);  [BUGGY]      .construct()  .create(gson,  fieldType);  }  else  {  throw  new  IllegalArgumentException(       "@JsonAdapter  value  must  be  TypeAdapter  or  TypeAdapterFactory  reference.     ");  }  typeAdapter  =  typeAdapter.nullSafe();  return  typeAdapter;  }  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	60	62	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.NAME,  fieldType).construct().create(gson);	  typeAdapter    =    constructorConstructor.get(TypeToken.NAME,    fieldType).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  NAME	52	None	replace
