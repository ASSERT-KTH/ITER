bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getValue();  [CE]  cannot  find  symbol  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  Class  <?>  value  =  annotation.getValue();  [BUGGY]  TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getValue();	Class<?>  value  =  annotation.value();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
2	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.type();  [CE]  cannot  find  symbol  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  Class  <?>  value  =  annotation.type();  [BUGGY]  TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.type();	Class<?>  value  =  annotation.value();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
3	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getRawClass();  [CE]  cannot  find  symbol  [FE]        NullPointerException  [CONTEXT]    [BUGGY]  Class  <?>  value  =  annotation.getRawClass();  [BUGGY]  TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getRawClass();	Class<?>  value  =  annotation.value();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
4	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException  [CONTEXT]    [BUGGY]  final  Class  <?>  value  =  annotation.value();  [BUGGY]  TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	add	final  Class  <?>  value  =  annotation.value();	Class<?>  value  =  annotation.value();  	compilable	  [FE]  NullPointerException  	13	2	replace
5	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  [FE]  NullPointerException  [FE]          NullPointerException  [CONTEXT]    [BUGGY]  final  Class  <?>  value  =  annotation.value();  [BUGGY]  TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.value();	Class<?>  value  =  annotation.value();  	compilable	  [FE]  NullPointerException  	13	2	replace
6	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.value();  [CE]  cannot  find  symbol  typeAdapter  [FE]            NullPointerException  [CONTEXT]    [BUGGY]  Class  <?>  value  =  typeAdapter.value();  [BUGGY]  TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.value();	Class<?>  value  =  annotation.value();  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	13	None	replace
7	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              NullPointerException  [CONTEXT]    [BUGGY]  Class  <?>  value  =  annotation.getClass();  [BUGGY]  TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	add	Class  <?>  value  =  annotation.getClass();	Class<?>  value  =  annotation.value();  	compilable	  [FE]  IllegalArgumentException  	13	2	replace
8	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  [FE]  IllegalArgumentException  [FE]              NullPointerException  [CONTEXT]    [BUGGY]  Class  <?>  value  =  annotation.getClass();  [BUGGY]  TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getClass();	Class<?>  value  =  annotation.value();  	compilable	  [FE]  IllegalArgumentException  	13	2	replace
9	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                NullPointerException  [CONTEXT]    [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class);  [BUGGY]  TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class);	Class<?>  value  =  annotation.value();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
10	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  value  [FE]                  NullPointerException  [CONTEXT]    [BUGGY]    [BUGGY]  TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	  	Class<?>  value  =  annotation.value();  	non-compiled	[CE]  cannot  find  symbol  value	13	None	replace
11	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.get(fieldType);  [CE]  cannot  find  symbol  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  Class  <?>  value  =  annotation.get(fieldType);  [BUGGY]  TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.get(fieldType);	Class<?>  value  =  annotation.value();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
12	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue();  [CE]  cannot  find  symbol  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue();  [BUGGY]  TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue();	Class<?>  value  =  annotation.value();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
13	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getValueType();  [CE]  cannot  find  symbol  [FE]    NullPointerException  [CONTEXT]    [BUGGY]  Class  <?>  value  =  annotation.getValueType();  [BUGGY]  TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getValueType();	Class<?>  value  =  annotation.value();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
14	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getKey();  [CE]  cannot  find  symbol  [FE]      NullPointerException  [CONTEXT]    [BUGGY]  Class  <?>  value  =  annotation.getKey();  [BUGGY]  TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getKey();	Class<?>  value  =  annotation.value();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
