bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getValue();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.getValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getValue();	  final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
2	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.type();  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.type();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.type();	  final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
3	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getRawClass();  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.getRawClass();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getRawClass();	  final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
4	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	add	final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();	  final    Class    <?>    value    =    annotation.value();    	compilable	  [FE]  NullPointerException  	5	2	replace
5	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();	  final    Class    <?>    value    =    annotation.value();    	compilable	  [FE]  NullPointerException  	5	2	replace
6	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getAssignedValue();  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.getAssignedValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getAssignedValue();	  final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
7	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	add	final  Class  <?>  value  =  annotation.getClass();	  final    Class    <?>    value    =    annotation.value();    	compilable	  [FE]  IllegalArgumentException  	5	2	replace
8	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  [FE]  IllegalArgumentException  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getClass();	  final    Class    <?>    value    =    annotation.value();    	compilable	  [FE]  IllegalArgumentException  	5	2	replace
9	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class);	  final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
10	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterClass.value();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  typeAdapterClass.value();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterClass.value();	  Class    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	6	None	replace
11	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.value();  [CE]  cannot  find  symbol  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  fieldType.value();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.value();	  Class    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
12	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  typeAdapter.value();  [CE]  cannot  find  symbol  typeAdapter  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  TypeAdapter  <?>  value  =  typeAdapter.value();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  typeAdapter.value();	  Class    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	6	None	replace
13	[BUG]  [BUGGY]  Class  <?>  value  =  this.typeAdapter.value();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  this.typeAdapter.value();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.typeAdapter.value();	  Class    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	6	None	replace
14	[BUG]  [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.value();  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.value();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldTypeAdapter.value();	  Class    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	6	None	replace
15	[BUG]  [BUGGY]  Class  <?>  value  =  type.value();  [CE]  cannot  find  symbol  type  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  type.value();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  type.value();	  Class    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol  type	6	None	replace
16	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	      	non-compiled	[CE]  cannot  find  symbol  typeAdapter	10	None	replace
17	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	      	non-compiled	[CE]  cannot  find  symbol  typeAdapter	10	None	replace
18	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	      	non-compiled	[CE]  cannot  find  symbol  typeAdapter	10	None	replace
19	[BUG]  [BUGGY]  TypeToken  gson  =  typeAdapter.getType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                            NullPointerException    [CONTEXT]      [BUGGY]  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  typeAdapter.getType();	      	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	10	None	replace
20	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                              NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	      	non-compiled	[CE]  cannot  find  symbol  typeAdapter	10	None	replace
21	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                                NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	      	non-compiled	[CE]  cannot  find  symbol  typeAdapter	10	None	replace
22	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                                  NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,  fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,  fieldType);	      	non-compiled	[CE]  cannot  find  symbol  typeAdapter	10	None	replace
23	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	4	None	add
24	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	4	None	add
25	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	4	None	add
26	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	4	None	add
27	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	4	None	add
28	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	4	None	add
29	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  TypeToken  gson  =  typeAdapter.getType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.value();  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.value();    TypeToken  gson  =  typeAdapter.getType();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	4	None	add
30	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  TypeToken  gson  =  annotation.getTypeToken();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.value();  TypeToken  gson  =  annotation.getTypeToken();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.value();    TypeToken  gson  =  annotation.getTypeToken();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	4	None	add
31	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	add	Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();	  Class    <?>    value    =    annotation.getClass();    	compilable	  [FE]  NullPointerException  	8	2	replace
32	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();	  Class    <?>    value    =    annotation.getClass();    	compilable	  [FE]  NullPointerException  	8	2	replace
33	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	add	Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();	  Class    <?>    value    =    annotation.getClass();    	compilable	  [FE]  IllegalArgumentException  	8	2	replace
34	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();	  Class    <?>    value    =    annotation.getClass();    	compilable	  [FE]  IllegalArgumentException  	8	2	replace
35	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAssignedValue();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getAssignedValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAssignedValue();	  Class    <?>    value    =    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
36	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.getClass();  [CE]  cannot  find  symbol  typeAdapter  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  typeAdapter.getClass();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.getClass();	  Class    <?>    value    =    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	8	None	replace
37	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.get(annotation);  [CE]  no  suitable  method  found  for  get(JsonAdapter)  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  fieldType.get(annotation);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.get(annotation);	  Class    <?>    value    =    annotation.get(fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(JsonAdapter)	11	None	replace
38	[BUG]  [BUGGY]  Class  <?>  fieldType  =  annotation.get(fieldType);  [CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  fieldType  =  annotation.get(fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  fieldType  =  annotation.get(fieldType);	  Class    <?>    value    =    annotation.get(fieldType);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	11	None	replace
39	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.get(annotations);  [CE]  cannot  find  symbol  annotations  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  fieldType.get(annotations);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.get(annotations);	  Class    <?>    value    =    annotation.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  annotations	11	None	replace
40	[BUG]  [BUGGY]  Class  <?>  value  =  fields.get(fieldType);  [CE]  cannot  find  symbol  fields  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  fields.get(fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fields.get(fieldType);	  Class    <?>    value    =    annotation.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	11	None	replace
41	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.get(fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  typeAdapter.get(fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.get(fieldType);	  Class    <?>    value    =    annotation.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	11	None	replace
42	[BUG]  [BUGGY]  Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
43	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [CE]  cannot  find  symbol  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
44	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  fieldType);  [CE]  cannot  find  symbol  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  fieldType);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
45	[BUG]  [BUGGY]  Class  <?>  value  =  this.annotation.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  this.annotation.getAnnotation(JsonTypeInfo.class);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.annotation.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
46	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                            NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
47	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation.class);  [CE]  cannot  find  symbol  [FE]                              NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation.class);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation.class);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
48	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.getRawClass();  [CE]  cannot  find  symbol  typeAdapter  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  typeAdapter.getRawClass();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.getRawClass();	  Class    <?>    value    =    annotation.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	3	None	replace
49	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterClass.getRawClass();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  typeAdapterClass.getRawClass();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterClass.getRawClass();	  Class    <?>    value    =    annotation.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	3	None	replace
50	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawClass()  :  null;  [CE]  inconvertible  types  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawClass()  :  null;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawClass()  :  null;	  Class    <?>    value    =    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	3	None	replace
51	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawClass();  [CE]  inconvertible  types  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawClass();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawClass();	  Class    <?>    value    =    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	3	None	replace
52	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.getValue();  [CE]  cannot  find  symbol  typeAdapter  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  typeAdapter.getValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.getValue();	  Class    <?>    value    =    annotation.getValue();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	1	None	replace
53	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValue();  [CE]  inconvertible  types  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValue();	  Class    <?>    value    =    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	1	None	replace
54	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getValue();  [CE]  inconvertible  types  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getValue();	  Class    <?>    value    =    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	1	None	replace
55	[BUG]  [BUGGY]  Class  <?>  value  =  this.annotation.getValue();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  this.annotation.getValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.annotation.getValue();	  Class    <?>    value    =    annotation.getValue();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	1	None	replace
56	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValue()  :  null;  [CE]  inconvertible  types  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValue()  :  null;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValue()  :  null;	  Class    <?>    value    =    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	1	None	replace
57	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.getAnnotationValue();  [CE]  cannot  find  symbol  typeAdapter  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  typeAdapter.getAnnotationValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.getAnnotationValue();	  Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	12	None	replace
58	[BUG]  [BUGGY]  Class  <?>  value  =  this.annotation.getAnnotationValue();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  this.annotation.getAnnotationValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.annotation.getAnnotationValue();	  Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	12	None	replace
59	[BUG]  [BUGGY]  Class  <?>  value  =  typeAnnotation.getAnnotationValue();  [CE]  cannot  find  symbol  typeAnnotation  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  typeAnnotation.getAnnotationValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAnnotation.getAnnotationValue();	  Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  typeAnnotation	12	None	replace
60	[BUG]  [BUGGY]  Class  <?>  value  =  annotations.getAnnotationValue();  [CE]  cannot  find  symbol  annotations  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotations.getAnnotationValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotations.getAnnotationValue();	  Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  annotations	12	None	replace
61	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getRawAnnotationValue();  [CE]  cannot  find  symbol  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getRawAnnotationValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getRawAnnotationValue();	  Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
62	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(false);  [CE]  cannot  find  symbol  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(false);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue(false);	  Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
63	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.getKey();  [CE]  cannot  find  symbol  typeAdapter  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  typeAdapter.getKey();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.getKey();	  Class    <?>    value    =    annotation.getKey();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	14	None	replace
64	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getKey();  [CE]  inconvertible  types  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getKey();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getKey();	  Class    <?>    value    =    annotation.getKey();    	non-compiled	[CE]  inconvertible  types	14	None	replace
65	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getKey()  :  null;  [CE]  inconvertible  types  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getKey()  :  null;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getKey()  :  null;	  Class    <?>    value    =    annotation.getKey();    	non-compiled	[CE]  inconvertible  types	14	None	replace
66	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getKey();  [CE]  inconvertible  types  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getKey();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getKey();	  Class    <?>    value    =    annotation.getKey();    	non-compiled	[CE]  inconvertible  types	14	None	replace
67	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.type();  [CE]  cannot  find  symbol  typeAdapter  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  typeAdapter.type();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.type();	  Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	2	None	replace
68	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.type()  :  null;  [CE]  inconvertible  types  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.type()  :  null;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.type()  :  null;	  Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  inconvertible  types	2	None	replace
69	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();  [CE]  inconvertible  types  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();	  Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  inconvertible  types	2	None	replace
70	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.type()  :  null;  [CE]  inconvertible  types  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.type()  :  null;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.type()  :  null;	  Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  inconvertible  types	2	None	replace
71	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.getValueType();  [CE]  cannot  find  symbol  typeAdapter  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  typeAdapter.getValueType();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.getValueType();	  Class    <?>    value    =    annotation.getValueType();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	13	None	replace
72	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValueType();  [CE]  inconvertible  types  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValueType();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValueType();	  Class    <?>    value    =    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	13	None	replace
73	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValueType()  :  null;  [CE]  inconvertible  types  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValueType()  :  null;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValueType()  :  null;	  Class    <?>    value    =    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	13	None	replace
74	[BUG]  [BUGGY]  Class  <?>  value  =  typeAnnotation.getValueType();  [CE]  cannot  find  symbol  typeAnnotation  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  typeAnnotation.getValueType();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAnnotation.getValueType();	  Class    <?>    value    =    annotation.getValueType();    	non-compiled	[CE]  cannot  find  symbol  typeAnnotation	13	None	replace
75	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	7	None	add
76	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	7	None	add
77	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	7	None	add
78	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	7	None	add
79	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  annotation.getTypeToken();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  annotation.getTypeToken();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    TypeToken  gson  =  annotation.getTypeToken();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	add
80	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  typeAdapter.getType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]              IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    TypeToken  gson  =  typeAdapter.getType();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	add
81	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	7	None	add
82	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                  IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	7	None	add
83	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	add	final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();	  final    Class    <?>    value    =    annotation.value();    	compilable	  [FE]  NullPointerException  	5	2	replace
84	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();	  final    Class    <?>    value    =    annotation.value();    	compilable	  [FE]  NullPointerException  	5	2	replace
85	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getAnnotationValue();  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.getAnnotationValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getAnnotationValue();	  final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
86	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(fieldType);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue(fieldType);	  Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
87	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getAnnotationValue();  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  fieldType.getAnnotationValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getAnnotationValue();	  Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
88	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(null);  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(null);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue(null);	  Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
89	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getValue(null);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getValue(null);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getValue(null);	  Class    <?>    value    =    annotation.getKey();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
90	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getValue(fieldType);  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getValue(fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getValue(fieldType);	  Class    <?>    value    =    annotation.getKey();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
91	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.get(fieldType);  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  constructorConstructor.get(fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.get(fieldType);	  Class    <?>    value    =    annotation.get(fieldType);    	non-compiled	[CE]  incompatible  types	11	None	replace
92	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  fieldType);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  fieldType);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.get(fieldType,  fieldType);	  Class    <?>    value    =    annotation.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
93	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  typeAdapterClass);  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  typeAdapterClass);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.get(fieldType,  typeAdapterClass);	  Class    <?>    value    =    annotation.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	11	None	replace
94	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getValueType();  [CE]  inconvertible  types  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getValueType();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getValueType();	  Class    <?>    value    =    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	13	None	replace
95	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValueType()  :  null;  [CE]  inconvertible  types  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValueType()  :  null;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValueType()  :  null;	  Class    <?>    value    =    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	13	None	replace
96	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawClass();  [CE]  inconvertible  types  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawClass();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawClass();	  Class    <?>    value    =    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	3	None	replace
97	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  annotation.getRawClass();  [CE]  inconvertible  types  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  annotation.getRawClass();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  annotation.getRawClass();	  Class    <?>    value    =    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	3	None	replace
98	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getRawClass()  :  null;  [CE]  inconvertible  types  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getRawClass()  :  null;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getRawClass()  :  null;	  Class    <?>    value    =    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	3	None	replace
99	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  annotation.type();  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  annotation.type();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  annotation.type();	  Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
100	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.type()  :  null;  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.type()  :  null;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.type()  :  null;	  Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
101	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()  :  null;  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()  :  null;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()  :  null;	  Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
102	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  type.type();  [CE]  cannot  find  symbol  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  type.type();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  type.type();	  Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
103	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.value();    JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	4	None	add
104	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.value();    JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	4	None	add
105	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.value();  [CE]  cannot  find  symbol  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  constructorConstructor.value();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.value();	  Class    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
106	[BUG]  [BUGGY]  Class  <?>  value  =  objectType.value();  [CE]  cannot  find  symbol  objectType  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  objectType.value();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  objectType.value();	  Class    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol  objectType	6	None	replace
107	[BUG]  [BUGGY]  Class  <?>  value  =  getTypeAdapterClass();  [CE]  cannot  find  symbol  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  getTypeAdapterClass();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  getTypeAdapterClass();	  Class    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
108	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	7	None	add
109	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	add
110	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	add
111	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	7	None	add
112	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	add
113	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]              IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	7	None	add
114	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    TypeToken  gson  =  constructorConstructor.getTypeToken();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	add
115	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]                  IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	7	None	add
116	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	      	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	10	None	replace
117	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	      	non-compiled	[CE]  cannot  find  symbol  typeAdapter	10	None	replace
118	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	      	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	10	None	replace
119	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	add	Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;	  Class    <?>    value    =    annotation.getClass();    	compilable	  [FE]  IllegalArgumentException  	8	2	replace
120	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;	  Class    <?>    value    =    annotation.getClass();    	compilable	  [FE]  IllegalArgumentException  	8	2	replace
121	[BUG]  [BUGGY]  Class  <?>  value  =  annotated.getAnnotationValue();  [CE]  cannot  find  symbol  annotated  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotated.getAnnotationValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotated.getAnnotationValue();	  Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  annotated	12	None	replace
122	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  annotation;  [CE]  inconvertible  types  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  annotation;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  annotation;	  Class    <?>    value    =    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	13	None	replace
123	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.value();    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	4	None	add
124	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.value();    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	4	None	add
125	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.value();    Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
126	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.value();    Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
127	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  fieldType.getAnnotation(JsonTypeInfo.class);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
128	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  annotation;  [CE]  inconvertible  types  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  annotation;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  annotation;	  Class    <?>    value    =    annotation.getKey();    	non-compiled	[CE]  inconvertible  types	14	None	replace
129	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  null;  [CE]  inconvertible  types  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  null;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  null;	  Class    <?>    value    =    annotation.getKey();    	non-compiled	[CE]  inconvertible  types	14	None	replace
130	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  annotation;  [CE]  inconvertible  types  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  annotation;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  annotation;	  Class    <?>    value    =    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	3	None	replace
131	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  null;  [CE]  inconvertible  types  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  null;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  null;	  Class    <?>    value    =    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	3	None	replace
132	[BUG]  [BUGGY]  Class  <?>  value  =  this.fieldTypeAdapter.value();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  this.fieldTypeAdapter.value();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.fieldTypeAdapter.value();	  Class    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	6	None	replace
133	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  annotation.getValue();  [CE]  inconvertible  types  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  annotation.getValue();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  annotation.getValue();	  Class    <?>    value    =    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	1	None	replace
134	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getValueType();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      [BUGGY]  final  Class  <?>  value  =  annotation.getValueType();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getValueType();	  final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
135	[BUG]  [BUGGY]  static  final  Class  <?>  value  =  annotation.value();  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      [BUGGY]  static  final  Class  <?>  value  =  annotation.value();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	static  final  Class  <?>  value  =  annotation.value();	  final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
136	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  null;  [CE]  inconvertible  types  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  null;  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  null;	  Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  inconvertible  types	2	None	replace
137	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
138	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
139	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
140	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation.getClass();    Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
141	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType)).construct();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType)).construct();	      	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	10	None	replace
142	[BUG]  [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.getType();  [CE]  not  a  statement  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.getType();  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?  >>  fieldType  =  typeAdapter.getType();	      	non-compiled	[CE]  not  a  statement	10	None	replace
143	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]    TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	      	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	10	None	replace
