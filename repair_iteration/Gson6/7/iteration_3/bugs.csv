bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  typeAdapter;  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  typeAdapter;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  typeAdapter;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    annotation;    	non-compiled	[CE]  inconvertible  types	130	None	replace
2	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  fieldType;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  fieldType;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  fieldType;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    annotation;    	non-compiled	[CE]  inconvertible  types	130	None	replace
3	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  typeAdapter;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  typeAdapter;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  typeAdapter;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    annotation;    	non-compiled	[CE]  inconvertible  types	130	None	replace
4	[BUG]  [BUGGY]  Constructor  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  typeAdapter;  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  typeAdapter;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  typeAdapter;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    annotation;    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
5	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  object;  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  object;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  object;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    annotation;    	non-compiled	[CE]  inconvertible  types	130	None	replace
6	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  typeAdapterFactory;  [CE]  inconvertible  types  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  typeAdapterFactory;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  typeAdapterFactory;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    annotation;    	non-compiled	[CE]  inconvertible  types	130	None	replace
7	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  type;  [CE]  inconvertible  types  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  type;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  type;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    annotation;    	non-compiled	[CE]  inconvertible  types	130	None	replace
8	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)types.getValueType()  :  null;  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)types.getValueType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)types.getValueType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getValueType()    :    null;    	non-compiled	[CE]  inconvertible  types	73	None	replace
9	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.getValueType()  :  null;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.getValueType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.getValueType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getValueType()    :    null;    	non-compiled	[CE]  inconvertible  types	73	None	replace
10	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)objects.getValueType()  :  null;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)objects.getValueType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)objects.getValueType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getValueType()    :    null;    	non-compiled	[CE]  inconvertible  types	73	None	replace
11	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)types.getValueType()  :  null;  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)types.getValueType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)types.getValueType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getValueType()    :    null;    	non-compiled	[CE]  ';'  expected	73	None	replace
12	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValueType()  :  typeAdapter;  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValueType()  :  typeAdapter;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValueType()  :  typeAdapter;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getValueType()    :    null;    	non-compiled	[CE]  inconvertible  types	73	None	replace
13	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getValueType()  :  null;  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getValueType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getValueType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getValueType()    :    null;    	non-compiled	[CE]  ';'  expected	73	None	replace
14	[BUG]  [BUGGY]  final  Class  <?>  value  =  typeAdapter.getValueType();  [CE]  cannot  find  symbol  typeAdapter  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  typeAdapter.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  typeAdapter.getValueType();	  final    Class    <?>    value    =    annotation.getValueType();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	134	None	replace
15	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValueType();  [CE]  inconvertible  types  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValueType();	  final    Class    <?>    value    =    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	134	None	replace
16	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValueType()  :  null;  [CE]  inconvertible  types  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValueType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValueType()  :  null;	  final    Class    <?>    value    =    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	134	None	replace
17	[BUG]  [BUGGY]  final  Class  <?>  value  =  typeAnnotation.getValueType();  [CE]  cannot  find  symbol  typeAnnotation  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  typeAnnotation.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  typeAnnotation.getValueType();	  final    Class    <?>    value    =    annotation.getValueType();    	non-compiled	[CE]  cannot  find  symbol  typeAnnotation	134	None	replace
18	[BUG]  [BUGGY]  final  Class  <?>  value  =  this.annotation.getValueType();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  this.annotation.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  this.annotation.getValueType();	  final    Class    <?>    value    =    annotation.getValueType();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	134	None	replace
19	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
20	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
21	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
22	[BUG]  [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
23	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	108	None	replace
24	[BUG]  [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	108	None	replace
25	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.getRawAnnotationValue();  [CE]  cannot  find  symbol  typeAdapter  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapter.getRawAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.getRawAnnotationValue();	  Class    <?>    value    =    annotation.getRawAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	61	None	replace
26	[BUG]  [BUGGY]  Class  <?>  value  =  this.annotation.getRawAnnotationValue();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.annotation.getRawAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.annotation.getRawAnnotationValue();	  Class    <?>    value    =    annotation.getRawAnnotationValue();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	61	None	replace
27	[BUG]  [BUGGY]  Class  <?>  value  =  typeAnnotation.getRawAnnotationValue();  [CE]  cannot  find  symbol  typeAnnotation  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAnnotation.getRawAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAnnotation.getRawAnnotationValue();	  Class    <?>    value    =    annotation.getRawAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  typeAnnotation	61	None	replace
28	[BUG]  [BUGGY]  Class  <?>  value  =  this.annotations.getRawAnnotationValue();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.annotations.getRawAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.annotations.getRawAnnotationValue();	  Class    <?>    value    =    annotation.getRawAnnotationValue();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	61	None	replace
29	[BUG]  [BUGGY]  Class  <?>  value  =  annotations.getRawAnnotationValue();  [CE]  cannot  find  symbol  annotations  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotations.getRawAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotations.getRawAnnotationValue();	  Class    <?>    value    =    annotation.getRawAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  annotations	61	None	replace
30	[BUG]  [BUGGY]  Class  <?>  value  =  object.getRawAnnotationValue();  [CE]  cannot  find  symbol  object  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  object.getRawAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  object.getRawAnnotationValue();	  Class    <?>    value    =    annotation.getRawAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  object	61	None	replace
31	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  no  suitable  method  found  for  get(TypeAdapter)  [FE]        IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapter)	75	None	replace
32	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
33	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)	75	None	replace
34	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
35	[BUG]  [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  no  suitable  method  found  for  get(TypeToken)  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken)	75	None	replace
36	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
37	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  typeAdapterFactory);  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  typeAdapterFactory);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.get(fieldType,  typeAdapterFactory);	  Class    <?>    value    =    annotation.get(fieldType,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	93	None	replace
38	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.get(type,  fieldType);  [CE]  cannot  find  symbol  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.get(type,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.get(type,  fieldType);	  Class    <?>    value    =    annotation.get(fieldType,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol  type	93	None	replace
39	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  this.typeAdapterClass);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  this.typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.get(fieldType,  this.typeAdapterClass);	  Class    <?>    value    =    annotation.get(fieldType,    typeAdapterClass);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	93	None	replace
40	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  typeAdapter);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.get(fieldType,  typeAdapter);	  Class    <?>    value    =    annotation.get(fieldType,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	93	None	replace
41	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.get(typeAdapterClass,  fieldType);  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.get(typeAdapterClass,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.get(typeAdapterClass,  fieldType);	  Class    <?>    value    =    annotation.get(fieldType,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	93	None	replace
42	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  typeAdapter;  [CE]  inconvertible  types  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  typeAdapter;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  typeAdapter;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValueType()    :    annotation;    	non-compiled	[CE]  inconvertible  types	122	None	replace
43	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  typeAdapterClass;  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  typeAdapterClass;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  typeAdapterClass;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValueType()    :    annotation;    	non-compiled	[CE]  inconvertible  types	122	None	replace
44	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  typeAdapter;  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  typeAdapter;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  typeAdapter;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValueType()    :    annotation;    	non-compiled	[CE]  inconvertible  types	122	None	replace
45	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValueType()  :  typeAdapter;  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValueType()  :  typeAdapter;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValueType()  :  typeAdapter;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValueType()    :    annotation;    	non-compiled	[CE]  ';'  expected	122	None	replace
46	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  fieldType;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  fieldType;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  fieldType;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValueType()    :    annotation;    	non-compiled	[CE]  inconvertible  types	122	None	replace
47	[BUG]  [BUGGY]  Constructor  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  typeAdapter;  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  typeAdapter;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  typeAdapter;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValueType()    :    annotation;    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
48	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  object;  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  object;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  object;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValueType()    :    annotation;    	non-compiled	[CE]  inconvertible  types	122	None	replace
49	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	112	None	replace
50	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	112	None	replace
51	[BUG]  [BUGGY]  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  cannot  find  symbol  typeFactory  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeFactory	112	None	replace
52	[BUG]  [BUGGY]  Constructor  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
53	[BUG]  [BUGGY]  typeFactory  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  cannot  find  symbol  typeFactory  [FE]                        IllegalArgumentException      [CONTEXT]        [BUGGY]  typeFactory  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeFactory  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeFactory	112	None	replace
54	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
55	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeFactory));  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                            IllegalArgumentException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeFactory));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeFactory));	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	112	None	replace
56	[BUG]  [BUGGY]  Class  <?>  value  =  this.fieldType.value();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.fieldType.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.fieldType.value();	  Class    <?>    value    =    type.value();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	15	None	replace
57	[BUG]  [BUGGY]  Class  <?>  value  =  typeType.value();  [CE]  cannot  find  symbol  typeType  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeType.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeType.value();	  Class    <?>    value    =    type.value();    	non-compiled	[CE]  cannot  find  symbol  typeType	15	None	replace
58	[BUG]  [BUGGY]  Class  <?>  value  =  typeClass.value();  [CE]  cannot  find  symbol  typeClass  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeClass.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeClass.value();	  Class    <?>    value    =    type.value();    	non-compiled	[CE]  cannot  find  symbol  typeClass	15	None	replace
59	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.getTypeToken();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.getTypeToken();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.getTypeToken();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	114	None	replace
60	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.getTypeToken();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	114	None	replace
61	[BUG]  [BUGGY]  gson  =  constructorConstructor.getTypeToken();  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]        [BUGGY]  gson  =  constructorConstructor.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	gson  =  constructorConstructor.getTypeToken();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
62	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.getTypeToken();  [CE]  cannot  find  symbol  typeAdapter  [FE]                          IllegalArgumentException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.getTypeToken();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	114	None	replace
63	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation.getConstructor();  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation.getConstructor();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation.getConstructor();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
64	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
65	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeToken  =  constructorConstructor.getTypeToken();  [CE]  cannot  find  symbol  typeToken  [FE]                                IllegalArgumentException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeToken  =  constructorConstructor.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getClass();  typeToken  =  constructorConstructor.getTypeToken();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol  typeToken	114	None	replace
66	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  annotation.getClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	add	Class  <?>  value  =  annotation  ==  null?  annotation.getClass()  :  null;	  Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    	compilable	  [FE]  NullPointerException  	120	2	replace
67	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  annotation.getClass()  :  null;  [FE]  NullPointerException  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  annotation.getClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  ==  null?  annotation.getClass()  :  null;	  Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    	compilable	  [FE]  NullPointerException  	120	2	replace
68	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getRawClass()  :  null;  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getRawClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation!=  null?  annotation.getRawClass()  :  null;	  Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
69	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  annotation.getRawClass()  :  null;  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  annotation.getRawClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  ==  null?  annotation.getRawClass()  :  null;	  Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
70	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getType()  :  null;  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation!=  null?  annotation.getType()  :  null;	  Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
71	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getValue()  :  null;  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getValue()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation!=  null?  annotation.getValue()  :  null;	  Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
72	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.getRawClass()  :  null;  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.getRawClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.getRawClass()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.type()    :    null;    	non-compiled	[CE]  inconvertible  types	68	None	replace
73	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(type()):  null;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(type()):  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(type()):  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.type()    :    null;    	non-compiled	[CE]  inconvertible  types	68	None	replace
74	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.restrictByNotNullOrUndefined()  :  null;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.restrictByNotNullOrUndefined()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.restrictByNotNullOrUndefined()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.type()    :    null;    	non-compiled	[CE]  inconvertible  types	68	None	replace
75	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)objects.type()  :  null;  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)objects.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)objects.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.type()    :    null;    	non-compiled	[CE]  inconvertible  types	68	None	replace
76	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getObjectType()  :  null;  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getObjectType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getObjectType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.type()    :    null;    	non-compiled	[CE]  inconvertible  types	68	None	replace
77	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.as()  :  null;  [CE]  inconvertible  types  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.as()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.as()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.type()    :    null;    	non-compiled	[CE]  inconvertible  types	68	None	replace
78	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(value)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(value)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(value)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	17	None	replace
79	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	17	None	replace
80	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	17	None	replace
81	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	17	None	replace
82	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(type)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	17	None	replace
83	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	17	None	replace
84	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getRawClass();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getRawClass();	  Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
85	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getRawClass();  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation!=  null?  null  :  annotation.getRawClass();	  Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
86	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getAnnotation(JsonNull.class);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getAnnotation(JsonNull.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getAnnotation(JsonNull.class);	  Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
87	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getAnnotation(JsonNull.class);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getAnnotation(JsonNull.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation!=  null?  null  :  annotation.getAnnotation(JsonNull.class);	  Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
88	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	add	final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();	  Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    	compilable	  [FE]  NullPointerException  	32	2	replace
89	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();	  Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    	compilable	  [FE]  NullPointerException  	32	2	replace
90	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.type();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.type();	  final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
91	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null? "null "  :  annotation.value();  [CE]  incompatible  types  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null? "null "  :  annotation.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  ==  null? "null "  :  annotation.value();	  final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    	non-compiled	[CE]  incompatible  types	84	None	replace
92	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null  ||  annotation.value()!=  null?  null  :  annotation.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	add	final  Class  <?>  value  =  annotation  ==  null  ||  annotation.value()!=  null?  null  :  annotation.value();	  final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    	compilable	  [FE]  NullPointerException  	84	2	replace
93	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null  ||  annotation.value()!=  null?  null  :  annotation.value();  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null  ||  annotation.value()!=  null?  null  :  annotation.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  ==  null  ||  annotation.value()!=  null?  null  :  annotation.value();	  final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    	compilable	  [FE]  NullPointerException  	84	2	replace
94	[BUG]  [BUGGY]  static  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  static  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	static  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();	  final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
95	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getValue();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getValue();	  Class    <?>    value    =    this.annotation.getValue();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
96	[BUG]  [BUGGY]  Class  <?>  value  =  typeAnnotation.getValue();  [CE]  cannot  find  symbol  typeAnnotation  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAnnotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAnnotation.getValue();	  Class    <?>    value    =    this.annotation.getValue();    	non-compiled	[CE]  cannot  find  symbol  typeAnnotation	55	None	replace
97	[BUG]  [BUGGY]  Class  <?>  value  =  type.getValue();  [CE]  cannot  find  symbol  type  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  type.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  type.getValue();	  Class    <?>    value    =    this.annotation.getValue();    	non-compiled	[CE]  cannot  find  symbol  type	55	None	replace
98	[BUG]  [BUGGY]  Class  <?>  value  =  typeFactory.getValue();  [CE]  cannot  find  symbol  typeFactory  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeFactory.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeFactory.getValue();	  Class    <?>    value    =    this.annotation.getValue();    	non-compiled	[CE]  cannot  find  symbol  typeFactory	55	None	replace
99	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterClass.get(fieldType);  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterClass.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterClass.get(fieldType);	  Class    <?>    value    =    typeAdapter.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	41	None	replace
100	[BUG]  [BUGGY]  Class  <?>  value  =  constructorAdapter.get(fieldType);  [CE]  cannot  find  symbol  constructorAdapter  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorAdapter.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorAdapter.get(fieldType);	  Class    <?>    value    =    typeAdapter.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  constructorAdapter	41	None	replace
101	[BUG]  [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.get(fieldType);  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldTypeAdapter.get(fieldType);	  Class    <?>    value    =    typeAdapter.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	41	None	replace
102	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  constructorConstructor.get(fieldType);  [CE]  incompatible  types  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  constructorConstructor.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  constructorConstructor.get(fieldType);	  Class    <?>    value    =    typeAdapter.get(fieldType);    	non-compiled	[CE]  incompatible  types	41	None	replace
103	[BUG]  [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.get(type);  [CE]  cannot  find  symbol  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.get(type);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldTypeAdapter.get(type);	  Class    <?>    value    =    typeAdapter.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  type	41	None	replace
104	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
105	[BUG]  [BUGGY]  final  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	104	None	replace
106	[BUG]  [BUGGY]  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	104	None	replace
107	[BUG]  [BUGGY]  TypeAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	104	None	replace
108	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
109	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	4	None	add
110	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	4	None	add
111	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	4	None	add
112	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	4	None	add
113	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  TypeToken  gson  =  typeAdapter.getType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    TypeToken  gson  =  typeAdapter.getType();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	4	None	add
114	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	4	None	add
115	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	4	None	add
116	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct()?  null  :  typeAdapter.create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct()?  null  :  typeAdapter.create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct()?  null  :  typeAdapter.create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	4	None	add
117	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterClass.getAnnotationValue();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterClass.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterClass.getAnnotationValue();	  Class    <?>    value    =    typeAdapter.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	57	None	replace
118	[BUG]  [BUGGY]  Class  <?>  value  =  this.typeAdapter.getAnnotationValue();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.typeAdapter.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.typeAdapter.getAnnotationValue();	  Class    <?>    value    =    typeAdapter.getAnnotationValue();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	57	None	replace
119	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  typeAdapter.getAnnotationValue();  [CE]  cannot  find  symbol  typeAdapter  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  typeAdapter.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  typeAdapter.getAnnotationValue();	  Class    <?>    value    =    typeAdapter.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	57	None	replace
120	[BUG]  [BUGGY]  Class  <?>  value  =  getTypeAdapter().getAnnotationValue();  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  getTypeAdapter().getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  getTypeAdapter().getAnnotationValue();	  Class    <?>    value    =    typeAdapter.getAnnotationValue();    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	57	None	replace
121	[BUG]  [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.getAnnotationValue();  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldTypeAdapter.getAnnotationValue();	  Class    <?>    value    =    typeAdapter.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	57	None	replace
122	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterFactory.value();  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterFactory.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterFactory.value();	  Class    <?>    value    =    typeAdapterClass.value();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	10	None	replace
123	[BUG]  [BUGGY]  Class  <?>  value  =  this.typeAdapterClass.value();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.typeAdapterClass.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.typeAdapterClass.value();	  Class    <?>    value    =    typeAdapterClass.value();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	10	None	replace
124	[BUG]  [BUGGY]  Class  <?>  value  =  getTypeAdapterClass().value();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  getTypeAdapterClass().value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  getTypeAdapterClass().value();	  Class    <?>    value    =    typeAdapterClass.value();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
125	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterType.value();  [CE]  cannot  find  symbol  typeAdapterType  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterType.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterType.value();	  Class    <?>    value    =    typeAdapterClass.value();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterType	10	None	replace
126	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  typeAdapter.getType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  typeAdapter.getType();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	80	None	replace
127	[BUG]  [BUGGY]  gson  =  typeAdapter.getType();  [CE]  cannot  find  symbol  typeAdapter  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  gson  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	gson  =  typeAdapter.getType();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	80	None	replace
128	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.class);  [CE]  cannot  find  symbol  typeAdapter  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.class);	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	80	None	replace
129	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.getType();  [CE]  cannot  find  symbol  typeAdapter  [FE]                        IllegalArgumentException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.getType();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	80	None	replace
130	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterclass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterclass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterclass)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	18	None	replace
131	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterName)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterName)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterName)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	18	None	replace
132	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeAdapter)  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapter)	18	None	replace
133	[BUG]  [BUGGY]  Class  <?>  fieldType  =  annotation.get(type);  [CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  fieldType  =  annotation.get(type);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  fieldType  =  annotation.get(type);	  Class    <?>    fieldType    =    annotation.get(fieldType);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	38	None	replace
134	[BUG]  [BUGGY]  Class  <?>  fieldType  =  annotation.get(value);  [CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  fieldType  =  annotation.get(value);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  fieldType  =  annotation.get(value);	  Class    <?>    fieldType    =    annotation.get(fieldType);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	38	None	replace
135	[BUG]  [BUGGY]  TypeToken  <?>  fieldType  =  annotation.get(type);  [CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  fieldType  =  annotation.get(type);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?>  fieldType  =  annotation.get(type);	  Class    <?>    fieldType    =    annotation.get(fieldType);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	38	None	replace
136	[BUG]  [BUGGY]  Class  <?>  fieldType  =  annotation.get(gson);  [CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  fieldType  =  annotation.get(gson);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  fieldType  =  annotation.get(gson);	  Class    <?>    fieldType    =    annotation.get(fieldType);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	38	None	replace
137	[BUG]  [BUGGY]  TypeToken  <?>  fieldType  =  annotation.get(value);  [CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  fieldType  =  annotation.get(value);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?>  fieldType  =  annotation.get(value);	  Class    <?>    fieldType    =    annotation.get(fieldType);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	38	None	replace
138	[BUG]  [BUGGY]  Class  <?>  fieldType  =  annotation.get(key);  [CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  fieldType  =  annotation.get(key);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  fieldType  =  annotation.get(key);	  Class    <?>    fieldType    =    annotation.get(fieldType);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	38	None	replace
139	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType);  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType);	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	143	None	replace
140	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory));  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory));	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	143	None	replace
141	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(fieldType));  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(fieldType));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(fieldType));	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	143	None	replace
142	[BUG]  [BUGGY]  TypeToken  gson  =  typeAdapter.get(TypeToken.get(typeAdapterClass));  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  typeAdapter.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  typeAdapter.get(TypeToken.get(typeAdapterClass));	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	143	None	replace
143	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeClass)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	143	None	replace
144	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.type();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.type();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.type();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    TypeToken    <?>    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
145	[BUG]  [BUGGY]  Class  <?>  value  =  typeConstructor.value();  [CE]  cannot  find  symbol  typeConstructor  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeConstructor.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeConstructor.value();	  Class    <?>    value    =    constructorConstructor.value();    	non-compiled	[CE]  cannot  find  symbol  typeConstructor	105	None	replace
146	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.class.getName();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.class.getName();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.class.getName();	  Class    <?>    value    =    constructorConstructor.value();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
147	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.class.value();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.class.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.class.value();	  Class    <?>    value    =    constructorConstructor.value();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
148	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterConstructor.value();  [CE]  cannot  find  symbol  typeAdapterConstructor  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterConstructor.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterConstructor.value();	  Class    <?>    value    =    constructorConstructor.value();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterConstructor	105	None	replace
149	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation,  typeAdapter.type()  :  null;  [CE]  :  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation,  typeAdapter.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation,  typeAdapter.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()    :    null;    	non-compiled	[CE]  :  expected	101	None	replace
150	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type.type()  :  null;  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()    :    null;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
151	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)typeFactory.type()  :  null;  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)typeFactory.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)typeFactory.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()    :    null;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
152	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation,  fieldType.type()  :  null;  [CE]  :  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation,  fieldType.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation,  fieldType.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()    :    null;    	non-compiled	[CE]  :  expected	101	None	replace
153	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type,  annotation.type()  :  null;  [CE]  :  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type,  annotation.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type,  annotation.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()    :    null;    	non-compiled	[CE]  :  expected	101	None	replace
154	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	81	None	replace
155	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	81	None	replace
156	[BUG]  [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                        IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	81	None	replace
157	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
158	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
159	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getAnnotationType();  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getAnnotationType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getAnnotationType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	72	None	replace
160	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>  ||  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.getValueType();  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>  ||  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>  ||  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.getValueType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValueType();    	non-compiled	[CE]  ';'  expected	72	None	replace
161	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawType();  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	72	None	replace
162	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getType();  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	72	None	replace
163	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawValueType();  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawValueType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	72	None	replace
164	[BUG]  [BUGGY]  Class  <?>  value  =  type.getValueType();  [CE]  cannot  find  symbol  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  type.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  type.getValueType();	  Class    <?>    value    =    typeAnnotation.getValueType();    	non-compiled	[CE]  cannot  find  symbol  type	74	None	replace
165	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterClass.getValueType();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterClass.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterClass.getValueType();	  Class    <?>    value    =    typeAnnotation.getValueType();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	74	None	replace
166	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getValueType();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getValueType();	  Class    <?>    value    =    typeAnnotation.getValueType();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
167	[BUG]  [BUGGY]  Class  <?>  value  =  typeType.getValueType();  [CE]  cannot  find  symbol  typeType  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeType.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeType.getValueType();	  Class    <?>    value    =    typeAnnotation.getValueType();    	non-compiled	[CE]  cannot  find  symbol  typeType	74	None	replace
168	[BUG]  [BUGGY]  Class  <?>  value  =  typeFactory.getValueType();  [CE]  cannot  find  symbol  typeFactory  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeFactory.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeFactory.getValueType();	  Class    <?>    value    =    typeAnnotation.getValueType();    	non-compiled	[CE]  cannot  find  symbol  typeFactory	74	None	replace
169	[BUG]  [BUGGY]  final  Class  <?>  value  =  typeAdapter.type();  [CE]  cannot  find  symbol  typeAdapter  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  typeAdapter.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  typeAdapter.type();	  final    Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	2	None	replace
170	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.type()  :  null;  [CE]  inconvertible  types  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.type()  :  null;	  final    Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  inconvertible  types	2	None	replace
171	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();	  final    Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  inconvertible  types	2	None	replace
172	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>)?(Class  <?>)annotations.type()  :  null;  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>)?(Class  <?>)annotations.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>)?(Class  <?>)annotations.type()  :  null;	  final    Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  ';'  expected	2	None	replace
173	[BUG]  [BUGGY]  Class  <?>  value  =  this.fieldType.getAnnotationValue();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.fieldType.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.fieldType.getAnnotationValue();	  Class    <?>    value    =    annotated.getAnnotationValue();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	121	None	replace
174	[BUG]  [BUGGY]  Class  <?>  value  =  type.getAnnotationValue();  [CE]  cannot  find  symbol  type  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  type.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  type.getAnnotationValue();	  Class    <?>    value    =    annotated.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  type	121	None	replace
175	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	31	None	add
176	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	31	None	add
177	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	31	None	add
178	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	31	None	add
179	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	31	None	add
180	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	31	None	add
181	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  TypeToken  gson  =  typeAdapter.getType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    TypeToken  gson  =  typeAdapter.getType();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	31	None	add
182	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	31	None	add
183	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeType)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	141	None	replace
184	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType),  fieldType).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType),  fieldType).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType),  fieldType).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeType)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	141	None	replace
185	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeName)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeName)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeName)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeType)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	141	None	replace
186	[BUG]  [BUGGY]  TypeToken  gson  =  typeToken.get(TypeToken.get(typeType)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  typeToken.get(TypeToken.get(typeType)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  typeToken.get(TypeToken.get(typeType)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeType)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	141	None	replace
187	[BUG]  [BUGGY]  TypeToken  gson  =  typeAdapter.get(TypeToken.get(typeType)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  typeAdapter.get(TypeToken.get(typeType)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  typeAdapter.get(TypeToken.get(typeType)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeType)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	141	None	replace
188	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType)).constructor();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType)).constructor();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType)).constructor();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeType)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	141	None	replace
189	[BUG]  [BUGGY]  TypeToken  <?  >=  fieldType  =  typeAdapter.getType();  [CE]  not  a  statement  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >=  fieldType  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?  >=  fieldType  =  typeAdapter.getType();	  TypeToken    <?    >>    fieldType    =    typeAdapter.getType();    	non-compiled	[CE]  not  a  statement	142	None	replace
190	[BUG]  [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.getTypeDeclaration();  [CE]  not  a  statement  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.getTypeDeclaration();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?  >>  fieldType  =  typeAdapter.getTypeDeclaration();	  TypeToken    <?    >>    fieldType    =    typeAdapter.getType();    	non-compiled	[CE]  not  a  statement	142	None	replace
191	[BUG]  [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.getJsonType();  [CE]  not  a  statement  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.getJsonType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?  >>  fieldType  =  typeAdapter.getJsonType();	  TypeToken    <?    >>    fieldType    =    typeAdapter.getType();    	non-compiled	[CE]  not  a  statement	142	None	replace
192	[BUG]  [BUGGY]  TypeToken  <?  >>  typeType  =  typeAdapter.getType();  [CE]  not  a  statement  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  typeType  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?  >>  typeType  =  typeAdapter.getType();	  TypeToken    <?    >>    fieldType    =    typeAdapter.getType();    	non-compiled	[CE]  not  a  statement	142	None	replace
193	[BUG]  [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.getRawType();  [CE]  not  a  statement  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.getRawType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?  >>  fieldType  =  typeAdapter.getRawType();	  TypeToken    <?    >>    fieldType    =    typeAdapter.getType();    	non-compiled	[CE]  not  a  statement	142	None	replace
194	[BUG]  [BUGGY]  TypeToken  <?  >=  fieldType  =  typeAdapter.getTypeDeclaration();  [CE]  not  a  statement  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >=  fieldType  =  typeAdapter.getTypeDeclaration();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?  >=  fieldType  =  typeAdapter.getTypeDeclaration();	  TypeToken    <?    >>    fieldType    =    typeAdapter.getType();    	non-compiled	[CE]  not  a  statement	142	None	replace
195	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	add	final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();	  final    Class    <?>    value    =    annotation.getClass();    	compilable	  [FE]  IllegalArgumentException  	8	2	replace
196	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();	  final    Class    <?>    value    =    annotation.getClass();    	compilable	  [FE]  IllegalArgumentException  	8	2	replace
197	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getAstRootClass();  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getAstRootClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getAstRootClass();	  final    Class    <?>    value    =    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
198	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getAstRoot();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getAstRoot();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getAstRoot();	  final    Class    <?>    value    =    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
199	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getAnnotationValue(annotation);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getAnnotationValue(annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getAnnotationValue(annotation);	  Class    <?>    value    =    annotation.getAnnotationValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
200	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getAnnotationValue(annotations);  [CE]  cannot  find  symbol  annotations  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getAnnotationValue(annotations);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getAnnotationValue(annotations);	  Class    <?>    value    =    annotation.getAnnotationValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol  annotations	86	None	replace
201	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getAnnotationValue(fieldType);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getAnnotationValue(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getAnnotationValue(fieldType);	  Class    <?>    value    =    annotation.getAnnotationValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
202	[BUG]  [BUGGY]  Class  <?>  fieldType  =  annotation.getAnnotationValue(fieldType);  [CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  fieldType  =  annotation.getAnnotationValue(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  fieldType  =  annotation.getAnnotationValue(fieldType);	  Class    <?>    value    =    annotation.getAnnotationValue(fieldType);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	86	None	replace
203	[BUG]  [BUGGY]  Class  <?>  value  =  this.fieldType.getAnnotationValue(annotation);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.fieldType.getAnnotationValue(annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.fieldType.getAnnotationValue(annotation);	  Class    <?>    value    =    annotation.getAnnotationValue(fieldType);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	86	None	replace
204	[BUG]  [BUGGY]  Class  <?>  value  =  fields.getAnnotationValue(fieldType);  [CE]  cannot  find  symbol  fields  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fields.getAnnotationValue(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fields.getAnnotationValue(fieldType);	  Class    <?>    value    =    annotation.getAnnotationValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	86	None	replace
205	[BUG]  [BUGGY]  Class  <?>  value  =  typeTypeAdapter.value();  [CE]  cannot  find  symbol  typeTypeAdapter  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeTypeAdapter.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeTypeAdapter.value();	  Class    <?>    value    =    fieldTypeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol  typeTypeAdapter	14	None	replace
206	[BUG]  [BUGGY]  Class  <?>  value  =  typeFactory.value();  [CE]  cannot  find  symbol  typeFactory  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeFactory.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeFactory.value();	  Class    <?>    value    =    fieldTypeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol  typeFactory	14	None	replace
207	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
208	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
209	[BUG]  [BUGGY]  final  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	103	None	replace
210	[BUG]  [BUGGY]  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	103	None	replace
211	[BUG]  [BUGGY]  TypeAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	103	None	replace
212	[BUG]  [BUGGY]  TypeToken  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	103	None	replace
213	[BUG]  [BUGGY]  Class  <?>  value  =  typeObjectType.value();  [CE]  cannot  find  symbol  typeObjectType  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeObjectType.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeObjectType.value();	  Class    <?>    value    =    objectType.value();    	non-compiled	[CE]  cannot  find  symbol  typeObjectType	106	None	replace
214	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterClass();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterClass();	  Class    <?>    value    =    getTypeAdapterClass();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
215	[BUG]  [BUGGY]  Class  <?>  value  =  getTypeAdapterClass().getRawClass();  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  getTypeAdapterClass().getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  getTypeAdapterClass().getRawClass();	  Class    <?>    value    =    getTypeAdapterClass();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
216	[BUG]  [BUGGY]  Class  <?>  value  =  getTypeAdapterClass(fieldType);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  getTypeAdapterClass(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  getTypeAdapterClass(fieldType);	  Class    <?>    value    =    getTypeAdapterClass();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
217	[BUG]  [BUGGY]  Class  <?>  value  =  getTypeAdapterClass(typeAdapterClass);  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  getTypeAdapterClass(typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  getTypeAdapterClass(typeAdapterClass);	  Class    <?>    value    =    getTypeAdapterClass();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	107	None	replace
218	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.getType();  [CE]  cannot  find  symbol  typeAdapter  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.getType();	  Class    <?>    value    =    getTypeAdapterClass();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	107	None	replace
219	[BUG]  [BUGGY]  Class  <?>  value  =  getTypeAdapterClass().getSuperclass();  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  getTypeAdapterClass().getSuperclass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  getTypeAdapterClass().getSuperclass();	  Class    <?>    value    =    getTypeAdapterClass();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
220	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  annotation.class);  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  annotation.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  annotation.class);	  Class    <?>    value    =    JsonTypeInfo.getAnnotation(annotation.class);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
221	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  fieldType);  [CE]  cannot  find  symbol  JsonTypeInfo  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  fieldType);	  Class    <?>    value    =    JsonTypeInfo.getAnnotation(annotation.class);    	non-compiled	[CE]  cannot  find  symbol  JsonTypeInfo	47	None	replace
222	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  typeInfo.class);  [CE]  cannot  find  symbol  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  typeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  typeInfo.class);	  Class    <?>    value    =    JsonTypeInfo.getAnnotation(annotation.class);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
223	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  typeAdapterClass);  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  typeAdapterClass);	  Class    <?>    value    =    JsonTypeInfo.getAnnotation(annotation.class);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	47	None	replace
224	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfoUtil.getAnnotation(annotation.class);  [CE]  cannot  find  symbol  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfoUtil.getAnnotation(annotation.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfoUtil.getAnnotation(annotation.class);	  Class    <?>    value    =    JsonTypeInfo.getAnnotation(annotation.class);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
225	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation.class,  typeAdapterClass);  [CE]  cannot  find  symbol  [FE]                                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation.class,  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation.class,  typeAdapterClass);	  Class    <?>    value    =    JsonTypeInfo.getAnnotation(annotation.class);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
226	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  typeAdapter.getValue();  [CE]  inconvertible  types  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  typeAdapter.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  typeAdapter.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValue()    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	133	None	replace
227	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  annotation.getValue();  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValue()    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	133	None	replace
228	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  annotation.getValue();  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValue()    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	133	None	replace
229	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  annotation.getValue();  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValue()    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	133	None	replace
230	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValue()  :  typeAdapter.getValue();  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValue()  :  typeAdapter.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValue()  :  typeAdapter.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValue()    :    annotation.getValue();    	non-compiled	[CE]  ';'  expected	133	None	replace
231	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  typeAdapterClass.getValue();  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  typeAdapterClass.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  typeAdapterClass.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValue()    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	133	None	replace
232	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getValue();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getValue();	  Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
233	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null? "null "  :  annotation.getClass();  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null? "null "  :  annotation.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  ==  null? "null "  :  annotation.getClass();	  Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    	non-compiled	[CE]  incompatible  types	34	None	replace
234	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	25	None	replace
235	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	25	None	replace
236	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
237	[BUG]  [BUGGY]  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	113	None	replace
238	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
239	[BUG]  [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
240	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  typeAdapter  [FE]                          IllegalArgumentException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	113	None	replace
241	[BUG]  [BUGGY]  TypeAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                            IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	113	None	replace
242	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]                              IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
243	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterClass.type();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterClass.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterClass.type();	  Class    <?>    value    =    typeAdapter.type();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	67	None	replace
244	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.type();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.type();	  Class    <?>    value    =    typeAdapter.type();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
245	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  typeAdapter.type();  [CE]  cannot  find  symbol  typeAdapter  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  typeAdapter.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  typeAdapter.type();	  Class    <?>    value    =    typeAdapter.type();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	67	None	replace
246	[BUG]  [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.type();  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldTypeAdapter.type();	  Class    <?>    value    =    typeAdapter.type();    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	67	None	replace
247	[BUG]  [BUGGY]  Class  <?>  value  =  this.typeAdapter.type();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.typeAdapter.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.typeAdapter.type();	  Class    <?>    value    =    typeAdapter.type();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	67	None	replace
248	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  typeAdapterClass.type();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  typeAdapterClass.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  typeAdapterClass.type();	  Class    <?>    value    =    typeAdapter.type();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	67	None	replace
249	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterClass.getAnnotation(JsonTypeInfo.class,  annotation);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterClass.getAnnotation(JsonTypeInfo.class,  annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterClass.getAnnotation(JsonTypeInfo.class,  annotation);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
250	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.getAnnotation(JsonTypeInfo.class,  annotation);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapter.getAnnotation(JsonTypeInfo.class,  annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.getAnnotation(JsonTypeInfo.class,  annotation);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
251	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterFactory.getAnnotation(JsonTypeInfo.class,  annotation);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterFactory.getAnnotation(JsonTypeInfo.class,  annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterFactory.getAnnotation(JsonTypeInfo.class,  annotation);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
252	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  typeAdapterClass,  fieldType);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  typeAdapterClass,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  typeAdapterClass,  fieldType);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
253	[BUG]  [BUGGY]  Class  <?>  value  =  types.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  types.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  types.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
254	[BUG]  [BUGGY]  Class  <?>  value  =  this.typeInfo.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [CE]  cannot  find  symbol  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.typeInfo.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.typeInfo.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
255	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
256	[BUG]  [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken)  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken)	24	None	replace
257	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)	24	None	replace
258	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
259	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotationType();  [CE]  inconvertible  types  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotationType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotationType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	94	None	replace
260	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type  :  annotation.getValueType();  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type  :  annotation.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type  :  annotation.getValueType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	94	None	replace
261	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  typeAdapter.getValueType();  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  typeAdapter.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  typeAdapter.getValueType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	94	None	replace
262	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawType();  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	94	None	replace
263	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getValueType();  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getValueType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	94	None	replace
264	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
265	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	26	None	replace
266	[BUG]  [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	26	None	replace
267	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	26	None	replace
268	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
269	[BUG]  [BUGGY]  Class  <?>  value  =  typeType.getAnnotationValue();  [CE]  cannot  find  symbol  typeType  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeType.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeType.getAnnotationValue();	  Class    <?>    value    =    typeAnnotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  typeType	59	None	replace
270	[BUG]  [BUGGY]  Class  <?>  value  =  typeFactory.getAnnotationValue();  [CE]  cannot  find  symbol  typeFactory  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeFactory.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeFactory.getAnnotationValue();	  Class    <?>    value    =    typeAnnotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  typeFactory	59	None	replace
271	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(fieldType);  [CE]  cannot  find  symbol  JsonTypeInfo  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(fieldType);	  Class    <?>    value    =    fieldType.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol  JsonTypeInfo	127	None	replace
272	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.class.getAnnotation(fieldType);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.class.getAnnotation(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.class.getAnnotation(fieldType);	  Class    <?>    value    =    fieldType.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
273	[BUG]  [BUGGY]  Class  <?>  value  =  this.fieldType.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.fieldType.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.fieldType.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    fieldType.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
274	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(fieldType,  JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(fieldType,  JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(fieldType,  JsonTypeInfo.class);	  Class    <?>    value    =    fieldType.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
275	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);	  Class    <?>    value    =    fieldType.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
276	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  this.typeAdapter.value();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  this.typeAdapter.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  this.typeAdapter.value();	  TypeAdapter    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	12	None	replace
277	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  typeAdapter.value();  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  typeAdapter.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  typeAdapter  =  typeAdapter.value();	  TypeAdapter    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
278	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  fieldType.value();  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  fieldType.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  fieldType.value();	  TypeAdapter    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
279	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  getTypeAdapter().value();  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  getTypeAdapter().value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  getTypeAdapter().value();	  TypeAdapter    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	12	None	replace
280	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  typeAdapterClass.value();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  typeAdapterClass.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  typeAdapterClass.value();	  TypeAdapter    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	12	None	replace
281	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  type.value();  [CE]  cannot  find  symbol  type  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  type.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  type.value();	  TypeAdapter    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol  type	12	None	replace
282	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	83	None	add
283	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	83	None	add
284	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	83	None	add
285	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	83	None	add
286	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  TypeToken  gson  =  typeAdapter.getType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    TypeToken  gson  =  typeAdapter.getType();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	83	None	add
287	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]              NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	83	None	add
288	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	83	None	add
289	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct()?  null  :  typeAdapter.create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                  NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct()?  null  :  typeAdapter.create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct()?  null  :  typeAdapter.create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	83	None	add
290	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  typeAdapter.getRawClass();  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  typeAdapter.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  typeAdapter.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getRawClass()    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	97	None	replace
291	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  annotation.getRawClass();  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  annotation.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getRawClass()    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	97	None	replace
292	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  annotations.getRawClass();  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  annotations.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  annotations.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getRawClass()    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	97	None	replace
293	[BUG]  [BUGGY]  Constructor  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  typeAdapter.getRawClass();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  typeAdapter.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  typeAdapter.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getRawClass()    :    annotation.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
294	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  object.getRawClass();  [CE]  inconvertible  types  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  object.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  object.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getRawClass()    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	97	None	replace
295	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
296	[BUG]  [BUGGY]  Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
297	[BUG]  [BUGGY]  Class  <?>  value  =  this.annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
298	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation.class,  JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation.class,  JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation.class,  JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
299	[BUG]  [BUGGY]  Class  <?>  value  =  this.annotations.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.annotations.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.annotations.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
300	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class,  fieldType);  [CE]  cannot  find  symbol  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class,  fieldType);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
301	[BUG]  [BUGGY]  TypeToken  gson  =  annotation.getTypeToken();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  annotation.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  annotation.getTypeToken();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    annotation.getTypeToken();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	79	None	replace
302	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  annotation.getTypeToken();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  annotation.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  annotation.getTypeToken();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    annotation.getTypeToken();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	79	None	replace
303	[BUG]  [BUGGY]  gson  =  annotation.getTypeToken();  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  gson  =  annotation.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	gson  =  annotation.getTypeToken();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    annotation.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
304	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeToken  =  annotation.getTypeToken();  [CE]  cannot  find  symbol  typeToken  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeToken  =  annotation.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getClass();  typeToken  =  annotation.getTypeToken();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    annotation.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol  typeToken	79	None	replace
305	[BUG]  [BUGGY]  Constructor  constructor  =  annotation.getConstructor();  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  annotation.getConstructor();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructor  =  annotation.getConstructor();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    annotation.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
306	[BUG]  [BUGGY]  Constructor  annotation  =  constructorConstructor.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  annotation  =  constructorConstructor.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  annotation  =  constructorConstructor.getAnnotation(JsonAdapter.class);	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    annotation.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
307	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonElement.class);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
308	[BUG]  [BUGGY]  annotations.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);  [CE]  cannot  find  symbol  annotations  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  annotations.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	annotations.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonElement.class);    	non-compiled	[CE]  cannot  find  symbol  annotations	140	None	replace
309	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class,  JsonElement.class);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class,  JsonElement.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class,  JsonElement.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonElement.class);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
310	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotations.getAnnotation(JsonElement.class);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotations.getAnnotation(JsonElement.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotations.getAnnotation(JsonElement.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonElement.class);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
311	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  JsonElement.class.getAnnotation(annotation);  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  JsonElement.class.getAnnotation(annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  JsonElement.class.getAnnotation(annotation);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonElement.class);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
312	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructor.get(TypeToken.get(typeAdapterClass));	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
313	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorFactory.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorFactory.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorFactory.get(TypeToken.get(typeAdapterClass));	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
314	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorToken.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorToken.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorToken.get(TypeToken.get(typeAdapterClass));	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
315	[BUG]  [BUGGY]  final  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
316	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorParameters.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorParameters.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorParameters.get(TypeToken.get(typeAdapterClass));	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
317	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorStructure.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorStructure.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorStructure.get(TypeToken.get(typeAdapterClass));	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
318	[BUG]  [BUGGY]  Class  <?>  value  =  this.annotation.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.annotation.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.annotation.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);	  Class    <?>    value    =    this.annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
319	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(this.annotation.class);  [CE]  <identifier>  expected  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(this.annotation.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(this.annotation.class);	  Class    <?>    value    =    this.annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
320	[BUG]  [BUGGY]  Class  <?>  value  =  this.annotation.getAnnotation(JsonTypeInfo.class,  fieldType);  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.annotation.getAnnotation(JsonTypeInfo.class,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.annotation.getAnnotation(JsonTypeInfo.class,  fieldType);	  Class    <?>    value    =    this.annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
321	[BUG]  [BUGGY]  Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class,  fieldType);  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class,  fieldType);	  Class    <?>    value    =    typeInfo.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
322	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(typeInfo.class);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(typeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(typeInfo.class);	  Class    <?>    value    =    typeInfo.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
323	[BUG]  [BUGGY]  Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class,  annotation);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class,  annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class,  annotation);	  Class    <?>    value    =    typeInfo.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
324	[BUG]  [BUGGY]  Class  <?>  value  =  this.typeInfo.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.typeInfo.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.typeInfo.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    typeInfo.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
325	[BUG]  [BUGGY]  Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class,  null);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class,  null);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class,  null);	  Class    <?>    value    =    typeInfo.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
326	[BUG]  [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	117	None	replace
327	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectFactory)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectFactory)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	117	None	replace
328	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonNull.class);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
329	[BUG]  [BUGGY]  annotations.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [CE]  cannot  find  symbol  annotations  [FE]          IllegalArgumentException      [CONTEXT]        [BUGGY]  annotations.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	annotations.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonNull.class);    	non-compiled	[CE]  cannot  find  symbol  annotations	137	None	replace
330	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  JsonNull.class.getAnnotation(annotation.getClass());  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  JsonNull.class.getAnnotation(annotation.getClass());  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  JsonNull.class.getAnnotation(annotation.getClass());	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonNull.class);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
331	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class,  JsonNull.class);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class,  JsonNull.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class,  JsonNull.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonNull.class);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
332	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotations.getAnnotation(JsonNull.class);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotations.getAnnotation(JsonNull.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotations.getAnnotation(JsonNull.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonNull.class);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
333	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterClass.getClass();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterClass.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterClass.getClass();	  Class    <?>    value    =    typeAdapter.getClass();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	36	None	replace
334	[BUG]  [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.getClass();  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldTypeAdapter.getClass();	  Class    <?>    value    =    typeAdapter.getClass();    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	36	None	replace
335	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	add	Class  <?>  value  =  fieldType.getClass();	  Class    <?>    value    =    typeAdapter.getClass();    	compilable	  [FE]  IllegalArgumentException  	36	2	replace
336	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getClass();  [FE]  IllegalArgumentException  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getClass();	  Class    <?>    value    =    typeAdapter.getClass();    	compilable	  [FE]  IllegalArgumentException  	36	2	replace
337	[BUG]  [BUGGY]  Class  <?>  value  =  this.typeAdapter.getClass();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.typeAdapter.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.typeAdapter.getClass();	  Class    <?>    value    =    typeAdapter.getClass();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	36	None	replace
338	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	add	Class  <?>  value  =  constructorConstructor.getClass();	  Class    <?>    value    =    typeAdapter.getClass();    	compilable	  [FE]  IllegalArgumentException  	36	2	replace
339	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.getClass();  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.getClass();	  Class    <?>    value    =    typeAdapter.getClass();    	compilable	  [FE]  IllegalArgumentException  	36	2	replace
340	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterFactory.getClass();  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                        IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterFactory.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterFactory.getClass();	  Class    <?>    value    =    typeAdapter.getClass();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	36	None	replace
341	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  value);  [CE]  cannot  find  symbol  typeAdapter  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  value);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  value);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	20	None	replace
342	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	20	None	replace
343	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValue();  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	53	None	replace
344	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>  ||  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.getValue();  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>  ||  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>  ||  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValue();    	non-compiled	[CE]  ';'  expected	53	None	replace
345	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawValue();  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	53	None	replace
346	[BUG]  [BUGGY]  Constructor  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValue();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValue();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
347	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>|(Class  <?>)value  :  annotation.getValue();  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>|(Class  <?>)value  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>|(Class  <?>)value  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValue();    	non-compiled	[CE]  ';'  expected	53	None	replace
348	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  annotation;  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  annotation;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  annotation;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    annotation;    	non-compiled	[CE]  inconvertible  types	128	None	replace
349	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  typeAdapter;  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  typeAdapter;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  typeAdapter;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    annotation;    	non-compiled	[CE]  inconvertible  types	128	None	replace
350	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  typeAdapterClass;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  typeAdapterClass;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  typeAdapterClass;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    annotation;    	non-compiled	[CE]  inconvertible  types	128	None	replace
351	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValue()  :  annotation;  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValue()  :  annotation;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValue()  :  annotation;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    annotation;    	non-compiled	[CE]  ';'  expected	128	None	replace
352	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  fieldType;  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  fieldType;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  fieldType;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    annotation;    	non-compiled	[CE]  inconvertible  types	128	None	replace
353	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getKey()  :  typeAdapter;  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getKey()  :  typeAdapter;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getKey()  :  typeAdapter;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    annotation;    	non-compiled	[CE]  ';'  expected	128	None	replace
354	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  object;  [CE]  inconvertible  types  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  object;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  object;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    annotation;    	non-compiled	[CE]  inconvertible  types	128	None	replace
355	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
356	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorFactory.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorFactory.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorFactory.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
357	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorToken.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorToken.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorToken.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
358	[BUG]  [BUGGY]  final  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
359	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  typeAdapterClass.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  typeAdapterClass.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  typeAdapterClass.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
360	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorStructure.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorStructure.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorStructure.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
361	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  typeAdapter.type();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  typeAdapter.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  typeAdapter.type();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value    :    annotation.type();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
362	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  annotations.type();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  annotations.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  annotations.type();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value    :    annotation.type();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
363	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  object.type();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  object.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  object.type();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value    :    annotation.type();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
364	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  this.annotation.type();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  this.annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  this.annotation.type();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value    :    annotation.type();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
365	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterClass.getValue();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterClass.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterClass.getValue();	  Class    <?>    value    =    typeAdapter.getValue();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	52	None	replace
366	[BUG]  [BUGGY]  Class  <?>  value  =  this.typeAdapter.getValue();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.typeAdapter.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.typeAdapter.getValue();	  Class    <?>    value    =    typeAdapter.getValue();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	52	None	replace
367	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  typeAdapter.getValue();  [CE]  cannot  find  symbol  typeAdapter  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  typeAdapter.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  typeAdapter.getValue();	  Class    <?>    value    =    typeAdapter.getValue();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	52	None	replace
368	[BUG]  [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.getValue();  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldTypeAdapter.getValue();	  Class    <?>    value    =    typeAdapter.getValue();    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	52	None	replace
369	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.getValue();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.getValue();	  Class    <?>    value    =    typeAdapter.getValue();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
370	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.getAssignedValue();  [CE]  cannot  find  symbol  typeAdapter  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapter.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.getAssignedValue();	  Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	35	None	replace
371	[BUG]  [BUGGY]  Class  <?>  value  =  this.annotation.getAssignedValue();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.annotation.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.annotation.getAssignedValue();	  Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	35	None	replace
372	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  (Class  <?>)annotations.getAssignedValue()  :  annotation.getAssignedValue();  [CE]  inconvertible  types  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  (Class  <?>)annotations.getAssignedValue()  :  annotation.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  (Class  <?>)annotations.getAssignedValue()  :  annotation.getAssignedValue();	  Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  inconvertible  types	35	None	replace
373	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  (Class  <?>)value  :  annotation.getAssignedValue();  [CE]  inconvertible  types  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  (Class  <?>)value  :  annotation.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  (Class  <?>)value  :  annotation.getAssignedValue();	  Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  inconvertible  types	35	None	replace
374	[BUG]  [BUGGY]  Class  <?>  value  =  typeAnnotationType.getAnnotationValue();  [CE]  cannot  find  symbol  typeAnnotationType  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAnnotationType.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAnnotationType.getAnnotationValue();	  Class    <?>    value    =    annotations.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  typeAnnotationType	60	None	replace
375	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapters.getAnnotationValue();  [CE]  cannot  find  symbol  typeAdapters  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapters.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapters.getAnnotationValue();	  Class    <?>    value    =    annotations.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  typeAdapters	60	None	replace
376	[BUG]  [BUGGY]  Class  <?>  value  =  typeInfo.getAnnotationValue();  [CE]  cannot  find  symbol  typeInfo  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeInfo.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeInfo.getAnnotationValue();	  Class    <?>    value    =    annotations.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  typeInfo	60	None	replace
377	[BUG]  [BUGGY]  Constructor  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.type();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
378	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  typeAdapter.type();  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  typeAdapter.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  typeAdapter.type();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.type();    	non-compiled	[CE]  inconvertible  types	69	None	replace
379	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>|(Class  <?>)value  :  annotation.type();  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>|(Class  <?>)value  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>|(Class  <?>)value  :  annotation.type();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.type();    	non-compiled	[CE]  ';'  expected	69	None	replace
380	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotations.type();  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotations.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotations.type();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.type();    	non-compiled	[CE]  inconvertible  types	69	None	replace
381	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Type  <?>)value  :  annotation.type();  [CE]  inconvertible  types  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Type  <?>)value  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Type  <?>)value  :  annotation.type();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.type();    	non-compiled	[CE]  inconvertible  types	69	None	replace
382	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getValue(gson);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getValue(gson);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getValue(gson);	  Class    <?>    value    =    annotation.getValue(null);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
383	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getValue(gson,  null);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getValue(gson,  null);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getValue(gson,  null);	  Class    <?>    value    =    annotation.getValue(null);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
384	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getValue(null,  fieldType);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getValue(null,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getValue(null,  fieldType);	  Class    <?>    value    =    annotation.getValue(null);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
385	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getValue(false);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getValue(false);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getValue(false);	  Class    <?>    value    =    annotation.getValue(null);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
386	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getValue(null,  null);  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getValue(null,  null);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getValue(null,  null);	  Class    <?>    value    =    annotation.getValue(null);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
387	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getValue(type);  [CE]  cannot  find  symbol  type  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getValue(type);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getValue(type);	  Class    <?>    value    =    annotation.getValue(null);    	non-compiled	[CE]  cannot  find  symbol  type	89	None	replace
388	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getValue(null,  typeAdapterClass);  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getValue(null,  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getValue(null,  typeAdapterClass);	  Class    <?>    value    =    annotation.getValue(null);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	89	None	replace
389	[BUG]  [BUGGY]  final  Class  <?>  value  =  typeAdapter.getValue();  [CE]  cannot  find  symbol  typeAdapter  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  typeAdapter.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  typeAdapter.getValue();	  final    Class    <?>    value    =    annotation.getValue();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	1	None	replace
390	[BUG]  [BUGGY]  final  Class  <?>  value  =  this.annotation.getValue();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  this.annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  this.annotation.getValue();	  final    Class    <?>    value    =    annotation.getValue();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	1	None	replace
391	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValue()  :  annotation.getValue();  [CE]  inconvertible  types  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValue()  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValue()  :  annotation.getValue();	  final    Class    <?>    value    =    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	1	None	replace
392	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getValue();  TypeToken  gson  =  typeAdapter.getType();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getValue();  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getValue();  TypeToken  gson  =  typeAdapter.getType();	  final    Class    <?>    value    =    annotation.value();    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
393	[BUG]  [BUGGY]  final  TypeToken  gson  =  typeAdapter.getType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  TypeToken  gson  =  typeAdapter.getType();	  final    Class    <?>    value    =    annotation.value();    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	29	None	replace
394	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getValue();  typeToken  gson  =  typeAdapter.getType();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getValue();  typeToken  gson  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getValue();  typeToken  gson  =  typeAdapter.getType();	  final    Class    <?>    value    =    annotation.value();    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
395	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  typeAdapter.getType();  [CE]  cannot  find  symbol  typeAdapter  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.value();  typeAdapter  =  typeAdapter.getType();	  final    Class    <?>    value    =    annotation.value();    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	29	None	replace
396	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeClass)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	16	None	replace
397	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(value)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(value)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(value)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	16	None	replace
398	[BUG]  [BUGGY]  TypeToken  gson  =  typeAdapterFactory.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  typeAdapterFactory.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  typeAdapterFactory.get(TypeToken.get(typeAdapterFactory)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	118	None	replace
399	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeTypeAdapterFactory)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeTypeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeTypeAdapterFactory)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	118	None	replace
400	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	118	None	replace
401	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getAnnotationValue(gson);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getAnnotationValue(gson);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getAnnotationValue(gson);	  Class    <?>    value    =    fieldType.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
402	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getValue();  TypeToken  gson  =  annotation.getTypeToken();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getValue();  TypeToken  gson  =  annotation.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getValue();  TypeToken  gson  =  annotation.getTypeToken();	  final    Class    <?>    value    =    annotation.value();    TypeToken    gson    =    annotation.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
403	[BUG]  [BUGGY]  final  TypeToken  gson  =  annotation.getTypeToken();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  final  TypeToken  gson  =  annotation.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  TypeToken  gson  =  annotation.getTypeToken();	  final    Class    <?>    value    =    annotation.value();    TypeToken    gson    =    annotation.getTypeToken();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	30	None	replace
404	[BUG]  [BUGGY]  Class  <?>  value  =  getTypeAdapter().value();  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  getTypeAdapter().value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  getTypeAdapter().value();	  Class    <?>    value    =    this.typeAdapter.value();    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	13	None	replace
405	[BUG]  [BUGGY]  Class  <?>  value  =(typeAdapter  ==  null)?  null  :  typeAdapter.value();  [CE]  cannot  find  symbol  typeAdapter  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =(typeAdapter  ==  null)?  null  :  typeAdapter.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =(typeAdapter  ==  null)?  null  :  typeAdapter.value();	  Class    <?>    value    =    this.typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	13	None	replace
406	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getType()  :  null;  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getValueType()    :    null;    	non-compiled	[CE]  inconvertible  types	95	None	replace
407	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValueType()  :  null;  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValueType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValueType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getValueType()    :    null;    	non-compiled	[CE]  inconvertible  types	95	None	replace
408	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawType()  :  null;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getValueType()    :    null;    	non-compiled	[CE]  inconvertible  types	95	None	replace
409	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getKeyType()  :  null;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getKeyType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getKeyType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getValueType()    :    null;    	non-compiled	[CE]  inconvertible  types	95	None	replace
410	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          IllegalArgumentException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	109	None	replace
411	[BUG]  [BUGGY]  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	109	None	replace
412	[BUG]  [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
413	[BUG]  [BUGGY]  final  Class  <?>  value  =  typeAdapter.getRawClass();  [CE]  cannot  find  symbol  typeAdapter  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  typeAdapter.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  typeAdapter.getRawClass();	  final    Class    <?>    value    =    annotation.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	3	None	replace
414	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawClass();  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawClass();	  final    Class    <?>    value    =    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	3	None	replace
415	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawClass()  :  null;  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawClass()  :  null;	  final    Class    <?>    value    =    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	3	None	replace
416	[BUG]  [BUGGY]  final  Class  <?>  value  =  this.annotation.getRawClass();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  this.annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  this.annotation.getRawClass();	  final    Class    <?>    value    =    annotation.getRawClass();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	3	None	replace
417	[BUG]  [BUGGY]  final  Class  <?>  value  =  typeAdapterClass.getRawClass();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  typeAdapterClass.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  typeAdapterClass.getRawClass();	  final    Class    <?>    value    =    annotation.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	3	None	replace
418	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.get(type);  [CE]  cannot  find  symbol  type  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.get(type);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.get(type);	  Class    <?>    value    =    constructorConstructor.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  type	91	None	replace
419	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.get(fieldType,  annotation);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.get(fieldType,  annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.get(fieldType,  annotation);	  Class    <?>    value    =    constructorConstructor.get(fieldType);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	91	None	replace
420	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.get(TypeToken.get(fieldType));  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.get(TypeToken.get(fieldType));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.get(TypeToken.get(fieldType));	  Class    <?>    value    =    constructorConstructor.get(fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	91	None	replace
421	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.get(fieldType,  typeAdapterClass);  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.get(fieldType,  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.get(fieldType,  typeAdapterClass);	  Class    <?>    value    =    constructorConstructor.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	91	None	replace
422	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.get(fieldType,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.get(fieldType,  typeAdapter);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.get(fieldType,  typeAdapter);	  Class    <?>    value    =    constructorConstructor.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	91	None	replace
423	[BUG]  [BUGGY]  final  Class  <?>  value  =  this.annotation.getAssignedValue();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  this.annotation.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  this.annotation.getAssignedValue();	  final    Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	6	None	replace
424	[BUG]  [BUGGY]  final  Class  <?>  value  =  typeAdapter.getAssignedValue();  [CE]  cannot  find  symbol  typeAdapter  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  typeAdapter.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  typeAdapter.getAssignedValue();	  final    Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	6	None	replace
425	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?  (Class  <?>)value  :  annotation.getAssignedValue();  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?  (Class  <?>)value  :  annotation.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?  (Class  <?>)value  :  annotation.getAssignedValue();	  final    Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  inconvertible  types	6	None	replace
426	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotations.getAssignedValue();  [CE]  cannot  find  symbol  annotations  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotations.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotations.getAssignedValue();	  final    Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  cannot  find  symbol  annotations	6	None	replace
427	[BUG]  [BUGGY]  final  Class  <?>  value  =  typeAnnotation.getAssignedValue();  [CE]  cannot  find  symbol  typeAnnotation  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  typeAnnotation.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  typeAnnotation.getAssignedValue();	  final    Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  cannot  find  symbol  typeAnnotation	6	None	replace
428	[BUG]  [BUGGY]  TypeAdapter  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeAdapter  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	78	None	replace
429	[BUG]  [BUGGY]  Class  <?>  value  =  gson.getAnnotationValue();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  gson.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  gson.getAnnotationValue();	  Class    <?>    value    =    this.annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
430	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.get(annotation,  fieldType);  [CE]  no  suitable  method  found  for  get(JsonAdapter,TypeToken<CAP#1>)  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.get(annotation,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.get(annotation,  fieldType);	  Class    <?>    value    =    annotation.get(fieldType,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(JsonAdapter,TypeToken<CAP#1>)	92	None	replace
431	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.get(annotations,  fieldType);  [CE]  cannot  find  symbol  annotations  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.get(annotations,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.get(annotations,  fieldType);	  Class    <?>    value    =    annotation.get(fieldType,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  annotations	92	None	replace
432	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.get(fieldType,  annotation);  [CE]  cannot  find  symbol  typeAdapter  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapter.get(fieldType,  annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.get(fieldType,  annotation);	  Class    <?>    value    =    annotation.get(fieldType,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	92	None	replace
433	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  type);  [CE]  cannot  find  symbol  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  type);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.get(fieldType,  type);	  Class    <?>    value    =    annotation.get(fieldType,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  type	92	None	replace
434	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  typeAdapter.getRawClass();  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  typeAdapter.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  typeAdapter.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	96	None	replace
435	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type  :  annotation.getRawClass();  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type  :  annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type  :  annotation.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	96	None	replace
436	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawClass();  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	96	None	replace
437	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawParameterType(0);  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawParameterType(0);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawParameterType(0);	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	96	None	replace
438	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotations.getRawClass();  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotations.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotations.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	96	None	replace
439	[BUG]  [BUGGY]  TypeToken  gson  =  fieldType.getType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  fieldType.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  fieldType.getType();	  TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
440	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.getType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.getType();	  TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
441	[BUG]  [BUGGY]  TypeToken  gson  =  typeAdapter.getJsonType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  typeAdapter.getJsonType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  typeAdapter.getJsonType();	  TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
442	[BUG]  [BUGGY]  TypeToken  gson  =  typeAdapter.getType(fieldType);  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  typeAdapter.getType(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  typeAdapter.getType(fieldType);	  TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
443	[BUG]  [BUGGY]  TypeToken  gson  =  getTypeAdapter(fieldType);  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  getTypeAdapter(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  getTypeAdapter(fieldType);	  TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
444	[BUG]  [BUGGY]  TypeToken  gson  =  value.getType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  value.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  value.getType();	  TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
445	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(null,  fieldType);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(null,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue(null,  fieldType);	  Class    <?>    value    =    annotation.getAnnotationValue(null);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
446	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(null,  null);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(null,  null);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue(null,  null);	  Class    <?>    value    =    annotation.getAnnotationValue(null);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
447	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(gson);  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(gson);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue(gson);	  Class    <?>    value    =    annotation.getAnnotationValue(null);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
448	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(gson,  null);  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(gson,  null);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue(gson,  null);	  Class    <?>    value    =    annotation.getAnnotationValue(null);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
449	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(type);  [CE]  cannot  find  symbol  type  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(type);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue(type);	  Class    <?>    value    =    annotation.getAnnotationValue(null);    	non-compiled	[CE]  cannot  find  symbol  type	88	None	replace
450	[BUG]  [BUGGY]  Class  <?>  value  =  this.annotation.getAnnotationValue(null);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.annotation.getAnnotationValue(null);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.annotation.getAnnotationValue(null);	  Class    <?>    value    =    annotation.getAnnotationValue(null);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	88	None	replace
451	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.clone()  :  null;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.clone()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.clone()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.type()    :    null;    	non-compiled	[CE]  inconvertible  types	70	None	replace
452	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)object.type()  :  null;  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)object.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)object.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.type()    :    null;    	non-compiled	[CE]  inconvertible  types	70	None	replace
453	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.type()  :  null;  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.type()    :    null;    	non-compiled	[CE]  inconvertible  types	70	None	replace
454	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value.type()  :  null;  [CE]  inconvertible  types  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.type()    :    null;    	non-compiled	[CE]  inconvertible  types	70	None	replace
455	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotation.type()  :  null;  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotation.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotation.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.type()    :    null;    	non-compiled	[CE]  ';'  expected	70	None	replace
456	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	116	None	replace
457	[BUG]  [BUGGY]  TypeToken  gson  =  typeAdapter.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  typeAdapter.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  typeAdapter.get(TypeToken.get(typeAdapterClass)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	116	None	replace
458	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeTypeAdapterClass)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeTypeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeTypeAdapterClass)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	116	None	replace
459	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
460	[BUG]  [BUGGY]  annotations.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  annotations  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  annotations.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	annotations.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol  annotations	139	None	replace
461	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  typeInfo.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  typeInfo.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  typeInfo.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
462	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  JsonTypeInfo.getAnnotation(annotation.class);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  JsonTypeInfo.getAnnotation(annotation.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  JsonTypeInfo.getAnnotation(annotation.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
463	[BUG]  [BUGGY]  static  final  Class  <?>  value  =  annotation.getValue();  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  static  final  Class  <?>  value  =  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	static  final  Class  <?>  value  =  annotation.getValue();	  static    final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
464	[BUG]  [BUGGY]  static  final  Class  <?>  value  =  typeAdapter.value();  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  static  final  Class  <?>  value  =  typeAdapter.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	static  final  Class  <?>  value  =  typeAdapter.value();	  static    final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
465	[BUG]  [BUGGY]  static  final  Class  <?>  value  =  annotation.type();  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  static  final  Class  <?>  value  =  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	static  final  Class  <?>  value  =  annotation.type();	  static    final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
466	[BUG]  [BUGGY]  static  final  Class  <?>  value  =  annotation.getRawClass();  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  static  final  Class  <?>  value  =  annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	static  final  Class  <?>  value  =  annotation.getRawClass();	  static    final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
467	[BUG]  [BUGGY]  static  final  Class  <?>  value  =  annotation.getAnnotationValue();  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  static  final  Class  <?>  value  =  annotation.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	static  final  Class  <?>  value  =  annotation.getAnnotationValue();	  static    final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
468	[BUG]  [BUGGY]  static  final  Class  <?>  value  =  annotation.getAssignedValue();  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  static  final  Class  <?>  value  =  annotation.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	static  final  Class  <?>  value  =  annotation.getAssignedValue();	  static    final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
469	[BUG]  [BUGGY]  static  final  Class  <?>  value  =  annotation.getClass();  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  static  final  Class  <?>  value  =  annotation.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	static  final  Class  <?>  value  =  annotation.getClass();	  static    final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
470	[BUG]  [BUGGY]  Class  <?>  value  =  type  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  annotation.type();  [CE]  cannot  find  symbol  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  type  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  type  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  annotation.type();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation    :    type.type();    	non-compiled	[CE]  cannot  find  symbol  type	102	None	replace
471	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type  :  type.type();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type  :  type.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type  :  type.type();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation    :    type.type();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
472	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type  :  annotation.type();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type  :  annotation.type();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation    :    type.type();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
473	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type,  typeAdapter.type();  [CE]  :  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type,  typeAdapter.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type,  typeAdapter.type();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation    :    type.type();    	non-compiled	[CE]  :  expected	102	None	replace
474	[BUG]  [BUGGY]  Class  <?>  value  =  type.type()  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  annotation.type();  [CE]  cannot  find  symbol  type  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  type.type()  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  type.type()  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  annotation.type();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation    :    type.type();    	non-compiled	[CE]  cannot  find  symbol  type	102	None	replace
475	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type,  annotation  :  type.type();  [CE]  :  expected  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type,  annotation  :  type.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type,  annotation  :  type.type();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation    :    type.type();    	non-compiled	[CE]  :  expected	102	None	replace
476	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(true);  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(true);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue(true);	  Class    <?>    value    =    annotation.getAnnotationValue(false);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
477	[BUG]  [BUGGY]  Class  <?>  value  =  this.annotation.getAnnotationValue(false);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.annotation.getAnnotationValue(false);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.annotation.getAnnotationValue(false);	  Class    <?>    value    =    annotation.getAnnotationValue(false);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	62	None	replace
478	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(false,  fieldType);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(false,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue(false,  fieldType);	  Class    <?>    value    =    annotation.getAnnotationValue(false);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
479	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.getAnnotationValue(false);  [CE]  cannot  find  symbol  typeAdapter  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapter.getAnnotationValue(false);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.getAnnotationValue(false);	  Class    <?>    value    =    annotation.getAnnotationValue(false);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	62	None	replace
480	[BUG]  [BUGGY]  Class  <?>  value  =  annotations.getAnnotationValue(false);  [CE]  cannot  find  symbol  annotations  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotations.getAnnotationValue(false);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotations.getAnnotationValue(false);	  Class    <?>    value    =    annotation.getAnnotationValue(false);    	non-compiled	[CE]  cannot  find  symbol  annotations	62	None	replace
481	[BUG]  [BUGGY]  Class  <?>  value  =  this.annotations.getAnnotationValue(false);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.annotations.getAnnotationValue(false);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.annotations.getAnnotationValue(false);	  Class    <?>    value    =    annotation.getAnnotationValue(false);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	62	None	replace
482	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(true,  false);  [CE]  cannot  find  symbol  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(true,  false);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue(true,  false);	  Class    <?>    value    =    annotation.getAnnotationValue(false);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
483	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  typeAdapter;  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  typeAdapter;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  typeAdapter;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).type()    :    null;    	non-compiled	[CE]  inconvertible  types	136	None	replace
484	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).type()  :  null;  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).type()    :    null;    	non-compiled	[CE]  ';'  expected	136	None	replace
485	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  null;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).type()    :    null;    	non-compiled	[CE]  inconvertible  types	136	None	replace
486	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)type).type()  :  null;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)type).type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)type).type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).type()    :    null;    	non-compiled	[CE]  inconvertible  types	136	None	replace
487	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  JsonTypeInfo.UNKNOWN;  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  JsonTypeInfo.UNKNOWN;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  JsonTypeInfo.UNKNOWN;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).type()    :    null;    	non-compiled	[CE]  inconvertible  types	136	None	replace
488	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  JsonTypeUtil.EMPTY;  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  JsonTypeUtil.EMPTY;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  JsonTypeUtil.EMPTY;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).type()    :    null;    	non-compiled	[CE]  inconvertible  types	136	None	replace
489	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawValue()  :  null;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawValue()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawValue()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getValue()    :    null;    	non-compiled	[CE]  inconvertible  types	56	None	replace
490	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValue()  :  null;  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValue()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValue()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getValue()    :    null;    	non-compiled	[CE]  inconvertible  types	56	None	replace
491	[BUG]  [BUGGY]  final  Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  typeInfo.getAnnotation(JsonTypeInfo.class);	  final    Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
492	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  fieldType);  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  fieldType);	  final    Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
493	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);	  final    Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
494	[BUG]  [BUGGY]  final  Class  <?>  value  =  this.annotation.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  this.annotation.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  this.annotation.getAnnotation(JsonTypeInfo.class);	  final    Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
495	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);	  final    Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
496	[BUG]  [BUGGY]  final  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation.class);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation.class);	  final    Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
497	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type.getRawClass()  :  null;  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type.getRawClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type.getRawClass()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.type()    :    null;    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
498	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type.asStatic()  :  null;  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type.asStatic()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type.asStatic()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.type()    :    null;    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
499	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)typeObject.type()  :  null;  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)typeObject.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)typeObject.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.type()    :    null;    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
500	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)object.type()  :  null;  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)object.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)object.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.type()    :    null;    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
501	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)object.getRawClass()  :  null;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)object.getRawClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)object.getRawClass()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	98	None	replace
502	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getRawClass()  :  null;  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getRawClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getRawClass()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	98	None	replace
503	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotation.getRawClass()  :  null;  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotation.getRawClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotation.getRawClass()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.getRawClass()    :    null;    	non-compiled	[CE]  ';'  expected	98	None	replace
504	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getRawClass()  :  typeAdapter;  [CE]  inconvertible  types  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getRawClass()  :  typeAdapter;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getRawClass()  :  typeAdapter;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	98	None	replace
505	[BUG]  [BUGGY]  final  Class  <?>  value  =  this.annotation.getAnnotationValue();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  this.annotation.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  this.annotation.getAnnotationValue();	  final    Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	85	None	replace
506	[BUG]  [BUGGY]  final  Class  <?>  value  =  typeAdapter.getAnnotationValue();  [CE]  cannot  find  symbol  typeAdapter  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  typeAdapter.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  typeAdapter.getAnnotationValue();	  final    Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	85	None	replace
507	[BUG]  [BUGGY]  final  Class  <?>  value  =  typeAnnotation.getAnnotationValue();  [CE]  cannot  find  symbol  typeAnnotation  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  typeAnnotation.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  typeAnnotation.getAnnotationValue();	  final    Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  typeAnnotation	85	None	replace
508	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotations.getAnnotationValue();  [CE]  cannot  find  symbol  annotations  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotations.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotations.getAnnotationValue();	  final    Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  annotations	85	None	replace
509	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getRawAnnotationValue();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getRawAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getRawAnnotationValue();	  final    Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
510	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getAnnotationValue(false);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getAnnotationValue(false);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getAnnotationValue(false);	  final    Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
511	[BUG]  [BUGGY]  Class  <?>  value  =  annotations.get(fieldType);  [CE]  cannot  find  symbol  annotations  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotations.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotations.get(fieldType);	  Class    <?>    value    =    fieldType.get(annotations);    	non-compiled	[CE]  cannot  find  symbol  annotations	39	None	replace
512	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.get(type);  [CE]  cannot  find  symbol  type  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.get(type);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.get(type);	  Class    <?>    value    =    fieldType.get(annotations);    	non-compiled	[CE]  cannot  find  symbol  type	39	None	replace
513	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.get(gson);  [CE]  no  suitable  method  found  for  get(Gson)  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.get(gson);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.get(gson);	  Class    <?>    value    =    fieldType.get(annotations);    	non-compiled	[CE]  no  suitable  method  found  for  get(Gson)	39	None	replace
514	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.get(value);  [CE]  incompatible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.get(value);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.get(value);	  Class    <?>    value    =    fieldType.get(annotations);    	non-compiled	[CE]  incompatible  types	39	None	replace
515	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.get(typeAdapterClass);  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.get(typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.get(typeAdapterClass);	  Class    <?>    value    =    fieldType.get(annotations);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	39	None	replace
516	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.get(genericValue);  [CE]  cannot  find  symbol  genericValue  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.get(genericValue);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.get(genericValue);	  Class    <?>    value    =    fieldType.get(annotations);    	non-compiled	[CE]  cannot  find  symbol  genericValue	39	None	replace
517	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	7	None	add
518	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]      IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	7	None	add
519	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]        IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	7	None	add
520	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]          IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	7	None	add
521	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]            IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	7	None	add
522	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]              IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	7	None	add
523	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getAnnotation(JsonTypeInfo.class,  annotation);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getAnnotation(JsonTypeInfo.class,  annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getAnnotation(JsonTypeInfo.class,  annotation);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
524	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  fieldType,  typeAdapter);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  fieldType,  typeAdapter);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  fieldType,  typeAdapter);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
525	[BUG]  [BUGGY]  Class  <?>  value  =  this.fieldType.getAnnotation(JsonTypeInfo.class,  annotation);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.fieldType.getAnnotation(JsonTypeInfo.class,  annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.fieldType.getAnnotation(JsonTypeInfo.class,  annotation);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
526	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  type);  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  type);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  type);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
527	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(fieldType.class,  annotation);  [CE]  cannot  find  symbol  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(fieldType.class,  annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(fieldType.class,  annotation);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
528	[BUG]  [BUGGY]  Class  <?>  value  =  this.fieldTypeAdapter.getValue();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.fieldTypeAdapter.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.fieldTypeAdapter.getValue();	  Class    <?>    value    =    this.fieldTypeAdapter.value();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	132	None	replace
529	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  typeAdapter.getKey();  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  typeAdapter.getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  typeAdapter.getKey();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getKey();    	non-compiled	[CE]  inconvertible  types	66	None	replace
530	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getKey();  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getKey();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getKey();    	non-compiled	[CE]  inconvertible  types	66	None	replace
531	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type  :  annotation.getKey();  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type  :  annotation.getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type  :  annotation.getKey();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getKey();    	non-compiled	[CE]  inconvertible  types	66	None	replace
532	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	115	None	replace
533	[BUG]  [BUGGY]  Constructor  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
534	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
535	[BUG]  [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
536	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)types.getKey()  :  null;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)types.getKey()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)types.getKey()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getKey()    :    null;    	non-compiled	[CE]  inconvertible  types	65	None	replace
537	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValue()  :  null;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValue()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValue()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getKey()    :    null;    	non-compiled	[CE]  inconvertible  types	65	None	replace
538	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.getKey()  :  null;  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.getKey()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type.getKey()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getKey()    :    null;    	non-compiled	[CE]  inconvertible  types	65	None	replace
539	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)objects.getKey()  :  null;  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)objects.getKey()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)objects.getKey()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getKey()    :    null;    	non-compiled	[CE]  inconvertible  types	65	None	replace
540	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getKey()  :  null;  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getKey()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getKey()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getKey()    :    null;    	non-compiled	[CE]  ';'  expected	65	None	replace
541	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)types.getKey()  :  null;  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)types.getKey()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)types.getKey()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getKey()    :    null;    	non-compiled	[CE]  ';'  expected	65	None	replace
542	[BUG]  [BUGGY]  TypeToken  typeFactory  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,  fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken)  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  typeFactory  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  typeFactory  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken)	22	None	replace
543	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeElement)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeElement)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeElement)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	22	None	replace
544	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)	119	None	add
545	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	119	None	add
546	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter));  [CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)  [FE]        IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter));	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)	119	None	add
547	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]          IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	119	None	add
548	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeToken  type  =  annotation!=  null?  annotation.getType()  :  null;  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeToken  type  =  annotation!=  null?  annotation.getType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    TypeToken  type  =  annotation!=  null?  annotation.getType()  :  null;	  	non-compiled	[CE]  cannot  find  symbol	119	None	add
549	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(0)).construct();  [CE]  no  suitable  method  found  for  get(int)  [FE]              IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(0)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(0)).construct();	  	non-compiled	[CE]  no  suitable  method  found  for  get(int)	119	None	add
550	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeAdapter  <?>  typeAdapterClass  =  annotation!=  null?  annotation.getRawClass()  :  null;  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeAdapter  <?>  typeAdapterClass  =  annotation!=  null?  annotation.getRawClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    TypeAdapter  <?>  typeAdapterClass  =  annotation!=  null?  annotation.getRawClass()  :  null;	  	non-compiled	[CE]  cannot  find  symbol	119	None	add
551	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                  IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	119	None	add
552	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	110	None	replace
553	[BUG]  [BUGGY]  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	110	None	replace
554	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	110	None	replace
555	[BUG]  [BUGGY]  Class  <?>  value  =  this.typeAdapter.getValueType();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.typeAdapter.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.typeAdapter.getValueType();	  Class    <?>    value    =    typeAdapter.getValueType();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	71	None	replace
556	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  typeAdapter.getValueType();  [CE]  cannot  find  symbol  typeAdapter  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  typeAdapter.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  typeAdapter.getValueType();	  Class    <?>    value    =    typeAdapter.getValueType();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	71	None	replace
557	[BUG]  [BUGGY]  Class  <?>  value  =  getTypeAdapter().getValueType();  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  getTypeAdapter().getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  getTypeAdapter().getValueType();	  Class    <?>    value    =    typeAdapter.getValueType();    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	71	None	replace
558	[BUG]  [BUGGY]  Class  <?>  value  =  objectType.getValueType();  [CE]  cannot  find  symbol  objectType  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  objectType.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  objectType.getValueType();	  Class    <?>    value    =    typeAdapter.getValueType();    	non-compiled	[CE]  cannot  find  symbol  objectType	71	None	replace
559	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	111	None	replace
560	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
561	[BUG]  [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	AnnotationTypeAdapter  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
562	[BUG]  [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
563	[BUG]  [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	111	None	replace
564	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)	33	None	add
565	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	33	None	add
566	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  [CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]        IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	33	None	add
567	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter));  [CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)  [FE]          IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter));	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeAdapter<CAP#1>)	33	None	add
568	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(0)).construct();  [CE]  no  suitable  method  found  for  get(int)  [FE]            IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(0)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(0)).construct();	  	non-compiled	[CE]  no  suitable  method  found  for  get(int)	33	None	add
569	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]              IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	33	None	add
570	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeAdapter  <?>  typeAdapterClass  =  annotation  ==  null?  null  :  annotation.getClass();  [CE]  incompatible  types  [FE]                IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeAdapter  <?>  typeAdapterClass  =  annotation  ==  null?  null  :  annotation.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    TypeAdapter  <?>  typeAdapterClass  =  annotation  ==  null?  null  :  annotation.getClass();	  	non-compiled	[CE]  incompatible  types	33	None	add
571	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeAdapter  <?>  typeAdapterClass  =  annotation  ==  null?  null  :  annotation.getRawClass();  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeAdapter  <?>  typeAdapterClass  =  annotation  ==  null?  null  :  annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    TypeAdapter  <?>  typeAdapterClass  =  annotation  ==  null?  null  :  annotation.getRawClass();	  	non-compiled	[CE]  cannot  find  symbol	33	None	add
572	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  typeAdapter.getValue();  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  typeAdapter.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  typeAdapter.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	54	None	replace
573	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getValue();  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	54	None	replace
574	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type  :  annotation.getValue();  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)type  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	54	None	replace
575	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawValue();  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	54	None	replace
576	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  final    Class    <?>    value    =    annotation.value();    TypeToken    <?>    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	123	None	replace
577	[BUG]  [BUGGY]  final  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  final  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  final    Class    <?>    value    =    annotation.value();    TypeToken    <?>    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	123	None	replace
578	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getKey();  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getKey();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getKey();    	non-compiled	[CE]  inconvertible  types	64	None	replace
579	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getKey();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getKey();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getKey();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
580	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>|(Class  <?>)value  :  annotation.getKey();  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>|(Class  <?>)value  :  annotation.getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>|(Class  <?>)value  :  annotation.getKey();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getKey();    	non-compiled	[CE]  ';'  expected	64	None	replace
581	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
582	[BUG]  [BUGGY]  annotations.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [CE]  cannot  find  symbol  annotations  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  annotations.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	annotations.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol  annotations	138	None	replace
583	[BUG]  [BUGGY]  annotations.getClass();  Annotation  <?>  annotation  =  annotations.getAnnotation(JsonToken.class);  [CE]  cannot  find  symbol  annotations  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  annotations.getClass();  Annotation  <?>  annotation  =  annotations.getAnnotation(JsonToken.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	annotations.getClass();  Annotation  <?>  annotation  =  annotations.getAnnotation(JsonToken.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol  annotations	138	None	replace
584	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class,  JsonToken.class);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class,  JsonToken.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class,  JsonToken.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
585	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotations.getAnnotation(JsonToken.class);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotations.getAnnotation(JsonToken.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotations.getAnnotation(JsonToken.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
586	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  JsonToken.class.getAnnotation(annotation.getClass());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  JsonToken.class.getAnnotation(annotation.getClass());  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  JsonToken.class.getAnnotation(annotation.getClass());	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
587	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterClass.getKey();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterClass.getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterClass.getKey();	  Class    <?>    value    =    typeAdapter.getKey();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	63	None	replace
588	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getKey();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getKey();	  Class    <?>    value    =    typeAdapter.getKey();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
589	[BUG]  [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.getKey();  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldTypeAdapter.getKey();	  Class    <?>    value    =    typeAdapter.getKey();    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	63	None	replace
590	[BUG]  [BUGGY]  Class  <?>  value  =  this.typeAdapter.getKey();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.typeAdapter.getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.typeAdapter.getKey();	  Class    <?>    value    =    typeAdapter.getKey();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	63	None	replace
591	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  typeAdapter.getKey();  [CE]  cannot  find  symbol  typeAdapter  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  typeAdapter.getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  typeAdapter.getKey();	  Class    <?>    value    =    typeAdapter.getKey();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	63	None	replace
592	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null? "null "  :  annotation.value();  [CE]  incompatible  types  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null? "null "  :  annotation.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation!=  null? "null "  :  annotation.value();	  final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    	non-compiled	[CE]  incompatible  types	5	None	replace
593	[BUG]  [BUGGY]  Class  <?>  value  =  types.get(fieldType);  [CE]  cannot  find  symbol  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  types.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  types.get(fieldType);	  Class    <?>    value    =    fields.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  types	40	None	replace
594	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.get(fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.get(fieldType);	  Class    <?>    value    =    fields.get(fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	40	None	replace
595	[BUG]  [BUGGY]  Class  <?>  value  =  typeFactory.get(fieldType);  [CE]  cannot  find  symbol  typeFactory  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeFactory.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeFactory.get(fieldType);	  Class    <?>    value    =    fields.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeFactory	40	None	replace
596	[BUG]  [BUGGY]  Class  <?>  value  =  this.fieldType.get(fieldType);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.fieldType.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.fieldType.get(fieldType);	  Class    <?>    value    =    fields.get(fieldType);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	40	None	replace
597	[BUG]  [BUGGY]  Class  <?>  value  =  typeFieldType.get(fieldType);  [CE]  cannot  find  symbol  typeFieldType  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeFieldType.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeFieldType.get(fieldType);	  Class    <?>    value    =    fields.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeFieldType	40	None	replace
598	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  typeAdapter.getRawClass();  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  typeAdapter.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  typeAdapter.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	51	None	replace
599	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawParameterType(0);  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawParameterType(0);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawParameterType(0);	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	51	None	replace
600	[BUG]  [BUGGY]  Constructor  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawClass();  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
601	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotations.getRawClass();  [CE]  inconvertible  types  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotations.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotations.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	51	None	replace
602	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>|(Class  <?>)value  :  annotation.getRawClass();  [CE]  ';'  expected  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>|(Class  <?>)value  :  annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>|(Class  <?>)value  :  annotation.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getRawClass();    	non-compiled	[CE]  ';'  expected	51	None	replace
603	[BUG]  [BUGGY]  final  Class  <?>  value  =  fieldType.get(annotation);  [CE]  no  suitable  method  found  for  get(JsonAdapter)  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  fieldType.get(annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  fieldType.get(annotation);	  Class    <?>    value    =    fieldType.get(annotation);    	non-compiled	[CE]  no  suitable  method  found  for  get(JsonAdapter)	37	None	replace
604	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation.get(fieldType);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation.get(fieldType);	  Class    <?>    value    =    fieldType.get(annotation);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
605	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  fieldType.get(annotation);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  fieldType.get(annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  fieldType.get(annotation);	  Class    <?>    value    =    fieldType.get(annotation);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
606	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  annotation.get(fieldType);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  annotation.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  annotation.get(fieldType);	  Class    <?>    value    =    fieldType.get(annotation);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
607	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldType.get(annotation);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  fieldType.get(annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  fieldType.get(annotation);	  Class    <?>    value    =    fieldType.get(annotation);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
608	[BUG]  [BUGGY]  Constructor  <?>  value  =  annotation.get(fieldType);  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  value  =  annotation.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  value  =  annotation.get(fieldType);	  Class    <?>    value    =    fieldType.get(annotation);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
609	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterName)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterName)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterName)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	21	None	replace
610	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterclass)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterclass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterclass)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	21	None	replace
611	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  null;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	131	None	replace
612	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getRawClass(),  typeAdapterClass  :  null;  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getRawClass(),  typeAdapterClass  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getRawClass(),  typeAdapterClass  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    null;    	non-compiled	[CE]  ';'  expected	131	None	replace
613	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass();  [CE]  :  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    null;    	non-compiled	[CE]  :  expected	131	None	replace
614	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  Collections.emptyList();  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  Collections.emptyList();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  Collections.emptyList();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	131	None	replace
615	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValue()  :  null;  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValue()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValue()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    null;    	non-compiled	[CE]  ';'  expected	129	None	replace
616	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getAssignedValue()  :  null;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getAssignedValue()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getAssignedValue()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    null;    	non-compiled	[CE]  inconvertible  types	129	None	replace
617	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getKey()  :  null;  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getKey()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getKey()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    null;    	non-compiled	[CE]  ';'  expected	129	None	replace
618	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  null;  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    null;    	non-compiled	[CE]  inconvertible  types	129	None	replace
619	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getRawClass();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getRawClass();	  Class    <?>    value    =    typeAdapter.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
620	[BUG]  [BUGGY]  Class  <?>  value  =  this.typeAdapter.getRawClass();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.typeAdapter.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.typeAdapter.getRawClass();	  Class    <?>    value    =    typeAdapter.getRawClass();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	48	None	replace
621	[BUG]  [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.getRawClass();  [CE]  cannot  find  symbol  fieldTypeAdapter  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldTypeAdapter.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldTypeAdapter.getRawClass();	  Class    <?>    value    =    typeAdapter.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  fieldTypeAdapter	48	None	replace
622	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.getRawClass();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.getRawClass();	  Class    <?>    value    =    typeAdapter.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
623	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  typeAdapter.getRawClass();  [CE]  cannot  find  symbol  typeAdapter  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  typeAdapter.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  typeAdapter.getRawClass();	  Class    <?>    value    =    typeAdapter.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	48	None	replace
624	[BUG]  [BUGGY]  Class  <?>  value  =  this.typeAdapterClass.getRawClass();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.typeAdapterClass.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.typeAdapterClass.getRawClass();	  Class    <?>    value    =    typeAdapterClass.getRawClass();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	49	None	replace
625	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterFactory.getRawClass();  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterFactory.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterFactory.getRawClass();	  Class    <?>    value    =    typeAdapterClass.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	49	None	replace
626	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterType.getRawClass();  [CE]  cannot  find  symbol  typeAdapterType  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterType.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterType.getRawClass();	  Class    <?>    value    =    typeAdapterClass.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterType	49	None	replace
627	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getValue(annotation);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getValue(annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getValue(annotation);	  Class    <?>    value    =    annotation.getValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
628	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getValue(annotations);  [CE]  cannot  find  symbol  annotations  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getValue(annotations);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getValue(annotations);	  Class    <?>    value    =    annotation.getValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol  annotations	90	None	replace
629	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getValue(fieldType);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getValue(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getValue(fieldType);	  Class    <?>    value    =    annotation.getValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
630	[BUG]  [BUGGY]  Class  <?>  fieldType  =  annotation.getValue(fieldType);  [CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  fieldType  =  annotation.getValue(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  fieldType  =  annotation.getValue(fieldType);	  Class    <?>    value    =    annotation.getValue(fieldType);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	90	None	replace
631	[BUG]  [BUGGY]  Class  <?>  value  =  fields.getValue(fieldType);  [CE]  cannot  find  symbol  fields  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fields.getValue(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fields.getValue(fieldType);	  Class    <?>    value    =    annotation.getValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	90	None	replace
632	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	82	None	replace
633	[BUG]  [BUGGY]  TypeAdapter  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                        IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeAdapter  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	82	None	replace
634	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)types.getRawClass()  :  null;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)types.getRawClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)types.getRawClass()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	50	None	replace
635	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)objects.getRawClass()  :  null;  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)objects.getRawClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)objects.getRawClass()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	50	None	replace
636	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawClass()  :  typeAdapter;  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawClass()  :  typeAdapter;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawClass()  :  typeAdapter;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	50	None	replace
637	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getRawClass(),  typeAdapterClass  :  null;  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getRawClass(),  typeAdapterClass  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getRawClass(),  typeAdapterClass  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getRawClass()    :    null;    	non-compiled	[CE]  ';'  expected	50	None	replace
638	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)arguments.getRawClass()  :  null;  [CE]  inconvertible  types  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)arguments.getRawClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)arguments.getRawClass()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	50	None	replace
639	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	23	None	replace
640	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(annotation.type()):  null;  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(annotation.type()):  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(annotation.type()):  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.type()    :    null;    	non-compiled	[CE]  inconvertible  types	68	None	replace
641	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.type()  :  null;  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.type()    :    null;    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
642	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.valueType()  :  null;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.valueType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.valueType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.type()    :    null;    	non-compiled	[CE]  inconvertible  types	68	None	replace
643	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReferenceFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReferenceFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReferenceFactory)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	22	None	replace
644	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValueType();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValueType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValueType();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
645	[BUG]  [BUGGY]  Object  value  =  annotation  instanceof  Class  <?>?(Object  <?>)value  :  annotation.getValueType();  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Object  value  =  annotation  instanceof  Class  <?>?(Object  <?>)value  :  annotation.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Object  value  =  annotation  instanceof  Class  <?>?(Object  <?>)value  :  annotation.getValueType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	72	None	replace
646	[BUG]  [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  }  [CE]  cannot  find  symbol  typeAdapter  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  }	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	81	None	replace
647	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	81	None	replace
648	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReferenceFactory)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReferenceFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeReferenceFactory)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	117	None	replace
649	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValueType();  [CE]  :  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValueType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getValueType()    :    null;    	non-compiled	[CE]  :  expected	73	None	replace
650	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getKeyType()  :  null;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getKeyType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getKeyType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getValueType()    :    null;    	non-compiled	[CE]  inconvertible  types	73	None	replace
651	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValueType()  :  null;  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValueType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValueType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getValueType()    :    null;    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
652	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getAnnotation().getRawClass()  :  null;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getAnnotation().getRawClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getAnnotation().getRawClass()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	98	None	replace
653	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getType()  :  null;  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	98	None	replace
654	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getRawClass();  [CE]  :  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.getRawClass()    :    null;    	non-compiled	[CE]  :  expected	98	None	replace
655	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getAnnotationType()  :  null;  [CE]  inconvertible  types  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getAnnotationType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getAnnotationType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	98	None	replace
656	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getAnnotation(JsonTypeInfo.class):  null;  [CE]  inconvertible  types  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getAnnotation(JsonTypeInfo.class):  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getAnnotation(JsonTypeInfo.class):  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	98	None	replace
657	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
658	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
659	[BUG]  [BUGGY]  Class  <?>  value  =  annotations.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotations.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotations.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
660	[BUG]  [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [CE]  cannot  find  symbol  typeAdapter  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	28	None	replace
661	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	28	None	replace
662	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  type;  [CE]  inconvertible  types  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  type;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  type;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValueType()    :    annotation;    	non-compiled	[CE]  inconvertible  types	122	None	replace
663	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  typeInfo;  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  typeInfo;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  typeInfo;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValueType()    :    annotation;    	non-compiled	[CE]  inconvertible  types	122	None	replace
664	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass();  [CE]  :  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    annotation;    	non-compiled	[CE]  :  expected	130	None	replace
665	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  annotation;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  annotation;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  annotation;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    annotation;    	non-compiled	[CE]  inconvertible  types	130	None	replace
666	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  typeFactory;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  typeFactory;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawClass()  :  typeFactory;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    annotation;    	non-compiled	[CE]  inconvertible  types	130	None	replace
667	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
668	[BUG]  [BUGGY]  Constructor  <?>  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
669	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	112	None	replace
670	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
671	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
672	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.getTypeToken();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	114	None	replace
673	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  constructorConstructor.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  constructorConstructor.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  constructorConstructor.getAnnotation(JsonAdapter.class);	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
674	[BUG]  [BUGGY]  JsonAdapter  <?>  annotation  =  constructorConstructor.getAnnotation(JsonAdapter.class);  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]                        IllegalArgumentException      [CONTEXT]        [BUGGY]  JsonAdapter  <?>  annotation  =  constructorConstructor.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	JsonAdapter  <?>  annotation  =  constructorConstructor.getAnnotation(JsonAdapter.class);	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.getTypeToken();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	114	None	replace
675	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  cannot  find  symbol  typeAdapter  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(typeAdapter!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	115	None	replace
676	[BUG]  [BUGGY]  final  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]                        IllegalArgumentException      [CONTEXT]        [BUGGY]  final  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	115	None	replace
677	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
678	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAssignedValue();  [CE]  inconvertible  types  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAssignedValue();	  Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  inconvertible  types	35	None	replace
679	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getAssignedValue()  :  annotation;  [CE]  inconvertible  types  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getAssignedValue()  :  annotation;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getAssignedValue()  :  annotation;	  Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  inconvertible  types	35	None	replace
680	[BUG]  [BUGGY]  Class  <?>  value  =  annotations.getAssignedValue();  [CE]  cannot  find  symbol  annotations  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotations.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotations.getAssignedValue();	  Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  cannot  find  symbol  annotations	35	None	replace
681	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getAssignedValue()  :  annotation;  [CE]  inconvertible  types  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getAssignedValue()  :  annotation;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getAssignedValue()  :  annotation;	  Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  inconvertible  types	35	None	replace
682	[BUG]  [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  }  [CE]  cannot  find  symbol  typeAdapter  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  }	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	27	None	replace
683	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getValueType()  :  null;  [CE]  inconvertible  types  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getValueType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getValueType()  :  null;	  final    Class    <?>    value    =    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	134	None	replace
684	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey();  [CE]  :  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    null;    	non-compiled	[CE]  :  expected	129	None	replace
685	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getAnnotation();  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getAnnotation();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getAnnotation();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	53	None	replace
686	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValue();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValue();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
687	[BUG]  [BUGGY]  Object  value  =  annotation  instanceof  Class  <?>?(Object  <?>)value  :  annotation.getValue();  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Object  value  =  annotation  instanceof  Class  <?>?(Object  <?>)value  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Object  value  =  annotation  instanceof  Class  <?>?(Object  <?>)value  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	53	None	replace
688	[BUG]  [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  cannot  find  symbol  typeAdapter  [FE]        IllegalArgumentException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	75	None	replace
689	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
690	[BUG]  [BUGGY]  Class  <?>  value  =  gson.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  gson.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  gson.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
691	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  JsonTypeInfo.class.getAnnotation(annotation.class);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  JsonTypeInfo.class.getAnnotation(annotation.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  JsonTypeInfo.class.getAnnotation(annotation.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
692	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  null);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  null);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.get(fieldType,  null);	  Class    <?>    value    =    annotation.get(fieldType,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
693	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  getTypeAdapterClass());  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  getTypeAdapterClass());  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.get(fieldType,  getTypeAdapterClass());	  Class    <?>    value    =    annotation.get(fieldType,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
694	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.get(typeType,  fieldAdapterClass);  [CE]  cannot  find  symbol  typeType  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.get(typeType,  fieldAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.get(typeType,  fieldAdapterClass);	  Class    <?>    value    =    annotation.get(fieldType,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol  typeType	93	None	replace
695	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapterFactory.getAnnotationValue();  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapterFactory.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapterFactory.getAnnotationValue();	  Class    <?>    value    =    annotations.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	60	None	replace
696	[BUG]  [BUGGY]  static  final  Class  <?>  value  =  annotation.get(fieldType);  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  static  final  Class  <?>  value  =  annotation.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	static  final  Class  <?>  value  =  annotation.get(fieldType);	  static    final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
697	[BUG]  [BUGGY]  Annotation  <?>  gson  =  annotation.getTypeToken();  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  gson  =  annotation.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  gson  =  annotation.getTypeToken();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    annotation.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
698	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getType();  [CE]  inconvertible  types  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	94	None	replace
699	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotation();  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotation();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotation();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	94	None	replace
700	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getJsonType();  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getJsonType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getJsonType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	94	None	replace
701	[BUG]  [BUGGY]  Class  <?>  value  =  gson.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  gson.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  gson.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonElement.class);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
702	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  JsonElement.class.getAnnotation(Annotation.class);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  JsonElement.class.getAnnotation(Annotation.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  JsonElement.class.getAnnotation(Annotation.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonElement.class);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
703	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class,  JsonElement.class);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class,  JsonElement.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class,  JsonElement.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonElement.class);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
704	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType));  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType));	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	143	None	replace
705	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.type();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.type();	  final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
706	[BUG]  [BUGGY]  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	125	None	replace
707	[BUG]  [BUGGY]  Class  <?>  value  =  getTypeAdapterClass().getName();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  getTypeAdapterClass().getName();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  getTypeAdapterClass().getName();	  Class    <?>    value    =    getTypeAdapterClass();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
708	[BUG]  [BUGGY]  Class  <?>  value  =  getTypeAdapterClass().getSimpleName();  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  getTypeAdapterClass().getSimpleName();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  getTypeAdapterClass().getSimpleName();	  Class    <?>    value    =    getTypeAdapterClass();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
709	[BUG]  [BUGGY]  Class  <?>  value  =  getTypeAdapterClass().getReferenceName();  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  getTypeAdapterClass().getReferenceName();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  getTypeAdapterClass().getReferenceName();	  Class    <?>    value    =    getTypeAdapterClass();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
710	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType),  fieldType.construct();  [CE]  ')'  expected  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType),  fieldType.construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType),  fieldType.construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeType)).construct();    	non-compiled	[CE]  ')'  expected	141	None	replace
711	[BUG]  [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.getTypeRegistry();  [CE]  not  a  statement  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.getTypeRegistry();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?  >>  fieldType  =  typeAdapter.getTypeRegistry();	  TypeToken    <?    >>    fieldType    =    typeAdapter.getType();    	non-compiled	[CE]  not  a  statement	142	None	replace
712	[BUG]  [BUGGY]  TypeToken  <?  >>  fieldType  =  getTypeAdapter().getType();  [CE]  not  a  statement  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  fieldType  =  getTypeAdapter().getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?  >>  fieldType  =  getTypeAdapter().getType();	  TypeToken    <?    >>    fieldType    =    typeAdapter.getType();    	non-compiled	[CE]  not  a  statement	142	None	replace
713	[BUG]  [BUGGY]  TypeToken  <?  >>  fieldType  =  value.getType();  [CE]  not  a  statement  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  fieldType  =  value.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?  >>  fieldType  =  value.getType();	  TypeToken    <?    >>    fieldType    =    typeAdapter.getType();    	non-compiled	[CE]  not  a  statement	142	None	replace
714	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getValue(fieldType,  fieldType);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getValue(fieldType,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getValue(fieldType,  fieldType);	  Class    <?>    value    =    annotation.getValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
715	[BUG]  [BUGGY]  Class  <?>  value  =  typeAdapter.getValue(fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeAdapter.getValue(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeAdapter.getValue(fieldType);	  Class    <?>    value    =    annotation.getValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	90	None	replace
716	[BUG]  [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	104	None	replace
717	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
718	[BUG]  [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	104	None	replace
719	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.getAnnotation(JsonTypeInfo.class,  fieldType);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.getAnnotation(JsonTypeInfo.class,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.getAnnotation(JsonTypeInfo.class,  fieldType);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
720	[BUG]  [BUGGY]  Class  <?>  value  =  fields.getAnnotation(JsonTypeInfo.class,  annotation);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fields.getAnnotation(JsonTypeInfo.class,  annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fields.getAnnotation(JsonTypeInfo.class,  annotation);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
721	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterLocation)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterLocation)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterLocation)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	21	None	replace
722	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    TypeToken    <?>    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	124	None	replace
723	[BUG]  [BUGGY]  final  Class  <?>  value  =  fieldType.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  fieldType.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  fieldType.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    TypeToken    <?>    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
724	[BUG]  [BUGGY]  final  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    TypeToken    <?>    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	124	None	replace
725	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getGenericAnnotation();  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getGenericAnnotation();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getGenericAnnotation();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	96	None	replace
726	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getParameterType(0);  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getParameterType(0);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getParameterType(0);	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	96	None	replace
727	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type.getAnnotation(JsonAnnotationTypeAdapter):  null;  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type.getAnnotation(JsonAnnotationTypeAdapter):  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type.getAnnotation(JsonAnnotationTypeAdapter):  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.type()    :    null;    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
728	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type.value()  :  null;  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type.value()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)type.value()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.type()    :    null;    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
729	[BUG]  [BUGGY]  Class  <?>  value  =  getTypeAdapter().getValue();  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  getTypeAdapter().getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  getTypeAdapter().getValue();	  Class    <?>    value    =    typeAdapter.getValue();    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	52	None	replace
730	[BUG]  [BUGGY]  Class  <?>  value  =  context.getAnnotationValue();  [CE]  cannot  find  symbol  context  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  context.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  context.getAnnotationValue();	  Class    <?>    value    =    this.annotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  context	58	None	replace
731	[BUG]  [BUGGY]  final  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]        IllegalArgumentException      [CONTEXT]        [BUGGY]  final  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	108	None	replace
732	[BUG]  [BUGGY]  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]          IllegalArgumentException      [CONTEXT]        [BUGGY]  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	108	None	replace
733	[BUG]  [BUGGY]  Constructor  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
734	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	24	None	replace
735	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getAnnotation();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getAnnotation();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation!=  null?  null  :  annotation.getAnnotation();	  Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
736	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation!=  null?  null  :  annotation.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
737	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getAnnotationType();  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getAnnotationType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation!=  null?  null  :  annotation.getAnnotationType();	  Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
738	[BUG]  [BUGGY]  TypeToken  <?>  value  =  annotation.get(fieldType);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  value  =  annotation.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?>  value  =  annotation.get(fieldType);	  Class    <?>    value    =    fieldType.get(annotation);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
739	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.get(annotation,  typeAdapterClass);  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.get(annotation,  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.get(annotation,  typeAdapterClass);	  Class    <?>    value    =    fieldType.get(annotation);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	37	None	replace
740	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.get(annotation);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.get(annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.get(annotation);	  Class    <?>    value    =    fieldType.get(annotation);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	37	None	replace
741	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.get(annotation,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.get(annotation,  typeAdapter);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.get(annotation,  typeAdapter);	  Class    <?>    value    =    fieldType.get(annotation);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	37	None	replace
742	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapter	31	None	add
743	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	31	None	add
744	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	31	None	add
745	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  annotation.type();  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  annotation.type();	  final    Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
746	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.type()  :  null;  [CE]  inconvertible  types  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.type()  :  null;	  final    Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  inconvertible  types	2	None	replace
747	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  typeAdapter.type();  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  typeAdapter.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  typeAdapter.type();	  final    Class    <?>    value    =    annotation.type();    	non-compiled	[CE]  inconvertible  types	2	None	replace
748	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getAssignedValueType()  :  null;  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getAssignedValueType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getAssignedValueType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getValueType()    :    null;    	non-compiled	[CE]  inconvertible  types	95	None	replace
749	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValueType();  [CE]  :  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValueType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getValueType()    :    null;    	non-compiled	[CE]  :  expected	95	None	replace
750	[BUG]  [BUGGY]  Class  <?>  value  =  gson.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  gson.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  gson.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
751	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
752	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class,  JsonToken.class);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class,  JsonToken.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class,  JsonToken.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonToken.class);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
753	[BUG]  [BUGGY]  Class  <?>  value  =  objectType.getRawClass();  [CE]  cannot  find  symbol  objectType  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  objectType.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  objectType.getRawClass();	  Class    <?>    value    =    typeAdapter.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  objectType	48	None	replace
754	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getAnnotationValue()  :  null;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getAnnotationValue()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getAnnotationValue()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getValue()    :    null;    	non-compiled	[CE]  inconvertible  types	56	None	replace
755	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawClass();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
756	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getGenericAnnotation();  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getGenericAnnotation();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getGenericAnnotation();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	51	None	replace
757	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeObjectFactory)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeObjectFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeObjectFactory)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	118	None	replace
758	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(null,  typeAdapterClass);  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(null,  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue(null,  typeAdapterClass);	  Class    <?>    value    =    annotation.getAnnotationValue(null);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	88	None	replace
759	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(fieldType,  null);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(fieldType,  null);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue(fieldType,  null);	  Class    <?>    value    =    annotation.getAnnotationValue(null);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
760	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeToken  gson  =  typeAdapter.getType();  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  typeToken  gson  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getClass();  typeToken  gson  =  typeAdapter.getType();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
761	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	4	None	add
762	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	4	None	add
763	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
764	[BUG]  [BUGGY]  final  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  final  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	111	None	replace
765	[BUG]  [BUGGY]  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	111	None	replace
766	[BUG]  [BUGGY]  Constructor  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
767	[BUG]  [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [CE]  cannot  find  symbol  typeAdapter  [FE]          IllegalArgumentException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	76	None	replace
768	[BUG]  [BUGGY]  Class  <?>  value  =  context.fieldTypeAdapter.value();  [CE]  package  context  does  not  exist  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  context.fieldTypeAdapter.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  context.fieldTypeAdapter.value();	  Class    <?>    value    =    this.fieldTypeAdapter.value();    	non-compiled	[CE]  package  context  does  not  exist	132	None	replace
769	[BUG]  [BUGGY]  Class  <?>  value  =  getTypeAdapter(fieldType).value();  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  getTypeAdapter(fieldType).value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  getTypeAdapter(fieldType).value();	  Class    <?>    value    =    this.fieldTypeAdapter.value();    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	132	None	replace
770	[BUG]  [BUGGY]  Class  <?>  value  =  object.getAnnotationValue();  [CE]  cannot  find  symbol  object  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  object.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  object.getAnnotationValue();	  Class    <?>    value    =    annotated.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  object	121	None	replace
771	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterLocation)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterLocation)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterLocation)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	18	None	replace
772	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.type();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.type();	  Class    <?>    value    =    typeAdapter.type();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
773	[BUG]  [BUGGY]  Class  <?>  value  =  objectType.type();  [CE]  cannot  find  symbol  objectType  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  objectType.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  objectType.type();	  Class    <?>    value    =    typeAdapter.type();    	non-compiled	[CE]  cannot  find  symbol  objectType	67	None	replace
774	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  JsonTypeInfo.class);	  Class    <?>    value    =    JsonTypeInfo.getAnnotation(annotation.class);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
775	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  null);  [CE]  cannot  find  symbol  JsonTypeInfo  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  null);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  null);	  Class    <?>    value    =    JsonTypeInfo.getAnnotation(annotation.class);    	non-compiled	[CE]  cannot  find  symbol  JsonTypeInfo	47	None	replace
776	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  context.class);  [CE]  cannot  find  symbol  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  context.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(annotation,  context.class);	  Class    <?>    value    =    JsonTypeInfo.getAnnotation(annotation.class);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
777	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  annotation;  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  annotation;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  annotation;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    annotation;    	non-compiled	[CE]  inconvertible  types	128	None	replace
778	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  type;  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  type;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  type;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    annotation;    	non-compiled	[CE]  inconvertible  types	128	None	replace
779	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	add	final  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;	  Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    	compilable	  [FE]  IllegalArgumentException  	120	2	replace
780	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;	  Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    	compilable	  [FE]  IllegalArgumentException  	120	2	replace
781	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAccessible();  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAccessible();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAccessible();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getKey();    	non-compiled	[CE]  inconvertible  types	66	None	replace
782	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getAssignedValue()  :  annotation;  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getAssignedValue()  :  annotation;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getAssignedValue()  :  annotation;	  final    Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  inconvertible  types	6	None	replace
783	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getAssignedValue()  :  annotation;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getAssignedValue()  :  annotation;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getAssignedValue()  :  annotation;	  final    Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  inconvertible  types	6	None	replace
784	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getAssignedValue()  :  annotation;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getAssignedValue()  :  annotation;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getAssignedValue()  :  annotation;	  final    Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  inconvertible  types	6	None	replace
785	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAssignedValue();  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAssignedValue();	  final    Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  inconvertible  types	6	None	replace
786	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	16	None	replace
787	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeName)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeName)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeName)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	16	None	replace
788	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.getValueType();  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.getValueType();	  Class    <?>    value    =    typeAdapter.getValueType();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
789	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  annotation.class();  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  annotation.class();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  annotation.class();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value    :    annotation.type();    	non-compiled	[CE]  ';'  expected	99	None	replace
790	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getValue()  :  null;  [CE]  inconvertible  types  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getValue()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getValue()  :  null;	  final    Class    <?>    value    =    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	1	None	replace
791	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValue()  :  null;  [CE]  inconvertible  types  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValue()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getValue()  :  null;	  final    Class    <?>    value    =    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	1	None	replace
792	[BUG]  [BUGGY]  Constructor  <?>  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
793	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.type();  [CE]  :  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.type();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.type()    :    null;    	non-compiled	[CE]  :  expected	70	None	replace
794	[BUG]  [BUGGY]  TypeToken  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.type()  :  null;  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.type()    :    null;    	non-compiled	[CE]  inconvertible  types	70	None	replace
795	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.valueType()  :  null;  [CE]  inconvertible  types  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.valueType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.valueType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.type()    :    null;    	non-compiled	[CE]  inconvertible  types	70	None	replace
796	[BUG]  [BUGGY]  TypeToken  t  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.type()  :  null;  [CE]  inconvertible  types  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  t  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  t  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.type()    :    null;    	non-compiled	[CE]  inconvertible  types	70	None	replace
797	[BUG]  [BUGGY]  static  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  static  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	static  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();	  final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
798	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(fieldType,  fieldType);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(fieldType,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue(fieldType,  fieldType);	  Class    <?>    value    =    annotation.getAnnotationValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
799	[BUG]  [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  cannot  find  symbol  typeAdapter  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	25	None	replace
800	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getKey()  :  null;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getKey()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getKey()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getKey()    :    null;    	non-compiled	[CE]  inconvertible  types	65	None	replace
801	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getObject()  :  null;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getObject()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getObject()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getKey()    :    null;    	non-compiled	[CE]  inconvertible  types	65	None	replace
802	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getKey();  [CE]  :  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getKey();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getKey()    :    null;    	non-compiled	[CE]  :  expected	65	None	replace
803	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.getKey();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.getKey();	  Class    <?>    value    =    typeAdapter.getKey();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
804	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.getClass();    ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	add
805	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]      IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.getClass();    ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	add
806	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]        IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.getClass();    ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	add
807	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.getClass();    TypeToken  gson  =  constructorConstructor.get(TypeToken.get(type)).construct();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	7	None	add
808	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getRawAnnotationValue();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getRawAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getRawAnnotationValue();	  Class    <?>    value    =    annotation.getRawAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
809	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeObjectClass)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	116	None	replace
810	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(type)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(type)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(type)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	116	None	replace
811	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.getAnnotationValue();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.getAnnotationValue();	  Class    <?>    value    =    typeAdapter.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
812	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawValue()  :  annotation.getValue();  [CE]  inconvertible  types  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawValue()  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getRawValue()  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValue()    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	133	None	replace
813	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getName()  :  annotation.getValue();  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getName()  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getName()  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValue()    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	133	None	replace
814	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getType()  :  annotation.getValue();  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getType()  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getType()  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValue()    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	133	None	replace
815	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  annotation.getType();  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  annotation.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValue()  :  annotation.getType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValue()    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	133	None	replace
816	[BUG]  [BUGGY]  final  Class  <?>  value  =  typeAdapterClass.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  typeAdapterClass  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  typeAdapterClass.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  typeAdapterClass.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	126	None	replace
817	[BUG]  [BUGGY]  final  Class  <?>  value  =  fieldType.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  fieldType.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  fieldType.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
818	[BUG]  [BUGGY]  final  Class  <?>  value  =  fieldType.value();  TypeToken  gson  =  typeAdapter.getType();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  fieldType.value();  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  fieldType.value();  TypeToken  gson  =  typeAdapter.getType();	  final    Class    <?>    value    =    annotation.value();    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
819	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.value();  TypeToken  gson  =  fieldType.getType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.value();  TypeToken  gson  =  fieldType.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.value();  TypeToken  gson  =  fieldType.getType();	  final    Class    <?>    value    =    annotation.value();    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	29	None	replace
820	[BUG]  [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [CE]  cannot  find  symbol  typeAdapter  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	82	None	replace
821	[BUG]  [BUGGY]  if(typeAdapter!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [CE]  cannot  find  symbol  typeAdapter  [FE]                        IllegalArgumentException      [CONTEXT]        [BUGGY]  if(typeAdapter!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(typeAdapter!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	82	None	replace
822	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  null;  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).type()    :    null;    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
823	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).fieldType()  :  null;  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).fieldType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).fieldType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).type()    :    null;    	non-compiled	[CE]  inconvertible  types	136	None	replace
824	[BUG]  [BUGGY]  TypeToken  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  null;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).type()    :    null;    	non-compiled	[CE]  inconvertible  types	136	None	replace
825	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  IllegalArgumentException  e  =  annotation  ==  null?  null  :  annotation.getClass();  [CE]  incompatible  types  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  IllegalArgumentException  e  =  annotation  ==  null?  null  :  annotation.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    IllegalArgumentException  e  =  annotation  ==  null?  null  :  annotation.getClass();	  	non-compiled	[CE]  incompatible  types	33	None	add
826	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  IllegalArgumentException  gson  =  annotation  ==  null?  null  :  annotation.getClass();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]      IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  IllegalArgumentException  gson  =  annotation  ==  null?  null  :  annotation.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    IllegalArgumentException  gson  =  annotation  ==  null?  null  :  annotation.getClass();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	33	None	add
827	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  Validate.notNull(annotation);  [CE]  cannot  find  symbol  Validate  [FE]        IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  Validate.notNull(annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    Validate.notNull(annotation);	  	non-compiled	[CE]  cannot  find  symbol  Validate	33	None	add
828	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  IllegalArgumentException  ia  =  annotation  ==  null?  null  :  annotation.getClass();  [CE]  incompatible  types  [FE]          IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  IllegalArgumentException  ia  =  annotation  ==  null?  null  :  annotation.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    IllegalArgumentException  ia  =  annotation  ==  null?  null  :  annotation.getClass();	  	non-compiled	[CE]  incompatible  types	33	None	add
829	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]            IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	33	None	add
830	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  IllegalArgumentException.printStackTrace();  [CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context  [FE]              IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  IllegalArgumentException.printStackTrace();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    IllegalArgumentException.printStackTrace();	  	non-compiled	[CE]  non-static  method  printStackTrace()  cannot  be  referenced  from  a  static  context	33	None	add
831	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]                IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	33	None	add
832	[BUG]  [BUGGY]  Constructor  <?>  gson  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  gson  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  gson  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  final    Class    <?>    value    =    annotation.value();    TypeToken    <?>    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
833	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
834	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeName)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeName)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeName)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	17	None	replace
835	[BUG]  [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  cannot  find  symbol  typeAdapter  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	26	None	replace
836	[BUG]  [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	ConstructorConstructor  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  variable  constructorConstructor  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	26	None	replace
837	[BUG]  [BUGGY]  TypeAdapter  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	26	None	replace
838	[BUG]  [BUGGY]  Object  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  annotation.getRawClass();  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Object  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Object  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawClass()  :  annotation.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getRawClass()    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	97	None	replace
839	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  IllegalArgumentException  e  =  annotation!=  null?  annotation.getClass()  :  null;  [CE]  incompatible  types  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  IllegalArgumentException  e  =  annotation!=  null?  annotation.getClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    IllegalArgumentException  e  =  annotation!=  null?  annotation.getClass()  :  null;	  	non-compiled	[CE]  incompatible  types	119	None	add
840	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  IllegalArgumentException  e  =  annotation  ==  null?  annotation.getClass()  :  null;  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  IllegalArgumentException  e  =  annotation  ==  null?  annotation.getClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    IllegalArgumentException  e  =  annotation  ==  null?  annotation.getClass()  :  null;	  	non-compiled	[CE]  incompatible  types	119	None	add
841	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  Validate.notNull(annotation);  [CE]  cannot  find  symbol  Validate  [FE]        IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  Validate.notNull(annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    Validate.notNull(annotation);	  	non-compiled	[CE]  cannot  find  symbol  Validate	119	None	add
842	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  IllegalArgumentException  gson  =  annotation!=  null?  annotation.getClass()  :  null;  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  IllegalArgumentException  gson  =  annotation!=  null?  annotation.getClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    IllegalArgumentException  gson  =  annotation!=  null?  annotation.getClass()  :  null;	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	119	None	add
843	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  if(annotation!=  null)  {  IllegalArgumentException  e  =  annotation.getClass();  if(e!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  reached  end  of  file  while  parsing  [FE]            IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  if(annotation!=  null)  {  IllegalArgumentException  e  =  annotation.getClass();  if(e!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    if(annotation!=  null)  {  IllegalArgumentException  e  =  annotation.getClass();  if(e!=  null)  {  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	add
844	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  if(annotation!=  null)  {  IllegalArgumentException  iae  =  annotation.getClass();  if(iae!=  null)  {  typeAdapter  =  constructorConstructor.get(iae);  }  [CE]  reached  end  of  file  while  parsing  [FE]              IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  if(annotation!=  null)  {  IllegalArgumentException  iae  =  annotation.getClass();  if(iae!=  null)  {  typeAdapter  =  constructorConstructor.get(iae);  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    if(annotation!=  null)  {  IllegalArgumentException  iae  =  annotation.getClass();  if(iae!=  null)  {  typeAdapter  =  constructorConstructor.get(iae);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	add
845	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getRawClass();  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getRawClass();	  final    Class    <?>    value    =    annotation.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
846	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
847	[BUG]  [BUGGY]  final  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  final  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct();	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	103	None	replace
848	[BUG]  [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [CE]  cannot  find  symbol  typeAdapter  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  }	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	77	None	replace
849	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    fieldType.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
850	[BUG]  [BUGGY]  Class  <?>  value  =  type  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  type.type();  [CE]  cannot  find  symbol  type  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  type  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  type.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  type  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  type.type();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation    :    type.type();    	non-compiled	[CE]  cannot  find  symbol  type	102	None	replace
851	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  typeFactory.type();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  typeFactory.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  typeFactory.type();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation    :    type.type();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
852	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  type.value();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  type.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  type.value();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation    :    type.type();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
853	[BUG]  [BUGGY]  Class  <?>  value  =  fieldInfo.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldInfo.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldInfo.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    typeInfo.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
854	[BUG]  [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  cannot  find  symbol  typeAdapter  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	78	None	replace
855	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  typeAdapterFactory.value();  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  typeAdapterFactory.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  typeAdapterFactory.value();	  TypeAdapter    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	12	None	replace
856	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  constructorConstructor.value();  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  constructorConstructor.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  constructorConstructor.value();	  TypeAdapter    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
857	[BUG]  [BUGGY]  Class  <?>  value  =  objectTypeAdapter.value();  [CE]  cannot  find  symbol  objectTypeAdapter  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  objectTypeAdapter.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  objectTypeAdapter.value();	  Class    <?>    value    =    fieldTypeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol  objectTypeAdapter	14	None	replace
858	[BUG]  [BUGGY]  Class  <?>  value  =  constructorFactory.get(fieldType);  [CE]  cannot  find  symbol  constructorFactory  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorFactory.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorFactory.get(fieldType);	  Class    <?>    value    =    fields.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  constructorFactory	40	None	replace
859	[BUG]  [BUGGY]  Class  <?>  value  =  constructorStructure.get(fieldType);  [CE]  cannot  find  symbol  constructorStructure  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorStructure.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorStructure.get(fieldType);	  Class    <?>    value    =    fields.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  constructorStructure	40	None	replace
860	[BUG]  [BUGGY]  Class  <?>  value  =  constructorType.get(fieldType);  [CE]  cannot  find  symbol  constructorType  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorType.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorType.get(fieldType);	  Class    <?>    value    =    fields.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  constructorType	40	None	replace
861	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.get(typeToken);  [CE]  cannot  find  symbol  typeToken  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.get(typeToken);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.get(typeToken);	  Class    <?>    value    =    constructorConstructor.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeToken	91	None	replace
862	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.get(TypeToken.get(fieldType)).construct();	  Class    <?>    value    =    constructorConstructor.get(fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	91	None	replace
863	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.get(typeToken.get(fieldType));  [CE]  cannot  find  symbol  typeToken  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.get(typeToken.get(fieldType));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.get(typeToken.get(fieldType));	  Class    <?>    value    =    constructorConstructor.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeToken	91	None	replace
864	[BUG]  [BUGGY]  Class  <?>  value  =  constructorTypeAdapter.get(fieldType);  [CE]  cannot  find  symbol  constructorTypeAdapter  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorTypeAdapter.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorTypeAdapter.get(fieldType);	  Class    <?>    value    =    typeAdapter.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol  constructorTypeAdapter	41	None	replace
865	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawClass();  [CE]  :  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getRawClass()    :    null;    	non-compiled	[CE]  :  expected	50	None	replace
866	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.value(fieldType);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.value(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.value(fieldType);	  Class    <?>    value    =    constructorConstructor.value();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
867	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getAnnotationValue()  :  annotation;  [CE]  inconvertible  types  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getAnnotationValue()  :  annotation;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getAnnotationValue()  :  annotation;	  final    Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  inconvertible  types	85	None	replace
868	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getAnnotationValue()  :  null;  [CE]  inconvertible  types  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getAnnotationValue()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getAnnotationValue()  :  null;	  final    Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  inconvertible  types	85	None	replace
869	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getAnnotationValue()  :  null;  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getAnnotationValue()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getAnnotationValue()  :  null;	  final    Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  inconvertible  types	85	None	replace
870	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getAccessible();  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getAccessible();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getAccessible();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getKey();    	non-compiled	[CE]  inconvertible  types	64	None	replace
871	[BUG]  [BUGGY]  TypeToken  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.type();    	non-compiled	[CE]  inconvertible  types	69	None	replace
872	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.type();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
873	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value?  annotation.type()  :  null;  [CE]  :  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value?  annotation.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation  instanceof  Class  <?>?(Class  <?>)value?  annotation.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.type();    	non-compiled	[CE]  :  expected	69	None	replace
874	[BUG]  [BUGGY]  Annotation  annotation  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Annotation  annotation  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  annotation  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.type();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.type();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
875	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.value()  :  null;  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.value()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.value()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()    :    null;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
876	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter?)annotation.type()  :  null;  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter?)annotation.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter?)annotation.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()    :    null;    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
877	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()  :  typeAdapter;  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()  :  typeAdapter;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()  :  typeAdapter;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()    :    null;    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
878	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  TypeToken  gson  =  getTypeToken();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  TypeToken  gson  =  getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    TypeToken  gson  =  getTypeToken();	  	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	83	None	add
879	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter).construct().create(gson,  fieldType);  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter).construct().create(gson,  fieldType);	  	non-compiled	[CE]  ')'  expected	83	None	add
880	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  JsonNull.class.getAnnotation(Annotation.class);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  JsonNull.class.getAnnotation(Annotation.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  JsonNull.class.getAnnotation(Annotation.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonNull.class);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
881	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class,  JsonNull.class);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class,  JsonNull.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class,  JsonNull.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonNull.class);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
882	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  JsonNull.class.getAnnotation(annotation.class);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  JsonNull.class.getAnnotation(annotation.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  JsonNull.class.getAnnotation(annotation.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonNull.class);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
883	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
884	[BUG]  [BUGGY]  final  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  final  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	113	None	replace
885	[BUG]  [BUGGY]  final  Class  <?>  value  =  fieldType.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  fieldType.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  fieldType.getAnnotation(JsonTypeInfo.class);	  final    Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
886	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(false,  typeAdapterClass);  [CE]  cannot  find  symbol  typeAdapterClass  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotationValue(false,  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotationValue(false,  typeAdapterClass);	  Class    <?>    value    =    annotation.getAnnotationValue(false);    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	62	None	replace
887	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getAnnotationValue(false);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getAnnotationValue(false);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getAnnotationValue(false);	  Class    <?>    value    =    annotation.getAnnotationValue(false);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
888	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotation(JsonTypeInfo.class);  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	54	None	replace
889	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotation(JsonNull.class);  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotation(JsonNull.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotation(JsonNull.class);	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	54	None	replace
890	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotation(JsonObject.class);  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotation(JsonObject.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotation(JsonObject.class);	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	54	None	replace
891	[BUG]  [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.type;  [CE]  not  a  statement  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.type;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?  >>  fieldType  =  typeAdapter.type;	  TypeToken    <?    >>    fieldType    =    typeAdapter.getType();    	non-compiled	[CE]  not  a  statement	142	None	replace
892	[BUG]  [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.findType(typeName);  [CE]  not  a  statement  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.findType(typeName);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?  >>  fieldType  =  typeAdapter.findType(typeName);	  TypeToken    <?    >>    fieldType    =    typeAdapter.getType();    	non-compiled	[CE]  not  a  statement	142	None	replace
893	[BUG]  [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.findType(type);  [CE]  not  a  statement  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?  >>  fieldType  =  typeAdapter.findType(type);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?  >>  fieldType  =  typeAdapter.findType(type);	  TypeToken    <?    >>    fieldType    =    typeAdapter.getType();    	non-compiled	[CE]  not  a  statement	142	None	replace
894	[BUG]  [BUGGY]  Class  <?>  value  =  object.value();  [CE]  cannot  find  symbol  object  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  object.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  object.value();	  Class    <?>    value    =    type.value();    	non-compiled	[CE]  cannot  find  symbol  object	15	None	replace
895	[BUG]  [BUGGY]  Class  <?>  value  =  element.value();  [CE]  cannot  find  symbol  element  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  element.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  element.value();	  Class    <?>    value    =    type.value();    	non-compiled	[CE]  cannot  find  symbol  element	15	None	replace
896	[BUG]  [BUGGY]  Class  <?>  value  =  array.value();  [CE]  cannot  find  symbol  array  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  array.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  array.value();	  Class    <?>    value    =    type.value();    	non-compiled	[CE]  cannot  find  symbol  array	15	None	replace
897	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.class.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.class.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.class.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    this.annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
898	[BUG]  [BUGGY]  Class  <?>  value  =  fieldTypeInfo.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldTypeInfo.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldTypeInfo.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    this.annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
899	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	110	None	replace
900	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(type);  [CE]  :  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(type);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(type);	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.type()    :    null;    	non-compiled	[CE]  :  expected	68	None	replace
901	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.type()  :  null;  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.type()    :    null;    	non-compiled	[CE]  ';'  expected	68	None	replace
902	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(random()  :  null);  [CE]  ')'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(random()  :  null);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(random()  :  null);	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.type()    :    null;    	non-compiled	[CE]  ')'  expected	68	None	replace
903	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(annotation.class):  null;  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(annotation.class):  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(annotation.class):  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.type()    :    null;    	non-compiled	[CE]  inconvertible  types	68	None	replace
904	[BUG]  [BUGGY]  Class  <?>  value  =  typeClass.getAnnotationValue();  [CE]  cannot  find  symbol  typeClass  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeClass.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeClass.getAnnotationValue();	  Class    <?>    value    =    typeAnnotation.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  typeClass	59	None	replace
905	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  Collections.emptyList();  [CE]  cannot  find  symbol  Collections  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  Collections.emptyList();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  Collections.emptyList();	  final    Class    <?>    value    =    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol  Collections	8	None	replace
906	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getKey();  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation.getKey();	  final    Class    <?>    value    =    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
907	[BUG]  [BUGGY]  Class  <?>  value  =  this.fieldTypeAdapter.getClass();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.fieldTypeAdapter.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.fieldTypeAdapter.getClass();	  Class    <?>    value    =    typeAdapter.getClass();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	36	None	replace
908	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getRawClass();  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    null;    	non-compiled	[CE]  ';'  expected	131	None	replace
909	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>()?((  Class  <?>)annotation).getRawClass()  :  null;  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>()?((  Class  <?>)annotation).getRawClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>()?((  Class  <?>)annotation).getRawClass()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    null;    	non-compiled	[CE]  ';'  expected	131	None	replace
910	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getRawClass(),  typeAdapterClass);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getRawClass(),  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getRawClass(),  typeAdapterClass);	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    null;    	non-compiled	[CE]  ';'  expected	131	None	replace
911	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getRawClass(),  null;  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getRawClass(),  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getRawClass(),  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getRawClass()    :    null;    	non-compiled	[CE]  ';'  expected	131	None	replace
912	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getValue(null),  fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getValue(null),  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getValue(null),  fieldType);	  Class    <?>    value    =    annotation.getValue(null);    	non-compiled	[CE]  ';'  expected	89	None	replace
913	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawValueType();  [CE]  inconvertible  types  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getRawValueType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	94	None	replace
914	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotationValueType();  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotationValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getAnnotationValueType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	94	None	replace
915	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).constructor();  [CE]  cannot  find  symbol  typeAdapter  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).constructor();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).constructor();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	117	None	replace
916	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.get(fieldType).getRawClass();  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.get(fieldType).getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.get(fieldType).getRawClass();	  Class    <?>    value    =    constructorConstructor.get(fieldType);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
917	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.get(fieldType,  null);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.get(fieldType,  null);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.get(fieldType,  null);	  Class    <?>    value    =    constructorConstructor.get(fieldType);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	91	None	replace
918	[BUG]  [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	115	None	replace
919	[BUG]  [BUGGY]  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]                        IllegalArgumentException      [CONTEXT]        [BUGGY]  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	115	None	replace
920	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getAssignedValue()  :  annotation.getAssignedValue();  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getAssignedValue()  :  annotation.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getAssignedValue()  :  annotation.getAssignedValue();	  final    Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  inconvertible  types	6	None	replace
921	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)value).getAssignedValue()  :  annotation.getAssignedValue();  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)value).getAssignedValue()  :  annotation.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)value).getAssignedValue()  :  annotation.getAssignedValue();	  final    Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  inconvertible  types	6	None	replace
922	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotations).getAssignedValue()  :  annotation.getAssignedValue();  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotations).getAssignedValue()  :  annotation.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotations).getAssignedValue()  :  annotation.getAssignedValue();	  final    Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  inconvertible  types	6	None	replace
923	[BUG]  [BUGGY]  Class  <?>  annotation  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  annotation  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  annotation  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonElement.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	140	None	replace
924	[BUG]  [BUGGY]  Class  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  annotation  =  annotation.getAnnotation(JsonElement.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonElement.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	140	None	replace
925	[BUG]  [BUGGY]  Class  <?>  value  =  fieldTypes.getAnnotationValue();  [CE]  cannot  find  symbol  fieldTypes  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldTypes.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldTypes.getAnnotationValue();	  Class    <?>    value    =    annotations.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	60	None	replace
926	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getSimpleName();  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getSimpleName();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.getSimpleName();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getKey();    	non-compiled	[CE]  inconvertible  types	66	None	replace
927	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  fieldClass);  [CE]  cannot  find  symbol  fieldClass  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  fieldClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.get(fieldType,  fieldClass);	  Class    <?>    value    =    annotation.get(fieldType,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol  fieldClass	93	None	replace
928	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  objectClass);  [CE]  cannot  find  symbol  objectClass  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.get(fieldType,  objectClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.get(fieldType,  objectClass);	  Class    <?>    value    =    annotation.get(fieldType,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol  objectClass	93	None	replace
929	[BUG]  [BUGGY]  Class  <?>  fieldType  =  annotation.get(baseType);  [CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  fieldType  =  annotation.get(baseType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  fieldType  =  annotation.get(baseType);	  Class    <?>    fieldType    =    annotation.get(fieldType);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	38	None	replace
930	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.clone();  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.clone();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation  :  annotation.clone();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation    :    annotation.getRawClass();    	non-compiled	[CE]  inconvertible  types	96	None	replace
931	[BUG]  [BUGGY]  Class  <?>  value  =  this.fieldTypeAdapter.getRawClass();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.fieldTypeAdapter.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.fieldTypeAdapter.getRawClass();	  Class    <?>    value    =    typeAdapter.getRawClass();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	48	None	replace
932	[BUG]  [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,  fieldType);	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	22	None	replace
933	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    TypeToken    <?>    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	124	None	replace
934	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.getValue();  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValue();    	non-compiled	[CE]  ';'  expected	53	None	replace
935	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getAnnotation(JsonTypeInfo.class);  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)value  :  annotation.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	53	None	replace
936	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>()?(Class  <?>)value  :  annotation.getValue();  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>()?(Class  <?>)value  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>()?(Class  <?>)value  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValue();    	non-compiled	[CE]  ';'  expected	53	None	replace
937	[BUG]  [BUGGY]  Class  <?>  annotation  =  fieldType.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  annotation  =  fieldType.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  annotation  =  fieldType.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonToken.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	138	None	replace
938	[BUG]  [BUGGY]  Class  <?>  annotation  =  JsonToken.class.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  annotation  =  JsonToken.class.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  annotation  =  JsonToken.class.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonToken.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	138	None	replace
939	[BUG]  [BUGGY]  Class  <?>  annotation  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  annotation  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  annotation  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonToken.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonToken.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	138	None	replace
940	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  TypeToken  <?>  fieldType  =  annotation!=  null?  null  :  annotation.getClass();  [CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  TypeToken  <?>  fieldType  =  annotation!=  null?  null  :  annotation.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    TypeToken  <?>  fieldType  =  annotation!=  null?  null  :  annotation.getClass();	  	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	31	None	add
941	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	31	None	add
942	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getAnnotation(JsonNative.class);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getAnnotation(JsonNative.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation!=  null?  null  :  annotation.getAnnotation(JsonNative.class);	  Class    <?>    value    =    annotation!=    null?    null    :    annotation.getClass();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
943	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.getObject()  :  null;  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.getObject()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.getObject()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.type()    :    null;    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
944	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.get(type);  [CE]  :  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.get(type);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.get(type);	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotations.type()    :    null;    	non-compiled	[CE]  :  expected	100	None	replace
945	[BUG]  [BUGGY]  Class  <?>  value  =  objectType.getAnnotationValue();  [CE]  cannot  find  symbol  objectType  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  objectType.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  objectType.getAnnotationValue();	  Class    <?>    value    =    fieldType.getAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol  objectType	87	None	replace
946	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getAnnotationValue()  :  annotation.getAnnotationValue();  [CE]  inconvertible  types  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getAnnotationValue()  :  annotation.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getAnnotationValue()  :  annotation.getAnnotationValue();	  final    Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  inconvertible  types	85	None	replace
947	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)value).getAnnotationValue()  :  annotation.getAnnotationValue();  [CE]  inconvertible  types  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)value).getAnnotationValue()  :  annotation.getAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)value).getAnnotationValue()  :  annotation.getAnnotationValue();	  final    Class    <?>    value    =    annotation.getAnnotationValue();    	non-compiled	[CE]  inconvertible  types	85	None	replace
948	[BUG]  [BUGGY]  Class  <?>  value  =  classAdapter.value();  [CE]  cannot  find  symbol  classAdapter  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  classAdapter.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  classAdapter.value();	  Class    <?>    value    =    typeAdapterClass.value();    	non-compiled	[CE]  cannot  find  symbol  classAdapter	10	None	replace
949	[BUG]  [BUGGY]  Class  <?>  value  =  this.fieldTypeAdapter.type();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.fieldTypeAdapter.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.fieldTypeAdapter.type();	  Class    <?>    value    =    typeAdapter.type();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	67	None	replace
950	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  type,  fieldType.type();  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  type,  fieldType.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation  :  type,  fieldType.type();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation    :    type.type();    	non-compiled	[CE]  ';'  expected	102	None	replace
951	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.get(key);  [CE]  cannot  find  symbol  key  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.get(key);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.get(key);	  Class    <?>    value    =    fieldType.get(annotations);    	non-compiled	[CE]  cannot  find  symbol  key	39	None	replace
952	[BUG]  [BUGGY]  Class  <?>  value  =  this.fieldType.getValueType();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.fieldType.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.fieldType.getValueType();	  Class    <?>    value    =    typeAdapter.getValueType();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	71	None	replace
953	[BUG]  [BUGGY]  Class  <?>  value  =  constructorConstructor.class.getSimpleName();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  constructorConstructor.class.getSimpleName();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  constructorConstructor.class.getSimpleName();	  Class    <?>    value    =    constructorConstructor.value();    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
954	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  type;  [CE]  inconvertible  types  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  type;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getValueType()  :  type;	  final    Class    <?>    value    =    annotation.getValueType();    	non-compiled	[CE]  inconvertible  types	134	None	replace
955	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValue()  :  annotation.getValue();  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValue()  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValue()  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValue()    :    annotation.getValue();    	non-compiled	[CE]  ';'  expected	133	None	replace
956	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValue();  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValue()    :    annotation.getValue();    	non-compiled	[CE]  ';'  expected	133	None	replace
957	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getKey()  :  annotation.getValue();  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getKey()  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getKey()  :  annotation.getValue();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValue()    :    annotation.getValue();    	non-compiled	[CE]  ';'  expected	133	None	replace
958	[BUG]  [BUGGY]  Class  <?>  value  =  annotated.getAssignedValue();  [CE]  cannot  find  symbol  annotated  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotated.getAssignedValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotated.getAssignedValue();	  Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  cannot  find  symbol  annotated	35	None	replace
959	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAssignedValue(fieldType);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAssignedValue(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAssignedValue(fieldType);	  Class    <?>    value    =    annotation.getAssignedValue();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
960	[BUG]  [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	111	None	replace
961	[BUG]  [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  not  a  statement	28	None	replace
962	[BUG]  [BUGGY]  TypeAdapter  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  not  a  statement	28	None	replace
963	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
964	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
965	[BUG]  [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	26	None	replace
966	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  annotated.type();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  annotated.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value  :  annotated.type();	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)value    :    annotation.type();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
967	[BUG]  [BUGGY]  TypeToken  gson  =  fieldTypeAdapter.getType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  fieldTypeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  fieldTypeAdapter.getType();	  TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	19	None	replace
968	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getClass()  :  null;  [CE]  inconvertible  types  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getClass()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getValue()    :    null;    	non-compiled	[CE]  inconvertible  types	56	None	replace
969	[BUG]  [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	113	None	replace
970	[BUG]  [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	113	None	replace
971	[BUG]  [BUGGY]  Class  <?>  value  =  this.fieldTypeAdapter.getKey();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.fieldTypeAdapter.getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.fieldTypeAdapter.getKey();	  Class    <?>    value    =    typeAdapter.getKey();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	63	None	replace
972	[BUG]  [BUGGY]  Class  <?>  value  =  getTypeAdapterClass().getComponentType();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  getTypeAdapterClass().getComponentType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  getTypeAdapterClass().getComponentType();	  Class    <?>    value    =    getTypeAdapterClass();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
973	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getRawClassAnnotationValue();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getRawClassAnnotationValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getRawClassAnnotationValue();	  Class    <?>    value    =    annotation.getRawAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
974	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getRawAnnotationValue(fieldType);  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getRawAnnotationValue(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getRawAnnotationValue(fieldType);	  Class    <?>    value    =    annotation.getRawAnnotationValue();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
975	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.construct(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.construct(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorConstructor.construct(TypeToken.get(typeAdapterClass));	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
976	[BUG]  [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  JsonTypeInfo.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  JsonTypeInfo.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    typeInfo.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
977	[BUG]  [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  JsonAdapter  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  }	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	103	None	replace
978	[BUG]  [BUGGY]  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  final    Class    <?>    value    =    annotation.value();    JsonAdapter    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	103	None	replace
979	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
980	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
981	[BUG]  [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]                        IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,  fieldType);	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	81	None	replace
982	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>()?((  Class  <?>)annotation).type()  :  null;  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>()?((  Class  <?>)annotation).type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>()?((  Class  <?>)annotation).type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).type()    :    null;    	non-compiled	[CE]  ';'  expected	136	None	replace
983	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>  ||  annotation  instanceof  Class  <?>((  Class  <?>)annotation).type()  :  null;  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>  ||  annotation  instanceof  Class  <?>((  Class  <?>)annotation).type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>  ||  annotation  instanceof  Class  <?>((  Class  <?>)annotation).type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).type()    :    null;    	non-compiled	[CE]  ';'  expected	136	None	replace
984	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).fieldType()  :  null;  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).fieldType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).fieldType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).type()    :    null;    	non-compiled	[CE]  ';'  expected	136	None	replace
985	[BUG]  [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  final    Class    <?>    value    =    annotation.value();    TypeToken    <?>    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	123	None	replace
986	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.getValueType();  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.getValueType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValueType();    	non-compiled	[CE]  ';'  expected	72	None	replace
987	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>()?(Class  <?>)value  :  annotation.getValueType();  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>()?(Class  <?>)value  :  annotation.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>()?(Class  <?>)value  :  annotation.getValueType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getValueType();    	non-compiled	[CE]  ';'  expected	72	None	replace
988	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeClass));  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeClass));	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass));    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	143	None	replace
989	[BUG]  [BUGGY]  Class  <?>  value  =  typeClass.getValueType();  [CE]  cannot  find  symbol  typeClass  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  typeClass.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  typeClass.getValueType();	  Class    <?>    value    =    typeAnnotation.getValueType();    	non-compiled	[CE]  cannot  find  symbol  typeClass	74	None	replace
990	[BUG]  [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType),  fieldType);  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType),  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeType),  fieldType);	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeType)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	141	None	replace
991	[BUG]  [BUGGY]  TypeToken  t  =  constructorConstructor.get(TypeToken.get(typeType)).construct();  [CE]  cannot  find  symbol  typeType  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  TypeToken  t  =  constructorConstructor.get(TypeToken.get(typeType)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  t  =  constructorConstructor.get(TypeToken.get(typeType)).construct();	  TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeType)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeType	141	None	replace
992	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.type();  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.type();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.type();    	non-compiled	[CE]  ';'  expected	69	None	replace
993	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>  ||  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.type();  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>  ||  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>  ||  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.type();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.type();    	non-compiled	[CE]  ';'  expected	69	None	replace
994	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>()?(Class  <?>)value  :  annotation.type();  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>()?(Class  <?>)value  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>()?(Class  <?>)value  :  annotation.type();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.type();    	non-compiled	[CE]  ';'  expected	69	None	replace
995	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)value?  annotation.type()  :  annotation.type();  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)value?  annotation.type()  :  annotation.type();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)value?  annotation.type()  :  annotation.type();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.type();    	non-compiled	[CE]  ';'  expected	69	None	replace
996	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass),  fieldType).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	17	None	replace
997	[BUG]  [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Class    <?>    value    =    annotation.getClass();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	78	None	replace
998	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)type.type()  :  null;  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)type.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)type.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.type()    :    null;    	non-compiled	[CE]  ';'  expected	70	None	replace
999	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)object.type()  :  null;  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)object.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)object.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.type()    :    null;    	non-compiled	[CE]  ';'  expected	70	None	replace
1000	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  Collections.emptyList();  [CE]  cannot  find  symbol  Collections  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  Collections.emptyList();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  Collections.emptyList();	  Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    	non-compiled	[CE]  cannot  find  symbol  Collections	120	None	replace
1001	[BUG]  [BUGGY]  Class  <?>  value  =  this.fieldTypeAdapter.get(fieldType);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.fieldTypeAdapter.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.fieldTypeAdapter.get(fieldType);	  Class    <?>    value    =    typeAdapter.get(fieldType);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	41	None	replace
1002	[BUG]  [BUGGY]  Class  <?>  fieldType  =  typeAdapter.get(fieldType);  [CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  fieldType  =  typeAdapter.get(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  fieldType  =  typeAdapter.get(fieldType);	  Class    <?>    value    =    typeAdapter.get(fieldType);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	41	None	replace
1003	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getValueType(fieldType);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getValueType(fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getValueType(fieldType);	  Class    <?>    value    =    fieldType.get(annotation);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
1004	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawValueType()  :  null;  [CE]  inconvertible  types  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawValueType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getRawValueType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getValueType()    :    null;    	non-compiled	[CE]  inconvertible  types	95	None	replace
1005	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValueClass()  :  null;  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValueClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?  ((  Class  <?>)annotation).getValueClass()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?    ((    Class    <?>)annotation).getValueType()    :    null;    	non-compiled	[CE]  inconvertible  types	95	None	replace
1006	[BUG]  [BUGGY]  final  Class  <?>  value  =  fieldType.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  fieldType.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  fieldType.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1007	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorProstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorProstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorProstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1008	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorClass.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorClass.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorClass.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    Constructor    <?>    constructorConstructor    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1009	[BUG]  [BUGGY]  Class  <?>  value  =  object.getValue();  [CE]  cannot  find  symbol  object  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  object.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  object.getValue();	  Class    <?>    value    =    this.annotation.getValue();    	non-compiled	[CE]  cannot  find  symbol  object	55	None	replace
1010	[BUG]  [BUGGY]  Class  <?>  annotation  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]        IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  annotation  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  annotation  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonNull.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	137	None	replace
1011	[BUG]  [BUGGY]  Class  <?>  annotation  =  fieldType.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  annotation  =  fieldType.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  annotation  =  fieldType.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonNull.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	137	None	replace
1012	[BUG]  [BUGGY]  Class  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonNull.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	137	None	replace
1013	[BUG]  [BUGGY]  Class  <?>  annotation  =  JsonNull.class.getAnnotation(annotation.getClass());  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  annotation  =  JsonNull.class.getAnnotation(annotation.getClass());  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  annotation  =  JsonNull.class.getAnnotation(annotation.getClass());	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonNull.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	137	None	replace
1014	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	33	None	add
1015	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeToken  <?>  typeAdapterClass  =  annotation  ==  null?  null  :  annotation.getClass();  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeToken  <?>  typeAdapterClass  =  annotation  ==  null?  null  :  annotation.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    TypeToken  <?>  typeAdapterClass  =  annotation  ==  null?  null  :  annotation.getClass();	  	non-compiled	[CE]  incompatible  types	33	None	add
1016	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  if(annotation!=  null)  {  IllegalArgumentException  e  =  annotation.getException();  if(e!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]        IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  if(annotation!=  null)  {  IllegalArgumentException  e  =  annotation.getException();  if(e!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    if(annotation!=  null)  {  IllegalArgumentException  e  =  annotation.getException();  if(e!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	add
1017	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]          IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	33	None	add
1018	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  if(annotation!=  null)  {  IllegalArgumentException  e  =  annotation.getException();  if(e  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]            IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.getClass();  if(annotation!=  null)  {  IllegalArgumentException  e  =  annotation.getException();  if(e  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation    ==    null?    null    :    annotation.getClass();    if(annotation!=  null)  {  IllegalArgumentException  e  =  annotation.getException();  if(e  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	add
1019	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getRawClass(),  null;  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getRawClass(),  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getRawClass(),  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getRawClass()    :    null;    	non-compiled	[CE]  ';'  expected	50	None	replace
1020	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawClass()  :  Collections.emptyList();  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawClass()  :  Collections.emptyList();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawClass()  :  Collections.emptyList();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	50	None	replace
1021	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getRawClass();  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getRawClass()    :    null;    	non-compiled	[CE]  ';'  expected	50	None	replace
1022	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(0):  null;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(0):  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.get(0):  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getKey()    :    null;    	non-compiled	[CE]  inconvertible  types	65	None	replace
1023	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)value).getValue()  :  annotation.getValue();  [CE]  inconvertible  types  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)value).getValue()  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)value).getValue()  :  annotation.getValue();	  final    Class    <?>    value    =    annotation.getValue();    	non-compiled	[CE]  inconvertible  types	1	None	replace
1024	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotation.getRawClass();  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotation.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.getRawClass()    :    null;    	non-compiled	[CE]  ';'  expected	98	None	replace
1025	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.clone()  :  null;  [CE]  inconvertible  types  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.clone()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.clone()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	98	None	replace
1026	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotation.getRawClass(),  null;  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotation.getRawClass(),  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotation.getRawClass(),  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.getRawClass()    :    null;    	non-compiled	[CE]  ';'  expected	98	None	replace
1027	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getRawClass()  :  Collections.emptyList();  [CE]  inconvertible  types  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getRawClass()  :  Collections.emptyList();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotation.getRawClass()  :  Collections.emptyList();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotation.getRawClass()    :    null;    	non-compiled	[CE]  inconvertible  types	98	None	replace
1028	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getKey();  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getKey();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getKey();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    null;    	non-compiled	[CE]  ';'  expected	129	None	replace
1029	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>()?((  Class  <?>)annotation).getKey()  :  null;  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>()?((  Class  <?>)annotation).getKey()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>()?((  Class  <?>)annotation).getKey()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    null;    	non-compiled	[CE]  ';'  expected	129	None	replace
1030	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotation.getClass();  TypeToken  gson  =  typeAdapter.getType();  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotation.getClass();  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotation.getClass();  TypeToken  gson  =  typeAdapter.getType();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1031	[BUG]  [BUGGY]  TypeToken  gson  =  annotation.getType();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  TypeToken  gson  =  annotation.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeToken  gson  =  annotation.getType();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	80	None	replace
1032	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation.getClass();  TypeToken  gson  =  typeAdapter.getType();  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation.getClass();  TypeToken  gson  =  typeAdapter.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation.getClass();  TypeToken  gson  =  typeAdapter.getType();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    typeAdapter.getType();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1033	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotation.getType();  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotation.getType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotation.getType();	  final    Class    <?>    value    =    annotation.value();    TypeToken    gson    =    annotation.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
1034	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1035	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  annotation.getClass();  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  annotation.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  annotation.getClass();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1036	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  annotation.getClass();  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  annotation.getClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  annotation.getClass();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1037	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  annotation.getClass();  TypeToken  gson  =  constructorConstructor.getTypeToken();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.getTypeToken();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1038	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class,  JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class,  JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class,  JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
1039	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getValue();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getValue();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.getValue();	  final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
1040	[BUG]  [BUGGY]  Class  <?>  value  =  fields.get(fieldType,  annotation);  [CE]  cannot  find  symbol  fields  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fields.get(fieldType,  annotation);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fields.get(fieldType,  annotation);	  Class    <?>    value    =    annotation.get(fieldType,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	92	None	replace
1041	[BUG]  [BUGGY]  Class  <?>  value  =  fieldType.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]          IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldType.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldType.getClass();  TypeToken  gson  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  Class    <?>    value    =    annotation.getClass();    TypeToken    gson    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  variable  gson  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	109	None	replace
1042	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	4	None	add
1043	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	4	None	add
1044	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
1045	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation!=  null?  null  :  annotation.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation!=    null?    null    :    annotation.value();    Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
1046	[BUG]  [BUGGY]  Class  <?>  annotation  =  fieldType.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]            IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  annotation  =  fieldType.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  annotation  =  fieldType.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	139	None	replace
1047	[BUG]  [BUGGY]  Class  <?>  annotation  =  typeInfo.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);  [CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)  [FE]              IllegalArgumentException      [CONTEXT]        [BUGGY]  Class  <?>  annotation  =  typeInfo.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  annotation  =  typeInfo.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  getTypeAdapter(ConstructorConstructor,Gson,TypeToken<?>,JsonAdapter)	139	None	replace
1048	[BUG]  [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]        [BUGGY]  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Annotation  <?>  annotation  =  annotation.getAnnotation(JsonTypeInfo.class,  JsonTypeInfo.class);	  Class    <?>    value    =    annotation.getClass();    Annotation    <?>    annotation    =    annotation.getAnnotation(JsonTypeInfo.class);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
1049	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.getClass();    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	7	None	add
1050	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.getClass();    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	7	None	add
1051	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [CE]  cannot  find  symbol  typeAdapterFactory  [FE]        IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.getClass();    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterFactory	7	None	add
1052	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation.getClass();  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation.getClass();    Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
1053	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValueType();  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValueType();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValueType()    :    annotation;    	non-compiled	[CE]  ';'  expected	122	None	replace
1054	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValueType()  :  annotation;  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValueType()  :  annotation;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValueType()  :  annotation;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValueType()    :    annotation;    	non-compiled	[CE]  ';'  expected	122	None	replace
1055	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValueType()  :  object;  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValueType()  :  object;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getValueType()  :  object;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getValueType()    :    annotation;    	non-compiled	[CE]  ';'  expected	122	None	replace
1056	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawType()  :  null;  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getRawType()  :  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getValueType()    :    null;    	non-compiled	[CE]  inconvertible  types	73	None	replace
1057	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getAnnotationType(JsonTypeInfo.class):  null;  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getAnnotationType(JsonTypeInfo.class):  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?(Class  <?>)annotations.getAnnotationType(JsonTypeInfo.class):  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getValueType()    :    null;    	non-compiled	[CE]  inconvertible  types	73	None	replace
1058	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getValueType(),  null;  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getValueType(),  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)annotations.getValueType(),  null;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)annotations.getValueType()    :    null;    	non-compiled	[CE]  ';'  expected	73	None	replace
1059	[BUG]  [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.value();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  typeAdapter  =  constructorConstructor.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  typeAdapter  =  constructorConstructor.value();	  TypeAdapter    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
1060	[BUG]  [BUGGY]  TypeAdapter  <?>  value  =  this.fieldType.value();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?>  value  =  this.fieldType.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?>  value  =  this.fieldType.value();	  TypeAdapter    <?>    value    =    typeAdapter.value();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	12	None	replace
1061	[BUG]  [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [CE]  cannot  find  symbol  typeAdapter  [FE]        NullPointerException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  }	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	23	None	replace
1062	[BUG]  [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  not  a  statement	23	None	replace
1063	[BUG]  [BUGGY]  TypeAdapter  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  not  a  statement	23	None	replace
1064	[BUG]  [BUGGY]  Class  <?>  value  =  this.fieldType.getRawClass();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  this.fieldType.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  this.fieldType.getRawClass();	  Class    <?>    value    =    typeAdapterClass.getRawClass();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	49	None	replace
1065	[BUG]  [BUGGY]  Class  <?>  value  =  objectClass.getRawClass();  [CE]  cannot  find  symbol  objectClass  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  objectClass.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  objectClass.getRawClass();	  Class    <?>    value    =    typeAdapterClass.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  objectClass	49	None	replace
1066	[BUG]  [BUGGY]  Class  <?>  value  =  classAdapter.getRawClass();  [CE]  cannot  find  symbol  classAdapter  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  classAdapter.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  classAdapter.getRawClass();	  Class    <?>    value    =    typeAdapterClass.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  classAdapter	49	None	replace
1067	[BUG]  [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]        IllegalArgumentException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  Class  <?>  value  =  annotation.getClass();  JsonAdapter  <  Object>  annotation  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }	  Class    <?>    value    =    annotation.getClass();    JsonAdapter    <    Object>    annotation    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	108	None	replace
1068	[BUG]  [BUGGY]  static  final  Class  <?>  value  =  annotation.getValueType();  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  static  final  Class  <?>  value  =  annotation.getValueType();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	static  final  Class  <?>  value  =  annotation.getValueType();	  static    final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
1069	[BUG]  [BUGGY]  static  final  Class  <?>  value  =  fieldType.value();  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  static  final  Class  <?>  value  =  fieldType.value();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	static  final  Class  <?>  value  =  fieldType.value();	  static    final    Class    <?>    value    =    annotation.value();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
1070	[BUG]  [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [CE]  cannot  find  symbol  typeAdapter  [FE]          NullPointerException      [CONTEXT]        [BUGGY]  if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	if(annotation!=  null)  {  final  Class  <?>  value  =  annotation.value();  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  }	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	24	None	replace
1071	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
1072	[BUG]  [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
1073	[BUG]  [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [CE]  not  a  statement  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?  >>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,  fieldType);	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct().create(gson,    fieldType);    	non-compiled	[CE]  not  a  statement	24	None	replace
1074	[BUG]  [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterObject)).construct();  [CE]  cannot  find  symbol  typeAdapter  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterObject)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterObject)).construct();	  typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapter)).construct();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	21	None	replace
1075	[BUG]  [BUGGY]  TypeAdapter  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TypeAdapter  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	TypeAdapter  <?  >=  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  final    Class    <?>    value    =    annotation.value();    typeAdapter    =    constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();    	non-compiled	[CE]  not  a  statement	25	None	replace
1076	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]    IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	119	None	add
1077	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeToken  <?>  typeAdapterClass  =  annotation!=  null?  annotation.getClass()  :  null;  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeToken  <?>  typeAdapterClass  =  annotation!=  null?  annotation.getClass()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    TypeToken  <?>  typeAdapterClass  =  annotation!=  null?  annotation.getClass()  :  null;	  	non-compiled	[CE]  incompatible  types	119	None	add
1078	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]        IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	119	None	add
1079	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  if(annotation!=  null)  {  IllegalArgumentException  e  =  annotation.getClass();  if(e!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]          IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  if(annotation!=  null)  {  IllegalArgumentException  e  =  annotation.getClass();  if(e!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    if(annotation!=  null)  {  IllegalArgumentException  e  =  annotation.getClass();  if(e!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	add
1080	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeToken  <?>  typeAdapterClass  =  annotation!=  null?  annotation.getType()  :  null;  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  TypeToken  <?>  typeAdapterClass  =  annotation!=  null?  annotation.getType()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    TypeToken  <?>  typeAdapterClass  =  annotation!=  null?  annotation.getType()  :  null;	  	non-compiled	[CE]  cannot  find  symbol	119	None	add
1081	[BUG]  [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation!=  null?  annotation.getClass()  :  null;  Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class    <?>    value    =    annotation!=    null?    annotation.getClass()    :    null;    Annotation  <?>  annotation  =  annotation.getAnnotation(JsonNull.class);	  	non-compiled	[CE]  cannot  find  symbol	119	None	add
1082	[BUG]  [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  fieldType,  typeAdapterClass);  [CE]  cannot  find  symbol  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  fieldType,  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation.getAnnotation(JsonTypeInfo.class,  fieldType,  typeAdapterClass);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
1083	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getKey()  :  annotation;  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getKey()  :  annotation;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>((  Class  <?>)annotation).getKey()  :  annotation;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    annotation;    	non-compiled	[CE]  ';'  expected	128	None	replace
1084	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  annotation.type;  [CE]  inconvertible  types  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  annotation.type;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  annotation.type;	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    annotation;    	non-compiled	[CE]  inconvertible  types	128	None	replace
1085	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  annotation.toString();  [CE]  inconvertible  types  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  annotation.toString();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>?((  Class  <?>)annotation).getKey()  :  annotation.toString();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?((    Class    <?>)annotation).getKey()    :    annotation;    	non-compiled	[CE]  inconvertible  types	128	None	replace
1086	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.getRawClass();  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>(Class  <?>)value  :  annotation.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getRawClass();    	non-compiled	[CE]  ';'  expected	51	None	replace
1087	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>()?(Class  <?>)value  :  annotation.getRawClass();  [CE]  ';'  expected  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  Class  <?>()?(Class  <?>)value  :  annotation.getRawClass();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  Class  <?>()?(Class  <?>)value  :  annotation.getRawClass();	  Class    <?>    value    =    annotation    instanceof    Class    <?>?(Class    <?>)value    :    annotation.getRawClass();    	non-compiled	[CE]  ';'  expected	51	None	replace
1088	[BUG]  [BUGGY]  Class  <?>  value  =  fieldTypeInfo.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  fieldTypeInfo.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  fieldTypeInfo.getAnnotation(JsonTypeInfo.class,  typeAdapterClass);	  Class    <?>    value    =    annotation.getAnnotation(JsonTypeInfo.class,    typeAdapterClass);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
1089	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]    NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapter)).construct();	  	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	83	None	add
1090	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  typeAdapterClass  [FE]      NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    TypeToken  <?>  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol  typeAdapterClass	83	None	add
1091	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	  	non-compiled	[CE]  cannot  find  symbol	83	None	add
1092	[BUG]  [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]        [BUGGY]  final  Class  <?>  value  =  annotation  ==  null?  null  :  annotation.value();  Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	final    Class    <?>    value    =    annotation    ==    null?    null    :    annotation.value();    Constructor  <?>  constructorConstructor  =  constructorConstructor.get(TypeToken.get(typeAdapterClass));	  	non-compiled	[CE]  cannot  find  symbol	83	None	add
1093	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation,  typeAdapterClass.type()  :  null;  [CE]  :  expected  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation,  typeAdapterClass.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation,  typeAdapterClass.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()    :    null;    	non-compiled	[CE]  :  expected	101	None	replace
1094	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation,  constructorConstructor.type()  :  null;  [CE]  :  expected  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation,  constructorConstructor.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation,  constructorConstructor.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()    :    null;    	non-compiled	[CE]  :  expected	101	None	replace
1095	[BUG]  [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation,  null.type()  :  null;  [CE]  :  expected  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation,  null.type()  :  null;  [BUGGY]      TypeAdapter<?>  typeAdapter;  if  (TypeAdapter.class.isAssignableFrom(value))  {  Class<TypeAdapter<?>>  typeAdapterClass  =  (Class<TypeAdapter<?>>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();  }  else  if  (TypeAdapterFactory.class.isAssignableFrom(value))  {  Class<TypeAdapterFactory>  typeAdapterFactory  =  (Class<TypeAdapterFactory>)  value;  typeAdapter  =  constructorConstructor.get(TypeToken.get(typeAdapterFactory))  .construct()  .create(gson,  fieldType);  }  else  {  [CLASS]  JsonAdapterAnnotationTypeAdapterFactory  [METHOD]  getTypeAdapter  [RETURN_TYPE]  TypeAdapter  ConstructorConstructor  constructorConstructor  Gson  gson  TypeToken<?>  fieldType  JsonAdapter  annotation  	projects/Gson6/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java	1.0	53	53	2	replace	Class  <?>  value  =  annotation  instanceof  JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation,  null.type()  :  null;	  Class    <?>    value    =    annotation    instanceof    JsonAnnotationTypeAdapter?(JsonAnnotationTypeAdapter)annotation.type()    :    null;    	non-compiled	[CE]  :  expected	101	None	replace
