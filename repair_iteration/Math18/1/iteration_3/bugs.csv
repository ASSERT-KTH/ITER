bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(current,  iterations,  null);  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  getConvergenceChecker().converged(current,  iterations,  null);  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(current,  iterations,  null);	          sigma    =    getConvergenceChecker().converged(iterations,    current,    null);    	non-compiled	[CE]  ')'  expected	35	None	replace
2	[BUG]  [BUGGY]  break  this.generationLoop  +  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  break  this.generationLoop  +  1;  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	break  this.generationLoop  +  1;	  break    this.generationLoop    +    1e7;    	non-compiled	[CE]  ';'  expected	25	None	replace
3	[BUG]  [BUGGY]  break  this.generationLoop  +  1e0;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  break  this.generationLoop  +  1e0;  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	break  this.generationLoop  +  1e0;	  break    this.generationLoop    +    1e7;    	non-compiled	[CE]  ';'  expected	25	None	replace
4	[BUG]  [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(current,  isMinimize));  [CE]  no  suitable  constructor  found  for  PointValuePair(PointValuePair,boolean)  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(current,  isMinimize));  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  current.converged(iterations,  new  PointValuePair(current,  isMinimize));	  sigma    =    current.converged(iterations,    new    PointValuePair(current,    lastResult));    	non-compiled	[CE]  no  suitable  constructor  found  for  PointValuePair(PointValuePair,boolean)	6	None	replace
5	[BUG]  [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(lastResult,  iterations));  [CE]  no  suitable  constructor  found  for  PointValuePair(PointValuePair,int)  [FE]                AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(lastResult,  iterations));  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  current.converged(iterations,  new  PointValuePair(lastResult,  iterations));	  sigma    =    current.converged(iterations,    new    PointValuePair(current,    lastResult));    	non-compiled	[CE]  no  suitable  constructor  found  for  PointValuePair(PointValuePair,int)	6	None	replace
6	[BUG]  [BUGGY]  lastResult  =  isMinimize?  bestFitness  :  current.convert(isMinimize?  bestFitness  :  -1);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  isMinimize?  bestFitness  :  current.convert(isMinimize?  bestFitness  :  -1);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  isMinimize?  bestFitness  :  current.convert(isMinimize?  bestFitness  :  -1);	  lastResult    =    current.convert(isMinimize?    bestFitness    :    -1);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
7	[BUG]  [BUGGY]  lastResult  =  current.convert(isMinimize,  bestFitness?  bestFitness  :  0);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  current.convert(isMinimize,  bestFitness?  bestFitness  :  0);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(isMinimize,  bestFitness?  bestFitness  :  0);	  lastResult    =    current.convert(isMinimize,    bestFitness?    bestFitness    :    -1);    	non-compiled	[CE]  incompatible  types	32	None	replace
8	[BUG]  [BUGGY]  bestValue  =  current.getValue();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  bestValue  =  current.getValue();  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	bestValue  =  current.getValue();	  bestValue    =    bestArx.getValue();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
9	[BUG]  [BUGGY]  BestValue  bestValue  =  current.getValue();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  BestValue  bestValue  =  current.getValue();  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	BestValue  bestValue  =  current.getValue();	  bestValue    =    bestArx.getValue();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
10	[BUG]  [BUGGY]  lastResult.setValue(getConvergenceChecker().converged(iterations,  current));  [CE]  method  converged  in  interface  ConvergenceChecker<PAIR>  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult.setValue(getConvergenceChecker().converged(iterations,  current));  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult.setValue(getConvergenceChecker().converged(iterations,  current));	  [Delete]    	non-compiled	[CE]  method  converged  in  interface  ConvergenceChecker<PAIR>  cannot  be  applied  to  given  types;	39	None	replace
11	[BUG]  [BUGGY]  MutableAsStatementException.throwAsStatementException( " ");  [CE]  cannot  find  symbol  MutableAsStatementException  [FE]          AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  MutableAsStatementException.throwAsStatementException( " ");  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	MutableAsStatementException.throwAsStatementException( " ");	  aughtExceptionHandler.throwAsStatementException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  MutableAsStatementException	19	None	replace
12	[BUG]  [BUGGY]  Alerts.throwAsStatementException( " ");  [CE]  cannot  find  symbol  Alerts  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  Alerts.throwAsStatementException( " ");  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	Alerts.throwAsStatementException( " ");	  aughtExceptionHandler.throwAsStatementException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  Alerts	19	None	replace
13	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  lastResult,  current);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  lastResult,  current);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(iterations,  lastResult,  current);	  sigma    =    getConvergenceChecker().converged(lastResult,    iterations,    current);    	non-compiled	[CE]  incompatible  types	11	None	replace
14	[BUG]  [BUGGY]  assistExceptionHandler.throwInternal();  [CE]  cannot  find  symbol  assistExceptionHandler  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  assistExceptionHandler.throwInternal();  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	assistExceptionHandler.throwInternal();	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  cannot  find  symbol  assistExceptionHandler	18	None	replace
15	[BUG]  [BUGGY]  _throwInternal();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  _throwInternal();  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	_throwInternal();	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
16	[BUG]  [BUGGY]  if(lastResult  ==  null)  {  break  generationLoop;  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  if(lastResult  ==  null)  {  break  generationLoop;  }  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	if(lastResult  ==  null)  {  break  generationLoop;  }	  if(lastResult    ==    null)    {    break    iterations;    }    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
17	[BUG]  [BUGGY]  lastResult  =  current.convert(bestFitness,  isMinimize?  lastResult  :  -1);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  current.convert(bestFitness,  isMinimize?  lastResult  :  -1);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(bestFitness,  isMinimize?  lastResult  :  -1);	  lastResult    =    current.convert(bestFitness,    isMinimize?    lastResult    :    -bestFitness);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
18	[BUG]  [BUGGY]  lastResult  =  current.convert(isActiveCMA,  isMinimize?  lastResult  :  -bestFitness);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  current.convert(isActiveCMA,  isMinimize?  lastResult  :  -bestFitness);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(isActiveCMA,  isMinimize?  lastResult  :  -bestFitness);	  lastResult    =    current.convert(bestFitness,    isMinimize?    lastResult    :    -bestFitness);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
19	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
20	[BUG]  [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(current,  isMinimize),  isRepairMode);  [CE]  no  suitable  constructor  found  for  PointValuePair(PointValuePair,boolean)  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(current,  isMinimize),  isRepairMode);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  current.converged(iterations,  new  PointValuePair(current,  isMinimize),  isRepairMode);	  sigma    =    current.converged(iterations,    new    PointValuePair(lastResult),    isMinimize);    	non-compiled	[CE]  no  suitable  constructor  found  for  PointValuePair(PointValuePair,boolean)	36	None	replace
21	[BUG]  [BUGGY]  lastResult  =  new  PointValuePair(current.getColumn(),  isMinimize?  bestFitness  :  -bestFitness);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  new  PointValuePair(current.getColumn(),  isMinimize?  bestFitness  :  -bestFitness);  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  new  PointValuePair(current.getColumn(),  isMinimize?  bestFitness  :  -bestFitness);	  lastResult    =    new    PointValuePair(current.getColumn(),    isMinimize?    bestFitness    :    -lastResult);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
22	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  lastResult,  isActiveCMA);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  lastResult,  isActiveCMA);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(iterations,  current,  lastResult,  isActiveCMA);	  sigma    =    getConvergenceChecker().converged(iterations,    current,    lastResult,    isMinimize);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
23	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  firstResult,  isMinimize);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  firstResult,  isMinimize);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(iterations,  current,  firstResult,  isMinimize);	  sigma    =    getConvergenceChecker().converged(iterations,    current,    lastResult,    isMinimize);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
24	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  isActiveCMA);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  isActiveCMA);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(iterations,  current,  isActiveCMA);	  sigma    =    getConvergenceChecker().converged(iterations,    current,    isMinimize);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
25	[BUG]  [BUGGY]  if(bestValue!=  null)  {  aughtExceptionHandler(this,  DEFAULT_STOPFITNESS,  bestValue);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  if(bestValue!=  null)  {  aughtExceptionHandler(this,  DEFAULT_STOPFITNESS,  bestValue);  }  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	if(bestValue!=  null)  {  aughtExceptionHandler(this,  DEFAULT_STOPFITNESS,  bestValue);  }	  aughtExceptionHandler(this,    DEFAULT_STOPFITNESS,    bestValue);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
26	[BUG]  [BUGGY]  if(isActiveCMA)  {  aughtExceptionHandler(this,  DEFAULT_STOPFITNESS,  bestValue);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  if(isActiveCMA)  {  aughtExceptionHandler(this,  DEFAULT_STOPFITNESS,  bestValue);  }  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	if(isActiveCMA)  {  aughtExceptionHandler(this,  DEFAULT_STOPFITNESS,  bestValue);  }	  aughtExceptionHandler(this,    DEFAULT_STOPFITNESS,    bestValue);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
27	[BUG]  [BUGGY]  lastResult  =  current.getValue(),  isActiveCMA);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  current.getValue(),  isActiveCMA);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.getValue(),  isActiveCMA);	  lastResult    =    current.getValue(),    isMinimize);    	non-compiled	[CE]  ';'  expected	10	None	replace
28	[BUG]  [BUGGY]  lastResult  =  current.getValue(),  isRepairMode);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  current.getValue(),  isRepairMode);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.getValue(),  isRepairMode);	  lastResult    =    current.getValue(),    isMinimize);    	non-compiled	[CE]  ';'  expected	10	None	replace
29	[BUG]  [BUGGY]  lastResult  =  current.convert(isMinimize,  bestFitness?  lastResult  :  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  current.convert(isMinimize,  bestFitness?  lastResult  :  0);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(isMinimize,  bestFitness?  lastResult  :  0);	  lastResult    =    current.convert(isMinimize,    bestFitness?    lastResult    :    -1);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
30	[BUG]  [BUGGY]  lastResult  =  current.getValue(),  isActiveCMA?  bestValue  :  bestArx.getValue();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  current.getValue(),  isActiveCMA?  bestValue  :  bestArx.getValue();  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.getValue(),  isActiveCMA?  bestValue  :  bestArx.getValue();	  lastResult    =    current.getValue(),    isMinimize?    bestValue    :    bestArx.getValue();    	non-compiled	[CE]  ';'  expected	38	None	replace
31	[BUG]  [BUGGY]  break  this.generationLoop  -  1e0;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  break  this.generationLoop  -  1e0;  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	break  this.generationLoop  -  1e0;	  break    this.generationLoop    -    1e7;    	non-compiled	[CE]  ';'  expected	13	None	replace
32	[BUG]  [BUGGY]  break  this.generationLoop  -  1e;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  break  this.generationLoop  -  1e;  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	break  this.generationLoop  -  1e;	  break    this.generationLoop    -    1e7;    	non-compiled	[CE]  ';'  expected	13	None	replace
33	[BUG]  [BUGGY]  removeAllIterations(lastResult);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  removeAllIterations(lastResult);  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	removeAllIterations(lastResult);	  removeAllIterations(current);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
34	[BUG]  [BUGGY]  removeAllIterations(iterations);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  removeAllIterations(iterations);  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	removeAllIterations(iterations);	  removeAllIterations(current);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
35	[BUG]  [BUGGY]  bestValue  =  current.getColumn(1);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  bestValue  =  current.getColumn(1);  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	bestValue  =  current.getColumn(1);	  bestValue    =    bestArx.getColumn(1);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
36	[BUG]  [BUGGY]  BestValue  bestValue  =  current.getColumn(1);  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  BestValue  bestValue  =  current.getColumn(1);  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	BestValue  bestValue  =  current.getColumn(1);	  bestValue    =    bestArx.getColumn(1);    	non-compiled	[CE]  ')'  expected	27	None	replace
37	[BUG]  [BUGGY]  bestValue  =  current.getColumn();  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  bestValue  =  current.getColumn();  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	bestValue  =  current.getColumn();	          bestValue    =    bestArx.getColumn();    	non-compiled	[CE]  ')'  expected	5	None	replace
38	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  lastResult,  lastResult);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  lastResult,  lastResult);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(iterations,  lastResult,  lastResult);	  sigma    =    getConvergenceChecker().converged(lastResult,    iterations,    lastResult);    	non-compiled	[CE]  ')'  expected	28	None	replace
39	[BUG]  [BUGGY]  continue  iterations  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  continue  iterations  -  1;  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	continue  iterations  -  1;	  continue    iterations;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
40	[BUG]  [BUGGY]  continue  iterations  &&  isMinimize;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  continue  iterations  &&  isMinimize;  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	continue  iterations  &&  isMinimize;	  continue    iterations;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
41	[BUG]  [BUGGY]  sigma  =  iterations.converged(current,  new  double[lambda/4]);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  iterations.converged(current,  new  double[lambda/4]);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  iterations.converged(current,  new  double[lambda/4]);	  sigma    =    iterations.converged(current,    new    double[lambda]);    	non-compiled	[CE]  ')'  expected	8	None	replace
42	[BUG]  [BUGGY]  sigma  =  iterations.converged(current,  new  double[lambda/2]);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  iterations.converged(current,  new  double[lambda/2]);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  iterations.converged(current,  new  double[lambda/2]);	  sigma    =    iterations.converged(current,    new    double[lambda]);    	non-compiled	[CE]  ')'  expected	8	None	replace
43	[BUG]  [BUGGY]  lastResult;  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult;  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult;	  break;    	non-compiled	[CE]  ')'  expected	15	None	replace
44	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  null,  isMinimize);  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  null,  isMinimize);  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(iterations,  current,  null,  isMinimize);	          sigma    =    getConvergenceChecker().converged(iterations,    current,    null);    	non-compiled	[CE]  ')'  expected	35	None	replace
45	[BUG]  [BUGGY]  continue  generationLoop;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  continue  generationLoop;  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	continue  generationLoop;	  continue    iterations;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
46	[BUG]  [BUGGY]  Exploluated.throwInternal();  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  Exploluated.throwInternal();  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	Exploluated.throwInternal();	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  ')'  expected	18	None	replace
47	[BUG]  [BUGGY]  bestValue  =  bestArx.getRowValue();  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  bestValue  =  bestArx.getRowValue();  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	bestValue  =  bestArx.getRowValue();	          bestValue    =    bestArx.getColumn();    	non-compiled	[CE]  ')'  expected	5	None	replace
48	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(current,  iterations,  current,  lastResult);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  getConvergenceChecker().converged(current,  iterations,  current,  lastResult);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(current,  iterations,  current,  lastResult);	  sigma    =    getConvergenceChecker().converged(current,    iterations,    lastResult);    	non-compiled	[CE]  ')'  expected	12	None	replace
49	[BUG]  [BUGGY]  lastResult  =  current.convert(isMinimize,  bestFitness?  lastResult  :  -lastResult);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  current.convert(isMinimize,  bestFitness?  lastResult  :  -lastResult);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(isMinimize,  bestFitness?  lastResult  :  -lastResult);	  lastResult    =    current.convert(isMinimize,    bestFitness?    lastResult    :    -bestFitness);    	non-compiled	[CE]  ')'  expected	17	None	replace
50	[BUG]  [BUGGY]  removeAllIterations(current,  iterations);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  removeAllIterations(current,  iterations);  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	removeAllIterations(current,  iterations);	  removeAllIterations(current);    	non-compiled	[CE]  ')'  expected	20	None	replace
51	[BUG]  [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(lastResult,  isMinimize));  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(lastResult,  isMinimize));  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  current.converged(iterations,  new  PointValuePair(lastResult,  isMinimize));	  sigma    =    current.converged(iterations,    new    PointValuePair(current,    lastResult));    	non-compiled	[CE]  ')'  expected	6	None	replace
52	[BUG]  [BUGGY]  break  this.generationLoop  -  1;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  break  this.generationLoop  -  1;  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	break  this.generationLoop  -  1;	  break    this.generationLoop    -    1e7;    	non-compiled	[CE]  ';'  expected	13	None	replace
53	[BUG]  [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(isMinimize));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(isMinimize));  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  current.converged(iterations,  new  PointValuePair(isMinimize));	  sigma    =    current.converged(iterations,    new    PointValuePair(current));    	non-compiled	[CE]  ';'  expected	7	None	replace
54	[BUG]  [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(current),  isMinimize);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(current),  isMinimize);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  current.converged(iterations,  new  PointValuePair(current),  isMinimize);	  sigma    =    current.converged(iterations,    new    PointValuePair(lastResult),    isMinimize);    	non-compiled	[CE]  ')'  expected	36	None	replace
55	[BUG]  [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(current,  isMinimize),  isMinimize);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(current,  isMinimize),  isMinimize);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  current.converged(iterations,  new  PointValuePair(current,  isMinimize),  isMinimize);	  sigma    =    current.converged(iterations,    new    PointValuePair(lastResult),    isMinimize);    	non-compiled	[CE]  ')'  expected	36	None	replace
56	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(current,  iterations,  current);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  getConvergenceChecker().converged(current,  iterations,  current);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(current,  iterations,  current);	  sigma    =    getConvergenceChecker().converged(current,    iterations);    	non-compiled	[CE]  ')'  expected	2	None	replace
57	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(current,  iterations,  lastResult,  isMinimize);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  getConvergenceChecker().converged(current,  iterations,  lastResult,  isMinimize);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(current,  iterations,  lastResult,  isMinimize);	  sigma    =    getConvergenceChecker().converged(iterations,    current,    lastResult,    isMinimize);    	non-compiled	[CE]  ')'  expected	33	None	replace
58	[BUG]  [BUGGY]  if(bestValue  ==  null)  {  aughtExceptionHandler(this,  DEFAULT_STOPFITNESS,  bestValue);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  if(bestValue  ==  null)  {  aughtExceptionHandler(this,  DEFAULT_STOPFITNESS,  bestValue);  }  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	if(bestValue  ==  null)  {  aughtExceptionHandler(this,  DEFAULT_STOPFITNESS,  bestValue);  }	  aughtExceptionHandler(this,    DEFAULT_STOPFITNESS,    bestValue);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
59	[BUG]  [BUGGY]  sigma  =  current.converged(iterations,  1);  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  current.converged(iterations,  1);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  current.converged(iterations,  1);	  [Delete]    	non-compiled	[CE]  ')'  expected	39	None	replace
60	[BUG]  [BUGGY]  sigma  =  iterations.converged(new  double[lambda]);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  iterations.converged(new  double[lambda]);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  iterations.converged(new  double[lambda]);	  sigma    =    dataArea.converged(iterations,    new    double[lambda]);    	non-compiled	[CE]  ')'  expected	9	None	replace
61	[BUG]  [BUGGY]  lastResult  =  bestArx.convert(isMinimize?  bestFitness  :  -1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  bestArx.convert(isMinimize?  bestFitness  :  -1);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  bestArx.convert(isMinimize?  bestFitness  :  -1);	  lastResult    =    current.convert(isMinimize?    bestFitness    :    -1);    	non-compiled	[CE]  ')'  expected	22	None	replace
62	[BUG]  [BUGGY]  lastResult  =  current.convert(historyBest,  isMinimize?  lastResult  :  -lastResult);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  current.convert(historyBest,  isMinimize?  lastResult  :  -lastResult);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(historyBest,  isMinimize?  lastResult  :  -lastResult);	  lastResult    =    current.convert(bestFitness,    isMinimize?    lastResult    :    -bestFitness);    	non-compiled	[CE]  ')'  expected	41	None	replace
63	[BUG]  [BUGGY]  lastResult  =  current.convert(bestFitness,  isActiveCMA?  lastResult  :  -lastResult);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  current.convert(bestFitness,  isActiveCMA?  lastResult  :  -lastResult);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(bestFitness,  isActiveCMA?  lastResult  :  -lastResult);	  lastResult    =    current.convert(bestFitness,    isMinimize?    lastResult    :    -bestFitness);    	non-compiled	[CE]  ')'  expected	41	None	replace
64	[BUG]  [BUGGY]  bestValue  =  bestArx.getRow(1);  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  bestValue  =  bestArx.getRow(1);  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	bestValue  =  bestArx.getRow(1);	  bestValue    =    bestArx.getColumn(1);    	non-compiled	[CE]  ')'  expected	27	None	replace
65	[BUG]  [BUGGY]  safeTree();  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  safeTree();  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	safeTree();	          if(lastResult    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(lastResult    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  ')'  expected	21	None	replace
66	[BUG]  [BUGGY]  aughtException( " ");  [CE]  [FE]          AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  aughtException( " ");  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	aughtException( " ");	          if(lastResult    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(lastResult    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	21	None	replace
67	[BUG]  [BUGGY]  bestValue  =  this.bestArx.getValue();  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  bestValue  =  this.bestArx.getValue();  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	bestValue  =  this.bestArx.getValue();	  bestValue    =    bestArx.getValue();    	non-compiled	[CE]  ')'  expected	1	None	replace
68	[BUG]  [BUGGY]  lastResult  =  bestArx.convert(isMinimize?  bestFitness  :  -bestFitness);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  bestArx.convert(isMinimize?  bestFitness  :  -bestFitness);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  bestArx.convert(isMinimize?  bestFitness  :  -bestFitness);	  lastResult    =    current.convert(isMinimize?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  ')'  expected	16	None	replace
69	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  dataArea,  isMinimize);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  dataArea,  isMinimize);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(iterations,  current,  dataArea,  isMinimize);	  sigma    =    getConvergenceChecker().converged(iterations,    current,    isMinimize);    	non-compiled	[CE]  ')'  expected	26	None	replace
70	[BUG]  [BUGGY]  bestValue  =  bestArx.getRowValue(1);  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  bestValue  =  bestArx.getRowValue(1);  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	bestValue  =  bestArx.getRowValue(1);	  bestValue    =    bestArx.getColumn(1);    	non-compiled	[CE]  ')'  expected	27	None	replace
71	[BUG]  [BUGGY]  lastResult  =  current.convert(isMinimize?  bestFitness  :  -lastResult);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  current.convert(isMinimize?  bestFitness  :  -lastResult);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(isMinimize?  bestFitness  :  -lastResult);	  lastResult    =    current.convert(isMinimize,    bestFitness?    lastResult    :    -bestFitness);    	non-compiled	[CE]  ')'  expected	17	None	replace
72	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( " ");  [CE]  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  Throw  new  IllegalArgumentException( " ");  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	Throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	14	None	replace
73	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  isRepairMode);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  isRepairMode);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(iterations,  current,  isRepairMode);	  sigma    =    getConvergenceChecker().converged(iterations,    current,    isMinimize);    	non-compiled	[CE]  ')'  expected	26	None	replace
74	[BUG]  [BUGGY]  Alert.throwAsStatementException( " ");  [CE]  [FE]          AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  Alert.throwAsStatementException( " ");  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	Alert.throwAsStatementException( " ");	  aughtExceptionHandler.throwAsStatementException(   "   ");    	non-compiled	[CE]  	19	None	replace
75	[BUG]  [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(current,  lastResult),  isMinimize);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(current,  lastResult),  isMinimize);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  current.converged(iterations,  new  PointValuePair(current,  lastResult),  isMinimize);	  sigma    =    current.converged(iterations,    new    PointValuePair(current,    lastResult));    	non-compiled	[CE]  ')'  expected	6	None	replace
76	[BUG]  [BUGGY]  lastResult  =  bestFitness.convert(isMinimize?  current  :  -bestFitness);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  bestFitness.convert(isMinimize?  current  :  -bestFitness);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  bestFitness.convert(isMinimize?  current  :  -bestFitness);	  lastResult    =    current.convert(isMinimize?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  ')'  expected	16	None	replace
77	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  result,  isMinimize);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  result,  isMinimize);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(iterations,  current,  result,  isMinimize);	  sigma    =    getConvergenceChecker().converged(iterations,    current,    lastResult,    isMinimize);    	non-compiled	[CE]  ')'  expected	33	None	replace
78	[BUG]  [BUGGY]  break  generationLoop  -  1e7;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  break  generationLoop  -  1e7;  [BUGGY]      }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	break  generationLoop  -  1e7;	  break    this.generationLoop    -    1e7;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
79	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  firstResult);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  firstResult);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(iterations,  current,  firstResult);	  sigma    =    getConvergenceChecker().converged(lastResult,    iterations,    current);    	non-compiled	[CE]  ')'  expected	11	None	replace
80	[BUG]  [BUGGY]  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  }  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	}	          if(lastResult    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(lastResult    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
81	[BUG]  [BUGGY]  lastResult  =  current.convert(isRepairMode,  isMinimize?  bestFitness  :  -1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  current.convert(isRepairMode,  isMinimize?  bestFitness  :  -1);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(isRepairMode,  isMinimize?  bestFitness  :  -1);	  lastResult    =    current.convert(isMinimize,    bestFitness?    bestFitness    :    -1);    	non-compiled	[CE]  ')'  expected	32	None	replace
82	[BUG]  [BUGGY]  Exploluates.throwInternal();  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  Exploluates.throwInternal();  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	Exploluates.throwInternal();	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  ')'  expected	18	None	replace
83	[BUG]  [BUGGY]  lastResult  =  current.convert(bestFitness,  isMinimize?  lastResult  :  -lastResult);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  current.convert(bestFitness,  isMinimize?  lastResult  :  -lastResult);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(bestFitness,  isMinimize?  lastResult  :  -lastResult);	  lastResult    =    current.convert(bestFitness,    isMinimize?    lastResult    :    -bestFitness);    	non-compiled	[CE]  ')'  expected	41	None	replace
84	[BUG]  [BUGGY]  if(bestValue  ==  DEFAULT_STOPFITNESS)  {  aughtExceptionHandler(this,  DEFAULT_STOPFITNESS,  bestValue);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  if(bestValue  ==  DEFAULT_STOPFITNESS)  {  aughtExceptionHandler(this,  DEFAULT_STOPFITNESS,  bestValue);  }  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	if(bestValue  ==  DEFAULT_STOPFITNESS)  {  aughtExceptionHandler(this,  DEFAULT_STOPFITNESS,  bestValue);  }	  aughtExceptionHandler(this,    DEFAULT_STOPFITNESS,    bestValue);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
85	[BUG]  [BUGGY]  lastResult  =  bestArx.convert(isMinimize?  lastResult  :  -1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {      [BUGGY]  lastResult  =  bestArx.convert(isMinimize?  lastResult  :  -1);  [BUGGY]      break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  bestArx.convert(isMinimize?  lastResult  :  -1);	  lastResult    =    current.convert(isMinimize?    bestFitness    :    -1);    	non-compiled	[CE]  ')'  expected	22	None	replace
