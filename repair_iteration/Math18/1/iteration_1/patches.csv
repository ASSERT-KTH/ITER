bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  bestValue  =  bestArx.getValue();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  bestValue  =  bestArx.getValue();  [BUGGY]    }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	bestValue  =  bestArx.getValue();	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
2	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(current,  iterations);  [CE]  method  converged  in  interface  ConvergenceChecker<PAIR>  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  sigma  =  getConvergenceChecker().converged(current,  iterations);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(current,  iterations);	      sigma    =    getConvergenceChecker().converged(iterations,    current);    	non-compiled	[CE]  method  converged  in  interface  ConvergenceChecker<PAIR>  cannot  be  applied  to  given  types;	13	None	replace
3	[BUG]  [BUGGY]  break  generationLoop  +  1;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  break  generationLoop  +  1;  [BUGGY]    }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	break  generationLoop  +  1;	  break    generationLoop    +    1e7;    	non-compiled	[CE]  ';'  expected	8	None	replace
4	[BUG]  [BUGGY]  break  generationLoop  +  1e0;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  break  generationLoop  +  1e0;  [BUGGY]    }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	break  generationLoop  +  1e0;	  break    generationLoop    +    1e7;    	non-compiled	[CE]  ';'  expected	8	None	replace
5	[BUG]  [BUGGY]      bestValue  =  bestArx.getColumn();  [CE]  method  getColumn  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]      bestValue  =  bestArx.getColumn();  [BUGGY]    }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	        bestValue  =  bestArx.getColumn();	  	non-compiled	[CE]  method  getColumn  in  interface  RealMatrix  cannot  be  applied  to  given  types;	3	None	add
6	[BUG]  [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(current,  lastResult));  [CE]  no  suitable  constructor  found  for  PointValuePair(PointValuePair,PointValuePair)  [FE]          AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(current,  lastResult));  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  current.converged(iterations,  new  PointValuePair(current,  lastResult));	      sigma    =    current.converged(iterations,    new    PointValuePair(lastResult));    	non-compiled	[CE]  no  suitable  constructor  found  for  PointValuePair(PointValuePair,PointValuePair)	10	None	replace
7	[BUG]  [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(current));  [CE]  no  suitable  constructor  found  for  PointValuePair(PointValuePair)  [FE]            AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(current));  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  current.converged(iterations,  new  PointValuePair(current));	      sigma    =    current.converged(iterations,    new    PointValuePair(lastResult));    	non-compiled	[CE]  no  suitable  constructor  found  for  PointValuePair(PointValuePair)	10	None	replace
8	[BUG]  [BUGGY]  sigma  =  iterations.converged(current,  new  double[lambda]);  [CE]  int  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  sigma  =  iterations.converged(current,  new  double[lambda]);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  iterations.converged(current,  new  double[lambda]);	      sigma    =    current.converged(iterations,    new    double[lambda]);    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
9	[BUG]  [BUGGY]  sigma  =  dataArea.converged(iterations,  new  double[lambda]);  [CE]  cannot  find  symbol  dataArea  [FE]          AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  sigma  =  dataArea.converged(iterations,  new  double[lambda]);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  dataArea.converged(iterations,  new  double[lambda]);	      sigma    =    current.converged(iterations,    new    double[lambda]);    	non-compiled	[CE]  cannot  find  symbol  dataArea	9	None	replace
10	[BUG]  [BUGGY]  lastResult  =  current.getValue(),  isMinimize);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  lastResult  =  current.getValue(),  isMinimize);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.getValue(),  isMinimize);	      lastResult    =    current.getValue();    	non-compiled	[CE]  ';'  expected	5	None	replace
11	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(lastResult,  iterations,  current);  [CE]  method  converged  in  interface  ConvergenceChecker<PAIR>  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  sigma  =  getConvergenceChecker().converged(lastResult,  iterations,  current);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(lastResult,  iterations,  current);	      sigma    =    getConvergenceChecker().converged(iterations,    current,    lastResult);    	non-compiled	[CE]  method  converged  in  interface  ConvergenceChecker<PAIR>  cannot  be  applied  to  given  types;	12	None	replace
12	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(current,  iterations,  lastResult);  [CE]  method  converged  in  interface  ConvergenceChecker<PAIR>  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  sigma  =  getConvergenceChecker().converged(current,  iterations,  lastResult);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(current,  iterations,  lastResult);	      sigma    =    getConvergenceChecker().converged(iterations,    current,    lastResult);    	non-compiled	[CE]  method  converged  in  interface  ConvergenceChecker<PAIR>  cannot  be  applied  to  given  types;	12	None	replace
13	[BUG]  [BUGGY]  break  this.generationLoop  -  1e7;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  break  this.generationLoop  -  1e7;  [BUGGY]    }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	break  this.generationLoop  -  1e7;	  break    this.generationLoop;    	non-compiled	[CE]  ';'  expected	2	None	replace
14	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	throw  new  IllegalArgumentException( " ");	  break    this;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
15	[BUG]  [BUGGY]  break;  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  break;  [BUGGY]    }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	break;	  break    this;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
16	[BUG]  [BUGGY]  lastResult  =  current.convert(isMinimize?  bestFitness  :  -bestFitness);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  lastResult  =  current.convert(isMinimize?  bestFitness  :  -bestFitness);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(isMinimize?  bestFitness  :  -bestFitness);	      lastResult    =    current.convert(lastResult,    isMinimize?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
17	[BUG]  [BUGGY]  lastResult  =  current.convert(isMinimize,  bestFitness?  lastResult  :  -bestFitness);  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  lastResult  =  current.convert(isMinimize,  bestFitness?  lastResult  :  -bestFitness);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(isMinimize,  bestFitness?  lastResult  :  -bestFitness);	      lastResult    =    current.convert(lastResult,    isMinimize?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  incompatible  types	6	None	replace
18	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]    AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	aughtExceptionHandler.throwInternal();	      if(lastResult    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	15	None	replace
19	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStatementException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]      AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  aughtExceptionHandler.throwAsStatementException( " ");  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	aughtExceptionHandler.throwAsStatementException( " ");	      if(lastResult    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	15	None	replace
20	[BUG]  [BUGGY]  removeAllIterations(current);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  removeAllIterations(current);  [BUGGY]    }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	removeAllIterations(current);	  break    iterations;    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
21	[BUG]  [BUGGY]      if(lastResult  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(lastResult  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]      if(lastResult  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(lastResult  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	        if(lastResult    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(lastResult  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
22	[BUG]  [BUGGY]  lastResult  =  current.convert(isMinimize?  bestFitness  :  -1);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  lastResult  =  current.convert(isMinimize?  bestFitness  :  -1);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(isMinimize?  bestFitness  :  -1);	      lastResult    =    current.convert(lastResult,    isMinimize?    bestFitness    :    -1);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
23	[BUG]  [BUGGY]  lastResult  =  current.convert(isMinimize,  bestFitness?  lastResult  :  -1);  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  lastResult  =  current.convert(isMinimize,  bestFitness?  lastResult  :  -1);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(isMinimize,  bestFitness?  lastResult  :  -1);	      lastResult    =    current.convert(lastResult,    isMinimize?    bestFitness    :    -1);    	non-compiled	[CE]  incompatible  types	7	None	replace
24	[BUG]  [BUGGY]  lastResult  =  current.convert(isMinimize?  bestFitness  :  -repairMode);  [CE]  cannot  find  symbol  repairMode  [FE]          AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  lastResult  =  current.convert(isMinimize?  bestFitness  :  -repairMode);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(isMinimize?  bestFitness  :  -repairMode);	      lastResult    =    current.convert(lastResult,    isMinimize?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  cannot  find  symbol  repairMode	6	None	replace
25	[BUG]  [BUGGY]  break  this.generationLoop  +  1e7;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  break  this.generationLoop  +  1e7;  [BUGGY]    }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	break  this.generationLoop  +  1e7;	  break    this.generationLoop;    	non-compiled	[CE]  ';'  expected	2	None	replace
26	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  isMinimize);  [CE]  method  converged  in  interface  ConvergenceChecker<PAIR>  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  isMinimize);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(iterations,  current,  isMinimize);	      sigma    =    getConvergenceChecker().converged(iterations,    current);    	non-compiled	[CE]  method  converged  in  interface  ConvergenceChecker<PAIR>  cannot  be  applied  to  given  types;	13	None	replace
27	[BUG]  [BUGGY]  bestValue  =  bestArx.getColumn(1);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  bestValue  =  bestArx.getColumn(1);  [BUGGY]    }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	bestValue  =  bestArx.getColumn(1);	      	non-compiled	[CE]  incompatible  types	4	None	replace
28	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(lastResult,  iterations,  lastResult);  [CE]  method  converged  in  interface  ConvergenceChecker<PAIR>  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  sigma  =  getConvergenceChecker().converged(lastResult,  iterations,  lastResult);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(lastResult,  iterations,  lastResult);	      sigma    =    getConvergenceChecker().converged(iterations,    current,    lastResult);    	non-compiled	[CE]  method  converged  in  interface  ConvergenceChecker<PAIR>  cannot  be  applied  to  given  types;	12	None	replace
29	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	      if(lastResult    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	15	None	replace
30	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIllegalArgumentException( " ");  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  aughtExceptionHandler.throwAsIllegalArgumentException( " ");  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	aughtExceptionHandler.throwAsIllegalArgumentException( " ");	      if(lastResult    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	15	None	replace
31	[BUG]  [BUGGY]  if(lastResult  ==  null)  {  break  iterations;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  if(lastResult  ==  null)  {  break  iterations;  }  [BUGGY]    }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	if(lastResult  ==  null)  {  break  iterations;  }	  break    iterations;    	non-compiled	[CE]  ';'  expected	1	None	replace
32	[BUG]  [BUGGY]  lastResult  =  current.convert(isMinimize,  bestFitness?  bestFitness  :  -1);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  lastResult  =  current.convert(isMinimize,  bestFitness?  bestFitness  :  -1);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(isMinimize,  bestFitness?  bestFitness  :  -1);	      lastResult    =    current.convert(lastResult,    isMinimize?    bestFitness    :    -1);    	non-compiled	[CE]  ';'  expected	7	None	replace
33	[BUG]  [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  lastResult,  isMinimize);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  sigma  =  getConvergenceChecker().converged(iterations,  current,  lastResult,  isMinimize);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  getConvergenceChecker().converged(iterations,  current,  lastResult,  isMinimize);	      sigma    =    getConvergenceChecker().converged(iterations,    current,    lastResult);    	non-compiled	[CE]  ';'  expected	12	None	replace
34	[BUG]  [BUGGY]  continue  iterations;  [CE]  undefined  label:  iterations  [FE]        AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  continue  iterations;  [BUGGY]    }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	continue  iterations;	  break    iterations;    	non-compiled	[CE]  undefined  label:  iterations	1	None	replace
35	[BUG]  [BUGGY]      sigma  =  getConvergenceChecker().converged(iterations,  current,  null);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]      sigma  =  getConvergenceChecker().converged(iterations,  current,  null);  [BUGGY]    }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	        sigma  =  getConvergenceChecker().converged(iterations,  current,  null);	  	non-compiled	[CE]  incompatible  types	3	None	add
36	[BUG]  [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(lastResult),  isMinimize);  [CE]  no  suitable  constructor  found  for  PointValuePair(PointValuePair)  [FE]          AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  sigma  =  current.converged(iterations,  new  PointValuePair(lastResult),  isMinimize);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	sigma  =  current.converged(iterations,  new  PointValuePair(lastResult),  isMinimize);	      sigma    =    current.converged(iterations,    new    PointValuePair(lastResult));    	non-compiled	[CE]  no  suitable  constructor  found  for  PointValuePair(PointValuePair)	10	None	replace
37	[BUG]  [BUGGY]  lastResult  =  new  PointValuePair(current.getColumn(),  isMinimize?  bestFitness  :  -lastResult);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  lastResult  =  new  PointValuePair(current.getColumn(),  isMinimize?  bestFitness  :  -lastResult);  [BUGGY]    }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  new  PointValuePair(current.getColumn(),  isMinimize?  bestFitness  :  -lastResult);	  break    this;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
38	[BUG]  [BUGGY]  lastResult  =  current.getValue(),  isMinimize?  bestValue  :  bestArx.getValue();  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  lastResult  =  current.getValue(),  isMinimize?  bestValue  :  bestArx.getValue();  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.getValue(),  isMinimize?  bestValue  :  bestArx.getValue();	      lastResult    =    current.getValue();    	non-compiled	[CE]  ';'  expected	5	None	replace
39	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  [Delete]  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	[Delete]	      if(lastResult    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
40	[BUG]  [BUGGY]  aughtExceptionHandler(this,  DEFAULT_STOPFITNESS,  bestValue);  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  aughtExceptionHandler(this,  DEFAULT_STOPFITNESS,  bestValue);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	aughtExceptionHandler(this,  DEFAULT_STOPFITNESS,  bestValue);	      if(lastResult    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	15	None	replace
41	[BUG]  [BUGGY]  lastResult  =  current.convert(bestFitness,  isMinimize?  lastResult  :  -bestFitness);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  if  (getConvergenceChecker()  !=  null)  {  PointValuePair  current  =  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {    [BUGGY]  lastResult  =  current.convert(bestFitness,  isMinimize?  lastResult  :  -bestFitness);  [BUGGY]    break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	476	476	1	replace	lastResult  =  current.convert(bestFitness,  isMinimize?  lastResult  :  -bestFitness);	      lastResult    =    current.convert(lastResult,    isMinimize?    bestFitness    :    -bestFitness);    	non-compiled	[CE]  ')'  expected	6	None	replace
