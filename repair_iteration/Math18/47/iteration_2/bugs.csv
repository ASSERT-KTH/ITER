bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(xmean,  xold);  [CE]  [FE]          AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  xmean  =  updateEvolutionPaths(xmean,  xold);  [BUGGY]    RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	xmean  =  updateEvolutionPaths(xmean,  xold);	      xmean    =    updateEvolutionPaths(xmean,    bestArz);    	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(xmean,  bestArx);  [CE]  [FE]            AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  xmean  =  updateEvolutionPaths(xmean,  bestArx);  [BUGGY]    RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	xmean  =  updateEvolutionPaths(xmean,  bestArx);	      xmean    =    updateEvolutionPaths(xmean,    bestArz);    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  xmean  =  bestArz.multiply(weights,  DEFAULT_ISACTIVECMA);  [CE]  [FE]          AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  xmean  =  bestArz.multiply(weights,  DEFAULT_ISACTIVECMA);  [BUGGY]    RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	xmean  =  bestArz.multiply(weights,  DEFAULT_ISACTIVECMA);	      xmean    =    bestArz.multiply(weights);    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  RealMatrix  bestArz  =  selectRows(arx,  MathArrays.copyOf(arindex,  mu));  [CE]  [FE]        AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  RealMatrix  bestArz  =  selectRows(arx,  MathArrays.copyOf(arindex,  mu));  [BUGGY]    RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	RealMatrix  bestArz  =  selectRows(arx,  MathArrays.copyOf(arindex,  mu));	      RealMatrix    bestArz    =    selectColumns(arx,    MathArrays.copyOf(arindex,    mu));    	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  RealMatrix  bestArz  =  selectColumns(arx,  MathArrays.copyOf(arindex,  xmean));  [CE]  [FE]          AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  RealMatrix  bestArz  =  selectColumns(arx,  MathArrays.copyOf(arindex,  xmean));  [BUGGY]    RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	RealMatrix  bestArz  =  selectColumns(arx,  MathArrays.copyOf(arindex,  xmean));	      RealMatrix    bestArz    =    selectColumns(arx,    MathArrays.copyOf(arindex,    mu));    	non-compiled	[CE]  	1	None	replace
6	[BUG]  [BUGGY]  xmean  =  zmean.multiply(weights);  [CE]  [FE]        AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  xmean  =  zmean.multiply(weights);  [BUGGY]    RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	xmean  =  zmean.multiply(weights);	      xmean    =    xmean.multiply(weights);    	non-compiled	[CE]  	8	None	replace
7	[BUG]  [BUGGY]  RealMatrix  zmean  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  [CE]  [FE]            AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  RealMatrix  zmean  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  [BUGGY]    RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	RealMatrix  zmean  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));	      RealMatrix    bestArz    =    selectColumns(arx,    MathArrays.copyOf(arindex,    mu));    xmean    =    bestArz.multiply(weights);    	non-compiled	[CE]  	3	None	replace
8	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(xold,  xmean);  [CE]  [FE]            AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  xmean  =  updateEvolutionPaths(xold,  xmean);  [BUGGY]    RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	xmean  =  updateEvolutionPaths(xold,  xmean);	      xmean    =    updateEvolutionPaths(xold,    bestArz);    	non-compiled	[CE]  	10	None	replace
9	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(xold,  bestArx);  [CE]  [FE]              AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  xmean  =  updateEvolutionPaths(xold,  bestArx);  [BUGGY]    RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	xmean  =  updateEvolutionPaths(xold,  bestArx);	      xmean    =    updateEvolutionPaths(xold,    bestArz);    	non-compiled	[CE]  	10	None	replace
10	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(bestArx,  xold);  [CE]  [FE]        AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  xmean  =  updateEvolutionPaths(bestArx,  xold);  [BUGGY]    RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	xmean  =  updateEvolutionPaths(bestArx,  xold);	      xmean    =    updateEvolutionPaths(bestArx,    xmean);    	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(oldArx,  xmean);  [CE]  [FE]        AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  xmean  =  updateEvolutionPaths(oldArx,  xmean);  [BUGGY]    RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	xmean  =  updateEvolutionPaths(oldArx,  xmean);	      xmean    =    updateEvolutionPaths(bestArx,    xmean);    	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  if(bestArz!=  null)  {  xmean  =  bestArz.multiply(weights);  }  [CE]  [FE]          AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  if(bestArz!=  null)  {  xmean  =  bestArz.multiply(weights);  }  [BUGGY]    RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	if(bestArz!=  null)  {  xmean  =  bestArz.multiply(weights);  }	      xmean    =    bestArz.multiply(weights);    	non-compiled	[CE]  	2	None	replace
13	[BUG]  [BUGGY]  RealMatrix  bestArz  =  selectRanges(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArz.multiply(weights);  [CE]  [FE]            AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  RealMatrix  bestArz  =  selectRanges(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArz.multiply(weights);  [BUGGY]    RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	RealMatrix  bestArz  =  selectRanges(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArz.multiply(weights);	      RealMatrix    bestArz    =    selectColumns(arx,    MathArrays.copyOf(arindex,    mu));    xmean    =    bestArz.multiply(weights);    	non-compiled	[CE]  	3	None	replace
14	[BUG]  [BUGGY]  xmean  =  xold.multiply(weights);  [CE]  [FE]        AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  xmean  =  xold.multiply(weights);  [BUGGY]    RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	xmean  =  xold.multiply(weights);	      xmean    =    xmean.multiply(weights);    	non-compiled	[CE]  	8	None	replace
15	[BUG]  [BUGGY]  RealMatrix  zmean  =  xmean.multiply(weights);  [CE]  [FE]        AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  RealMatrix  zmean  =  xmean.multiply(weights);  [BUGGY]    boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	RealMatrix  zmean  =  xmean.multiply(weights);	  RealMatrix    zmean    =    bestArz.multiply(weights,    xmean);    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  RealMatrix  xmean  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  [CE]  [FE]            AssertionError    [CONTEXT]    break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));    [BUGGY]  RealMatrix  xmean  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  [BUGGY]    RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	410	410	1	replace	RealMatrix  xmean  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));	      RealMatrix    bestArz    =    selectColumns(arx,    MathArrays.copyOf(arindex,    mu));    xmean    =    bestArz.multiply(weights);    	non-compiled	[CE]  	3	None	replace
