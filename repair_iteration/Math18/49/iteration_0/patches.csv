bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    hsig  =  updateEvolutionPaths(zmean,  xold);  [CE]  [FE]    AssertionError  [CONTEXT]  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  [BUGGY]    hsig  =  updateEvolutionPaths(zmean,  xold);  [BUGGY]  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	412	412	1	replace	    hsig  =  updateEvolutionPaths(zmean,  xold);		non-compiled	[CE]  	99	None	add
2	[BUG]  [BUGGY]    boolean  diagnosticOnly  =  updateEvolutionPaths(diagonalOnly,  xold);  [CE]  [FE]      AssertionError  [CONTEXT]  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  [BUGGY]    boolean  diagnosticOnly  =  updateEvolutionPaths(diagonalOnly,  xold);  [BUGGY]  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	412	412	1	replace	    boolean  diagnosticOnly  =  updateEvolutionPaths(diagonalOnly,  xold);		non-compiled	[CE]  	99	None	add
3	[BUG]  [BUGGY]    hsig  =  updateEvolutionPaths(diagonalOnly,  xold);  [CE]  [FE]        AssertionError  [CONTEXT]  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  [BUGGY]    hsig  =  updateEvolutionPaths(diagonalOnly,  xold);  [BUGGY]  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	412	412	1	replace	    hsig  =  updateEvolutionPaths(diagonalOnly,  xold);		non-compiled	[CE]  	99	None	add
4	[BUG]  [BUGGY]  if  (hsig  <  =  0)  {  [CE]  [FE]    AssertionError  [CONTEXT]  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  [BUGGY]  if  (hsig  <  =  0)  {  [BUGGY]  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	412	412	1	replace	if  (hsig  <  =  0)  {	if  (diagonalOnly  <=  0)  {  	non-compiled	[CE]  	98	None	replace
5	[BUG]  [BUGGY]    boolean  diagnosticOnly  =  updateDiagonalOnly(zmean,  xold);  [CE]  [FE]    AssertionError  [CONTEXT]  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  [BUGGY]    boolean  diagnosticOnly  =  updateDiagonalOnly(zmean,  xold);  [BUGGY]  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	412	412	1	replace	    boolean  diagnosticOnly  =  updateDiagonalOnly(zmean,  xold);		non-compiled	[CE]  	99	None	add
6	[BUG]  [BUGGY]    boolean  diagnosticOnly  =  updateDiagonalOnly(hsig,  xold);  [CE]  [FE]      AssertionError  [CONTEXT]  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  [BUGGY]    boolean  diagnosticOnly  =  updateDiagonalOnly(hsig,  xold);  [BUGGY]  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	412	412	1	replace	    boolean  diagnosticOnly  =  updateDiagonalOnly(hsig,  xold);		non-compiled	[CE]  	99	None	add
7	[BUG]  [BUGGY]  if  (hsig  <  0)  {  [CE]  [FE]    AssertionError  [CONTEXT]  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  [BUGGY]  if  (hsig  <  0)  {  [BUGGY]  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	412	412	1	replace	if  (hsig  <  0)  {	if  (diagonalOnly  <=  0)  {  	non-compiled	[CE]  	98	None	replace
8	[BUG]  [BUGGY]    boolean  diagnosticOnly  =  hsig.isActive();  [CE]  [FE]    AssertionError  [CONTEXT]  }  int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  [BUGGY]    boolean  diagnosticOnly  =  hsig.isActive();  [BUGGY]  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	412	412	1	replace	    boolean  diagnosticOnly  =  hsig.isActive();		non-compiled	[CE]  	99	None	add
