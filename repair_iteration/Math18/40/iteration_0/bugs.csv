bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
80	[BUG] [BUGGY] fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness  } catch (TooManyEvaluationsException e) { [FE] AssertionError [CONTEXT] .scalarMultiply(sigma)); } if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) { break; }  arz.setColumn(k, randn(dimension)); } copyColumn(arxk, 0, arx, k); try { [BUGGY] fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness     } catch (TooManyEvaluationsException e) { [BUGGY] } catch (TooManyEvaluationsException e) { break generationLoop; } }  int[] arindex = sortedIndices(fitness);  RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); [CLASS] CMAESOptimizer DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean DEFAULT_ISACTIVECMA generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double DEFAULT_STOPFITNESS bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness double[][] boundaries List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int DEFAULT_CHECKFEASABLECOUNT DEFAULT_DIAGONALONLY DEFAULT_MAXITERATIONS checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu RandomGenerator DEFAULT_RANDOMGENERATOR random PointValuePair current lastResult optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	398	399	1	replace	
81	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] .scalarMultiply(sigma)); } if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) { break; }  arz.setColumn(k, randn(dimension)); } copyColumn(arxk, 0, arx, k); try { [BUGGY] [BUGGY] fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness     } catch (TooManyEvaluationsException e) { } catch (TooManyEvaluationsException e) { break generationLoop; } }  int[] arindex = sortedIndices(fitness);  RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); [CLASS] CMAESOptimizer DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean DEFAULT_ISACTIVECMA generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double DEFAULT_STOPFITNESS bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness double[][] boundaries List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int DEFAULT_CHECKFEASABLECOUNT DEFAULT_DIAGONALONLY DEFAULT_MAXITERATIONS checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu RandomGenerator DEFAULT_RANDOMGENERATOR random PointValuePair current lastResult optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	398	399	1	add	
