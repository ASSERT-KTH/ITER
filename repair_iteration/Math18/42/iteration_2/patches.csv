bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  weights  =  sortedIndices(fitness);  [CE]  [FE]              AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]  weights  =  sortedIndices(fitness);  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]  weights  =  sortedIndices(fitness);	  Integer[]    weights    =    sortedIndices(fitness);    	non-compiled	[CE]  	12	None	replace
2	[BUG]  [BUGGY]  Integer[]  arindex  =  new  Integer[size()  ];  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionPaths(arx  [CE]  [FE]            AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  Integer[]  arindex  =  new  Integer[size()  ];  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionPaths(arx  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	Integer[]  arindex  =  new  Integer[size()  ];  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionPaths(arx	  if(fitness!=    null)    {    for(int    i    =    0,    isRepairOnly    =    0;    i    <    isRepairMode;    i++)    {    if(isRepairMode    ||    isRepairMode)    {    updateEvolutionPaths(arx    	non-compiled	[CE]  	13	None	replace
3	[BUG]  [BUGGY]  int[]fitness  =  sortedIndices(diagonalOnly,  zmean);  [CE]  [FE]                AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]fitness  =  sortedIndices(diagonalOnly,  zmean);  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]fitness  =  sortedIndices(diagonalOnly,  zmean);	  int[]fitness    =    sortedIndices(diagonalOnly,    xmean);    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  int[]fitness  =  sortedFitness(fitness,  arx);  [CE]  [FE]            AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]fitness  =  sortedFitness(fitness,  arx);  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]fitness  =  sortedFitness(fitness,  arx);	  int[]fitness    =    sortedIndices(fitness,    arx);    	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  int[]  arindex  =  sortedIndices(arx,fitness);  [CE]  [FE]              AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]  arindex  =  sortedIndices(arx,fitness);  [BUGGY]        RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]  arindex  =  sortedIndices(arx,fitness);	  int[]    arindex    =    sortedIndices(dataArea,fitness);    	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  int[]  arindex  =  sortedIndices(dataArea,  0,fitness);  [CE]  [FE]                AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]  arindex  =  sortedIndices(dataArea,  0,fitness);  [BUGGY]        RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]  arindex  =  sortedIndices(dataArea,  0,fitness);	  int[]    arindex    =    sortedIndices(dataArea,fitness);    	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  int[]fitness  =  sortedFitness(fitness,  dataArea);  [CE]  [FE]            AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]fitness  =  sortedFitness(fitness,  dataArea);  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]fitness  =  sortedFitness(fitness,  dataArea);	  int[]fitness    =    sortedFitness(fitness);    	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  int[]fitness  =  sortedIndices(fitness,  dataArea,  true);  [CE]  [FE]            AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]fitness  =  sortedIndices(fitness,  dataArea,  true);  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]fitness  =  sortedIndices(fitness,  dataArea,  true);	  int[]fitness    =    sortedIndices(fitness,    dataArea);    	non-compiled	[CE]  	9	None	replace
9	[BUG]  [BUGGY]  int[]  arindex  =  sortedIndices(dataArea,  diagnosticOnly);  [CE]  [FE]                AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]  arindex  =  sortedIndices(dataArea,  diagnosticOnly);  [BUGGY]        RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]  arindex  =  sortedIndices(dataArea,  diagnosticOnly);	  int[]    arindex    =    sortedIndices(diagonalOnly,    dataArea);    	non-compiled	[CE]  	6	None	replace
10	[BUG]  [BUGGY]  int[]  arindex  =  sortedIndices(dataArea,  diagnosisOnly);  [CE]  [FE]                  AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]  arindex  =  sortedIndices(dataArea,  diagnosisOnly);  [BUGGY]        RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]  arindex  =  sortedIndices(dataArea,  diagnosisOnly);	  int[]    arindex    =    sortedIndices(diagonalOnly,    dataArea);    	non-compiled	[CE]  	6	None	replace
11	[BUG]  [BUGGY]  int[]fitness  =  sortedIndices(fitness,  zmean);  [CE]  [FE]            AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]fitness  =  sortedIndices(fitness,  zmean);  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]fitness  =  sortedIndices(fitness,  zmean);	  int[]fitness    =    sortedIndices(fitness,    xmean);    	non-compiled	[CE]  	10	None	replace
12	[BUG]  [BUGGY]  Integer[]  arindex  =  sortedIndices(fitness);  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateE  [CE]  [FE]              AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  Integer[]  arindex  =  sortedIndices(fitness);  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateE  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	Integer[]  arindex  =  sortedIndices(fitness);  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateE	  Integer[]    arindex    =    sortedIndices(fitness);    for(int    i    =    0,    isRepairOnly    =    0;    i    <    isRepairMode;    i++)    {    if(isRepairMode    ||    isRepairMode)    {    updateEvolutionPaths(arx    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  Integer[]  arindex  =  sortedIndices(dimension);  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionPaths  [CE]  [FE]                AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  Integer[]  arindex  =  sortedIndices(dimension);  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionPaths  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	Integer[]  arindex  =  sortedIndices(dimension);  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionPaths	  Integer[]    arindex    =    sortedIndices(fitness);    for(int    i    =    0,    isRepairOnly    =    0;    i    <    isRepairMode;    i++)    {    if(isRepairMode    ||    isRepairMode)    {    updateEvolutionPaths(arx    	non-compiled	[CE]  	8	None	replace
14	[BUG]  [BUGGY]  Integer[]  arindex  =  sortedIndices(diagonalOnly);  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateE  [CE]  [FE]            AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  Integer[]  arindex  =  sortedIndices(diagonalOnly);  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateE  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	Integer[]  arindex  =  sortedIndices(diagonalOnly);  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateE	  Integer[]    arindex    =    sortedIndices(fitness);    for(int    i    =    0,    isRepairOnly    =    0;    i    <    isRepairMode;    i++)    {    if(isRepairMode    ||    isRepairMode)    {    updateEvolutionPaths(arx,    ar    	non-compiled	[CE]  	7	None	replace
15	[BUG]  [BUGGY]  Integer[]  arindex  =  sortedIndices(diagonalOnly);  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionPaths  [CE]  [FE]              AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  Integer[]  arindex  =  sortedIndices(diagonalOnly);  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionPaths  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	Integer[]  arindex  =  sortedIndices(diagonalOnly);  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionPaths	  Integer[]    arindex    =    sortedIndices(fitness);    for(int    i    =    0,    isRepairOnly    =    0;    i    <    isRepairMode;    i++)    {    if(isRepairMode    ||    isRepairMode)    {    updateEvolutionPaths(arx,    ar    	non-compiled	[CE]  	7	None	replace
16	[BUG]  [BUGGY]  int[]fitness  =  sortedIndices(fitness,  dataArea,  null);  [CE]  [FE]            AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]fitness  =  sortedIndices(fitness,  dataArea,  null);  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]fitness  =  sortedIndices(fitness,  dataArea,  null);	  int[]fitness    =    sortedIndices(fitness,    dataArea);    	non-compiled	[CE]  	9	None	replace
17	[BUG]  [BUGGY]  Integer[]  arindex  =  sortedIndices(fitness,  dataArea);  [CE]  [FE]            AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  Integer[]  arindex  =  sortedIndices(fitness,  dataArea);  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	Integer[]  arindex  =  sortedIndices(fitness,  dataArea);	  Integer[]    arindex    =    sortedIndices(fitness);    	non-compiled	[CE]  	11	None	replace
18	[BUG]  [BUGGY]  int[]fitness  =  sortedFitness(badArx);  [CE]  [FE]              AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]fitness  =  sortedFitness(badArx);  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]fitness  =  sortedFitness(badArx);	  int[]fitness    =    sortedFitness(diagonalOnly);    	non-compiled	[CE]  	3	None	replace
19	[BUG]  [BUGGY]  &&  isActive())  {  updateEvolutionPaths(arx  [CE]  [FE]            AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  &&  isActive())  {  updateEvolutionPaths(arx  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	&&  isActive())  {  updateEvolutionPaths(arx	  if(fitness!=    null)    {    for(int    i    =    0,    isRepairOnly    =    0;    i    <    isRepairMode;    i++)    {    if(isRepairMode    ||    isRepairMode)    {    updateEvolutionPaths(arx    	non-compiled	[CE]  	13	None	replace
20	[BUG]  [BUGGY]  Integer[]  arindex  =  sortedIndices(fitness);  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionP  [CE]  [FE]            AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  Integer[]  arindex  =  sortedIndices(fitness);  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionP  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	Integer[]  arindex  =  sortedIndices(fitness);  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionP	  Integer[]    arindex    =    sortedIndices(fitness);    for(int    i    =    0,    isRepairOnly    =    0;    i    <    isRepairMode;    i++)    {    if(isRepairMode    ||    isRepairMode)    {    updateEvolutionPaths(arx,    ar    	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  int[]fitness  =  sortedIndices(diagonalOnly,  xmean,  zmean);  [CE]  [FE]                AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]fitness  =  sortedIndices(diagonalOnly,  xmean,  zmean);  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]fitness  =  sortedIndices(diagonalOnly,  xmean,  zmean);	  int[]fitness    =    sortedIndices(diagonalOnly,    xmean);    	non-compiled	[CE]  	2	None	replace
22	[BUG]  [BUGGY]  int[]fitness  =  sortedIndices(xmean,  diagnosticOnly);  [CE]  [FE]                  AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]fitness  =  sortedIndices(xmean,  diagnosticOnly);  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]fitness  =  sortedIndices(xmean,  diagnosticOnly);	  int[]fitness    =    sortedIndices(diagonalOnly,    xmean);    	non-compiled	[CE]  	2	None	replace
23	[BUG]  [BUGGY]  int[]  arindex  =  sortedIndices(diagonalOnly,  dataArea,  xmean);  [CE]  [FE]                AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]  arindex  =  sortedIndices(diagonalOnly,  dataArea,  xmean);  [BUGGY]        RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]  arindex  =  sortedIndices(diagonalOnly,  dataArea,  xmean);	  int[]    arindex    =    sortedIndices(diagonalOnly,    dataArea);    	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  int[]fitness  =  sortedIndices(fitness,  xmean,  zmean);  [CE]  [FE]            AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]fitness  =  sortedIndices(fitness,  xmean,  zmean);  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]fitness  =  sortedIndices(fitness,  xmean,  zmean);	  int[]fitness    =    sortedIndices(fitness,    xmean);    	non-compiled	[CE]  	10	None	replace
25	[BUG]  [BUGGY]  &&  fitness!=  null)  {  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionPaths(arx  [CE]  [FE]              AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  &&  fitness!=  null)  {  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionPaths(arx  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	&&  fitness!=  null)  {  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionPaths(arx	  if(fitness!=    null)    {    for(int    i    =    0,    isRepairOnly    =    0;    i    <    isRepairMode;    i++)    {    if(isRepairMode    ||    isRepairMode)    {    updateEvolutionPaths(arx,    ar    	non-compiled	[CE]  	14	None	replace
26	[BUG]  [BUGGY]  &&  fitness!=  null)  {  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionPaths(arx,  [CE]  [FE]                AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  &&  fitness!=  null)  {  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionPaths(arx,  [BUGGY]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	&&  fitness!=  null)  {  for(int  i  =  0,  isRepairOnly  =  0;  i  <  isRepairMode;  i++)  {  if(isRepairMode  ||  isRepairMode)  {  updateEvolutionPaths(arx,	  if(fitness!=    null)    {    for(int    i    =    0,    isRepairOnly    =    0;    i    <    isRepairMode;    i++)    {    if(isRepairMode    ||    isRepairMode)    {    updateEvolutionPaths(arx,    ar    	non-compiled	[CE]  	14	None	replace
27	[BUG]  [BUGGY]  int[]  arindex  =  sortedIndices(dataArea,  dataArea,  fitness);  [CE]  [FE]              AssertionError      [CONTEXT]      arz.setColumn(k,  randn(dimension));  }  copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }        [BUGGY]  int[]  arindex  =  sortedIndices(dataArea,  dataArea,  fitness);  [BUGGY]        RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	404	404	1	replace	int[]  arindex  =  sortedIndices(dataArea,  dataArea,  fitness);	  int[]    arindex    =    sortedIndices(dataArea,fitness);    	non-compiled	[CE]  	5	None	replace
