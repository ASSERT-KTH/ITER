bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boundaries[0]  =  lB.length;  [CE]  [FE]          AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  boundaries[0]  =  lB.length;  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	boundaries[0]  =  lB.length;	  boundaries[0]    =    lB;    	non-compiled	[CE]  	5	None	replace
2	[BUG]  [BUGGY]  boundaries[1]  =  0;  [CE]  [FE]        AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  boundaries[1]  =  0;  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	boundaries[1]  =  0;	  boundaries[1]    =    lB;    	non-compiled	[CE]  	4	None	replace
3	[BUG]  [BUGGY]  boundaries[1]  =  lB.length;  [CE]  [FE]          AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  boundaries[1]  =  lB.length;  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	boundaries[1]  =  lB.length;	  boundaries[1]    =    lB;    	non-compiled	[CE]  	4	None	replace
4	[BUG]  [BUGGY]  Integer  uB  =  getInfiniteBounds(i);  [CE]  [FE]            AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  Integer  uB  =  getInfiniteBounds(i);  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	Integer  uB  =  getInfiniteBounds(i);	      Integer    uB    =    getFiniteBounds(i);    	non-compiled	[CE]  	8	None	replace
5	[BUG]  [BUGGY]  Integer  uB  =  getFiniteBounds(0,  0);  [CE]  [FE]              AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  Integer  uB  =  getFiniteBounds(0,  0);  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	Integer  uB  =  getFiniteBounds(0,  0);	      Integer    uB    =    getFiniteBounds(i);    	non-compiled	[CE]  	8	None	replace
6	[BUG]  [BUGGY]  int  uB  =  Math.min(0,  lB.length  -  1);  [CE]  [FE]        AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  int  uB  =  Math.min(0,  lB.length  -  1);  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	int  uB  =  Math.min(0,  lB.length  -  1);	      int    uB    =    Math.min(0,    lB.length);    	non-compiled	[CE]  	10	None	replace
7	[BUG]  [BUGGY]  int  uB  =  Math.max(0,  lB.length);  [CE]  [FE]          AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  int  uB  =  Math.max(0,  lB.length);  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	int  uB  =  Math.max(0,  lB.length);	      int    uB    =    Math.min(0,    lB.length);    	non-compiled	[CE]  	10	None	replace
8	[BUG]  [BUGGY]  int  uB  =  getInputSigma().length  +  1;  [CE]  [FE]            AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  int  uB  =  getInputSigma().length  +  1;  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	int  uB  =  getInputSigma().length  +  1;	      int    uB    =    getInputSigma().length;    	non-compiled	[CE]  	12	None	replace
9	[BUG]  [BUGGY]  int  uB  =  getInputSigma().length  -  1;  [CE]  [FE]              AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  int  uB  =  getInputSigma().length  -  1;  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	int  uB  =  getInputSigma().length  -  1;	      int    uB    =    getInputSigma().length;    	non-compiled	[CE]  	12	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  boundaries.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  continue;  }  [CE]  [FE]        AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  for(int  i  =  1;  i  <  boundaries.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  continue;  }  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	for(int  i  =  1;  i  <  boundaries.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  continue;  }	      for(int    i    =    0;    i    <    boundaries.length;    i++)    {    if(Double.isInfinite(boundaries[1][i]    -    boundaries[0][i]))    {    continue;    }    	non-compiled	[CE]  	1	None	replace
11	[BUG]  [BUGGY]  uB  =  Math.min(0,  lB.length  -  1);  [CE]  [FE]        AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  uB  =  Math.min(0,  lB.length  -  1);  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	uB  =  Math.min(0,  lB.length  -  1);	      uB    =    Math.min(0,    lB.length);    	non-compiled	[CE]  	6	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  boundaries.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  return;  }  [CE]  [FE]          AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  for(int  i  =  1;  i  <  boundaries.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  return;  }  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	for(int  i  =  1;  i  <  boundaries.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  return;  }	      for(int    i    =    0;    i    <    boundaries.length;    i++)    {    if(Double.isInfinite(boundaries[1][i]    -    boundaries[0][i]))    {    return;    }    	non-compiled	[CE]  	2	None	replace
13	[BUG]  [BUGGY]  Integer  uB  =  getInfiniteBounds();  [CE]  [FE]          AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  Integer  uB  =  getInfiniteBounds();  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	Integer  uB  =  getInfiniteBounds();	      Integer    uB    =    getFiniteBounds();    	non-compiled	[CE]  	7	None	replace
14	[BUG]  [BUGGY]  int  uB  =  getInputSigma()  +  1;  [CE]  [FE]          AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  int  uB  =  getInputSigma()  +  1;  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	int  uB  =  getInputSigma()  +  1;	      int    uB    =    getInputSigma();    	non-compiled	[CE]  	11	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  boundaries.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double[][]  uB  =  new  double[  [CE]  [FE]            AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  for(int  i  =  0;  i  <  boundaries.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double[][]  uB  =  new  double[  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	for(int  i  =  0;  i  <  boundaries.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double[][]  uB  =  new  double[	      for(int    i    =    0;    i    <    boundaries.length;    i++)    {    if(Double.isInfinite(boundaries[1][i]    -    boundaries[0][i]))    {    final    double[][]    uB    =    new    double[2][    	non-compiled	[CE]  	3	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  boundaries[1][i].length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double[][]  uB  =  new  double[  [CE]  [FE]              AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  for(int  i  =  0;  i  <  boundaries[1][i].length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double[][]  uB  =  new  double[  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	for(int  i  =  0;  i  <  boundaries[1][i].length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double[][]  uB  =  new  double[	      for(int    i    =    0;    i    <    boundaries.length;    i++)    {    if(Double.isInfinite(boundaries[1][i]    -    boundaries[0][i]))    {    final    double[][]    uB    =    new    double[2][    	non-compiled	[CE]  	3	None	replace
17	[BUG]  [BUGGY]  int  uB  =  Math.min(0,  lB.length  -  2);  [CE]  [FE]        AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  int  uB  =  Math.min(0,  lB.length  -  2);  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	int  uB  =  Math.min(0,  lB.length  -  2);	      int    uB    =    Math.min(0,    lB.length);    	non-compiled	[CE]  	10	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  borders.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  continue;  }  [CE]  [FE]        AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  for(int  i  =  0;  i  <  borders.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  continue;  }  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	for(int  i  =  0;  i  <  borders.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  continue;  }	      for(int    i    =    0;    i    <    boundaries.length;    i++)    {    if(Double.isInfinite(boundaries[1][i]    -    boundaries[0][i]))    {    continue;    }    	non-compiled	[CE]  	1	None	replace
19	[BUG]  [BUGGY]  Integer  uB  =  getFiniteBounds(0,  1);  [CE]  [FE]            AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  Integer  uB  =  getFiniteBounds(0,  1);  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	Integer  uB  =  getFiniteBounds(0,  1);	      Integer    uB    =    getFiniteBounds(i);    	non-compiled	[CE]  	8	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  boundaries.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double[][]  uB  =  new  double[2  [CE]  [FE]            AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  for(int  i  =  0;  i  <  boundaries.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double[][]  uB  =  new  double[2  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	for(int  i  =  0;  i  <  boundaries.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double[][]  uB  =  new  double[2	      for(int    i    =    0;    i    <    boundaries.length;    i++)    {    if(Double.isInfinite(boundaries[1][i]    -    boundaries[0][i]))    {    final    double[][]    uB    =    new    double[2][    	non-compiled	[CE]  	3	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  borders.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  return;  }  [CE]  [FE]          AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  for(int  i  =  0;  i  <  borders.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  return;  }  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	for(int  i  =  0;  i  <  borders.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  return;  }	      for(int    i    =    0;    i    <    boundaries.length;    i++)    {    if(Double.isInfinite(boundaries[1][i]    -    boundaries[0][i]))    {    return;    }    	non-compiled	[CE]  	2	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  boundaries.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double[][]  uB  =  new  double[2]  [CE]  [FE]            AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  for(int  i  =  0;  i  <  boundaries.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double[][]  uB  =  new  double[2]  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	for(int  i  =  0;  i  <  boundaries.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double[][]  uB  =  new  double[2]	      for(int    i    =    0;    i    <    boundaries.length;    i++)    {    if(Double.isInfinite(boundaries[1][i]    -    boundaries[0][i]))    {    final    double[][]    uB    =    new    double[2][    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  uB  =  Math.min(0,  lB.length  -  2);  [CE]  [FE]        AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  uB  =  Math.min(0,  lB.length  -  2);  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	uB  =  Math.min(0,  lB.length  -  2);	      uB    =    Math.min(0,    lB.length);    	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lB.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  return;  }  [CE]  [FE]          AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  for(int  i  =  0;  i  <  lB.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  return;  }  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	for(int  i  =  0;  i  <  lB.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  return;  }	      for(int    i    =    0;    i    <    boundaries.length;    i++)    {    if(Double.isInfinite(boundaries[1][i]    -    boundaries[0][i]))    {    return;    }    	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lB.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  continue;  }  [CE]  [FE]        AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  for(int  i  =  0;  i  <  lB.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  continue;  }  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	for(int  i  =  0;  i  <  lB.length;  i++)  {  if(Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  continue;  }	      for(int    i    =    0;    i    <    boundaries.length;    i++)    {    if(Double.isInfinite(boundaries[1][i]    -    boundaries[0][i]))    {    continue;    }    	non-compiled	[CE]  	1	None	replace
26	[BUG]  [BUGGY]  double  uB  =  getInputSigma();  [CE]  [FE]          AssertionError    [CONTEXT]    if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;    [BUGGY]  double  uB  =  getInputSigma();  [BUGGY]    boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	537	537	1	replace	double  uB  =  getInputSigma();	      int    uB    =    getInputSigma();    	non-compiled	[CE]  	11	None	replace
