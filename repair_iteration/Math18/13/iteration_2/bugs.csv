bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boundaries[0][i]  =  uB[i].doubleValue();  [CE]  [FE]        AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[0][i]  =  uB[i].doubleValue();  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[0][i]  =  uB[i].doubleValue();	      boundaries[0][i]    =    lB[i].doubleValue();    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  boundaries[0][i]  =  lB[i];  [CE]  [FE]          AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[0][i]  =  lB[i];  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[0][i]  =  lB[i];	      boundaries[0][i]    =    uB[i];    	non-compiled	[CE]  	5	None	replace
3	[BUG]  [BUGGY]  boundaries[1][i]  =  uB[i];  [CE]  [FE]            AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[1][i]  =  uB[i];  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[1][i]  =  uB[i];	      boundaries[0][i]    =    uB[i];    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  if  (Double.isNaN(boundaries[0][i]  -  boundaries[1][i]))  {  [CE]  [FE]          AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isNaN(boundaries[0][i]  -  boundaries[1][i]))  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if  (Double.isNaN(boundaries[0][i]  -  boundaries[1][i]))  {	  if    (Double.isNaN(boundaries[1][i]    -    boundaries[0][i]))    {    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  if  (Double.isNaN(boundaries[1][i]  -  boundaries[0][i])||  Double.isNaN(boundaries[1][i]  -  boundaries[0][i]))  {  [CE]  [FE]            AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isNaN(boundaries[1][i]  -  boundaries[0][i])||  Double.isNaN(boundaries[1][i]  -  boundaries[0][i]))  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if  (Double.isNaN(boundaries[1][i]  -  boundaries[0][i])||  Double.isNaN(boundaries[1][i]  -  boundaries[0][i]))  {	  if    (Double.isNaN(boundaries[1][i]    -    boundaries[0][i]))    {    	non-compiled	[CE]  	2	None	replace
6	[BUG]  [BUGGY]  boundaries[0][i]  =  Math.abs(lB[i]  +  1);  [CE]  [FE]            AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[0][i]  =  Math.abs(lB[i]  +  1);  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[0][i]  =  Math.abs(lB[i]  +  1);	      boundaries[0][i]    =    Math.abs(lB[i]);    	non-compiled	[CE]  	10	None	replace
7	[BUG]  [BUGGY]  boundaries[0][i]  =  Math.abs(lB[i]  -  1);  [CE]  [FE]              AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[0][i]  =  Math.abs(lB[i]  -  1);  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[0][i]  =  Math.abs(lB[i]  -  1);	      boundaries[0][i]    =    Math.abs(lB[i]);    	non-compiled	[CE]  	10	None	replace
8	[BUG]  [BUGGY]  boundaries[0][i]  =  Math.max(0,  boundaries[1][i]  -  1);  [CE]  [FE]        AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[0][i]  =  Math.max(0,  boundaries[1][i]  -  1);  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[0][i]  =  Math.max(0,  boundaries[1][i]  -  1);	      boundaries[0][i]    =    Math.max(0,    boundaries[1][i]);    	non-compiled	[CE]  	4	None	replace
9	[BUG]  [BUGGY]  ((  Double)lB[i]).doubleValue();  [CE]  [FE]            AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  ((  Double)lB[i]).doubleValue();  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	((  Double)lB[i]).doubleValue();	      	non-compiled	[CE]  	3	None	replace
10	[BUG]  [BUGGY]  if  (Double.isNaN(boundaries[0][i]  -  boundaries[1][i])||  Double.isInfinite(boundaries[0][i]  -  boundaries[1][i]))  {  [CE]  [FE]        AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isNaN(boundaries[0][i]  -  boundaries[1][i])||  Double.isInfinite(boundaries[0][i]  -  boundaries[1][i]))  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if  (Double.isNaN(boundaries[0][i]  -  boundaries[1][i])||  Double.isInfinite(boundaries[0][i]  -  boundaries[1][i]))  {	  if    (Double.isInfinite(boundaries[0][i]    -    boundaries[1][i]))    {    	non-compiled	[CE]  	1	None	replace
11	[BUG]  [BUGGY]  if  (Double.isInfinite(boundaries[0][i]  -  boundaries[1][i])||  Double.isInfinite(boundaries[1][i]))  {  [CE]  [FE]          AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isInfinite(boundaries[0][i]  -  boundaries[1][i])||  Double.isInfinite(boundaries[1][i]))  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if  (Double.isInfinite(boundaries[0][i]  -  boundaries[1][i])||  Double.isInfinite(boundaries[1][i]))  {	  if    (Double.isInfinite(boundaries[0][i]    -    boundaries[1][i]))    {    	non-compiled	[CE]  	1	None	replace
12	[BUG]  [BUGGY]  boundaries[i]  =  Math.abs(lB[i]  +  1);  [CE]  [FE]        AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[i]  =  Math.abs(lB[i]  +  1);  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[i]  =  Math.abs(lB[i]  +  1);	      boundaries[i]    =    Math.abs(lB[i]);    	non-compiled	[CE]  	12	None	replace
13	[BUG]  [BUGGY]  boundaries[i]  =  Math.abs(boundaries[i]);  [CE]  [FE]          AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[i]  =  Math.abs(boundaries[i]);  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[i]  =  Math.abs(boundaries[i]);	      boundaries[i]    =    Math.abs(lB[i]);    	non-compiled	[CE]  	12	None	replace
14	[BUG]  [BUGGY]  boundaries[1][i]  =  Math.abs(lB[i]  -  lB[i]);  [CE]  [FE]          AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[1][i]  =  Math.abs(lB[i]  -  lB[i]);  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[1][i]  =  Math.abs(lB[i]  -  lB[i]);	      boundaries[0][i]    =    Math.abs(lB[i]    -    lB[i]);    	non-compiled	[CE]  	9	None	replace
15	[BUG]  [BUGGY]  boundaries[0][i]  =  Math.abs(lB[i]  -  lB[i]  +  1);  [CE]  [FE]            AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[0][i]  =  Math.abs(lB[i]  -  lB[i]  +  1);  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[0][i]  =  Math.abs(lB[i]  -  lB[i]  +  1);	      boundaries[0][i]    =    Math.abs(lB[i]    -    lB[i]);    	non-compiled	[CE]  	9	None	replace
16	[BUG]  [BUGGY]  if  (Double.isInfinite(boundaries[0][i]  -  lB[1][i]))  {  [CE]  [FE]        AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isInfinite(boundaries[0][i]  -  lB[1][i]))  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if  (Double.isInfinite(boundaries[0][i]  -  lB[1][i]))  {	  if    (Double.isInfinite(boundaries[0][i]    -    lB[0][i]))    {    	non-compiled	[CE]  	7	None	replace
17	[BUG]  [BUGGY]  if  (Double.isNaN(boundaries[0][i]  -  lB[0][i])||  Double.isInfinite(boundaries[1][i]))  {  [CE]  [FE]          AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isNaN(boundaries[0][i]  -  lB[0][i])||  Double.isInfinite(boundaries[1][i]))  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if  (Double.isNaN(boundaries[0][i]  -  lB[0][i])||  Double.isInfinite(boundaries[1][i]))  {	  if    (Double.isInfinite(boundaries[0][i]    -    lB[0][i]))    {    	non-compiled	[CE]  	7	None	replace
18	[BUG]  [BUGGY]  boundaries[0][i]  =  Math.max(0,  boundaries[1][i].length()  -  1);  [CE]  [FE]            AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[0][i]  =  Math.max(0,  boundaries[1][i].length()  -  1);  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[0][i]  =  Math.max(0,  boundaries[1][i].length()  -  1);	      boundaries[0][i]    =    Math.max(0,    boundaries[1][i].length());    	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  boundaries[0][i]  =  Math.max(0,  boundaries[1][i].length()  +  1);  [CE]  [FE]              AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[0][i]  =  Math.max(0,  boundaries[1][i].length()  +  1);  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[0][i]  =  Math.max(0,  boundaries[1][i].length()  +  1);	      boundaries[0][i]    =    Math.max(0,    boundaries[1][i].length());    	non-compiled	[CE]  	6	None	replace
20	[BUG]  [BUGGY]  if(Double.isNaN(boundaries[1][i]  -  boundaries[0][i])||  Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  [CE]  [FE]        AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if(Double.isNaN(boundaries[1][i]  -  boundaries[0][i])||  Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if(Double.isNaN(boundaries[1][i]  -  boundaries[0][i])||  Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {	  if    (Double.isInfinite(boundaries[1][i]    -    boundaries[0][i])||    Double.isInfinite(boundaries[1][i]    -    boundaries[0][i]))    {    	non-compiled	[CE]  	11	None	replace
21	[BUG]  [BUGGY]  if  (Double.isNaN(boundaries[0][i])||  Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  [CE]  [FE]          AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isNaN(boundaries[0][i])||  Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if  (Double.isNaN(boundaries[0][i])||  Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {	  if    (Double.isInfinite(boundaries[1][i]    -    boundaries[0][i])||    Double.isInfinite(boundaries[1][i]    -    boundaries[0][i]))    {    	non-compiled	[CE]  	11	None	replace
22	[BUG]  [BUGGY]  boundaries[0][i]  =  Math.abs(uB[i]);  [CE]  [FE]            AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[0][i]  =  Math.abs(uB[i]);  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[0][i]  =  Math.abs(uB[i]);	      boundaries[0][i]    =    Math.abs(lB[i]);    	non-compiled	[CE]  	10	None	replace
23	[BUG]  [BUGGY]  boundaries[0][i]  =  Math.max(0,  boundaries[1][i],  lB[i]);  [CE]  [FE]        AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[0][i]  =  Math.max(0,  boundaries[1][i],  lB[i]);  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[0][i]  =  Math.max(0,  boundaries[1][i],  lB[i]);	      boundaries[0][i]    =    Math.max(0,    boundaries[1][i]);    	non-compiled	[CE]  	4	None	replace
24	[BUG]  [BUGGY]  boundaries[0][i]  =  Math.max(0,  boundaries[1][i],  uB);  [CE]  [FE]          AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[0][i]  =  Math.max(0,  boundaries[1][i],  uB);  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[0][i]  =  Math.max(0,  boundaries[1][i],  uB);	      boundaries[0][i]    =    Math.max(0,    boundaries[1][i]);    	non-compiled	[CE]  	4	None	replace
25	[BUG]  [BUGGY]  if  (Double.isInfinite(boundaries[0][i]  -  boundaries[1][i])||  Double.isInfinite(boundaries[1][i]  -  boundaries[1][i]))  {  [CE]  [FE]        AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isInfinite(boundaries[0][i]  -  boundaries[1][i])||  Double.isInfinite(boundaries[1][i]  -  boundaries[1][i]))  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if  (Double.isInfinite(boundaries[0][i]  -  boundaries[1][i])||  Double.isInfinite(boundaries[1][i]  -  boundaries[1][i]))  {	  if    (Double.isInfinite(boundaries[1][i]    -    boundaries[0][i])||    Double.isInfinite(boundaries[1][i]    -    boundaries[0][i]))    {    	non-compiled	[CE]  	11	None	replace
26	[BUG]  [BUGGY]  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[1][i])||  Double.isInfinite(boundaries[1][i]  -  boundaries[1][i]))  {  [CE]  [FE]          AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isInfinite(boundaries[1][i]  -  boundaries[1][i])||  Double.isInfinite(boundaries[1][i]  -  boundaries[1][i]))  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if  (Double.isInfinite(boundaries[1][i]  -  boundaries[1][i])||  Double.isInfinite(boundaries[1][i]  -  boundaries[1][i]))  {	  if    (Double.isInfinite(boundaries[1][i]    -    boundaries[0][i])||    Double.isInfinite(boundaries[1][i]    -    boundaries[0][i]))    {    	non-compiled	[CE]  	11	None	replace
27	[BUG]  [BUGGY]  if  (Double.isInfinite(boundaries[0][i]  -  boundaries[1][i]),  true)  {  [CE]  [FE]        AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isInfinite(boundaries[0][i]  -  boundaries[1][i]),  true)  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if  (Double.isInfinite(boundaries[0][i]  -  boundaries[1][i]),  true)  {	  if    (Double.isInfinite(boundaries[0][i]    -    boundaries[1][i]))    {    	non-compiled	[CE]  	1	None	replace
28	[BUG]  [BUGGY]  if  (Double.isInfinite(boundaries[0][i]  /  boundaries[1][i]))  {  [CE]  [FE]          AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isInfinite(boundaries[0][i]  /  boundaries[1][i]))  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if  (Double.isInfinite(boundaries[0][i]  /  boundaries[1][i]))  {	  if    (Double.isInfinite(boundaries[0][i]    -    boundaries[1][i]))    {    	non-compiled	[CE]  	1	None	replace
29	[BUG]  [BUGGY]  final  double[][]  boundaries[0]  =  lB[i].doubleValue();  [CE]  [FE]            AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  final  double[][]  boundaries[0]  =  lB[i].doubleValue();  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	final  double[][]  boundaries[0]  =  lB[i].doubleValue();	      	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  final  double[][]  boundaries[0]  =  lB[i].getMatrix();  [CE]  [FE]              AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  final  double[][]  boundaries[0]  =  lB[i].getMatrix();  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	final  double[][]  boundaries[0]  =  lB[i].getMatrix();	      	non-compiled	[CE]  	3	None	replace
31	[BUG]  [BUGGY]  boundaries[i]  =  Math.abs(uB[i]);  [CE]  [FE]        AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[i]  =  Math.abs(uB[i]);  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[i]  =  Math.abs(uB[i]);	      boundaries[i]    =    Math.abs(lB[i]);    	non-compiled	[CE]  	12	None	replace
32	[BUG]  [BUGGY]  if  (Double.isNaN(boundaries[1][i]  -  boundaries[0][i])||  Double.isNaN(boundaries[1][i]  -  boundaries[1][i]))  {  [CE]  [FE]          AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isNaN(boundaries[1][i]  -  boundaries[0][i])||  Double.isNaN(boundaries[1][i]  -  boundaries[1][i]))  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if  (Double.isNaN(boundaries[1][i]  -  boundaries[0][i])||  Double.isNaN(boundaries[1][i]  -  boundaries[1][i]))  {	  if    (Double.isNaN(boundaries[1][i]    -    boundaries[0][i]))    {    	non-compiled	[CE]  	2	None	replace
33	[BUG]  [BUGGY]  boundaries[0][i]  =  Math.max(0,  boundaries[1][i],  lB[i].length());  [CE]  [FE]            AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[0][i]  =  Math.max(0,  boundaries[1][i],  lB[i].length());  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[0][i]  =  Math.max(0,  boundaries[1][i],  lB[i].length());	      boundaries[0][i]    =    Math.max(0,    boundaries[1][i].length());    	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  if  (Double.isInfinite(boundaries[1][i]  -  lB[1][i]))  {  [CE]  [FE]        AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isInfinite(boundaries[1][i]  -  lB[1][i]))  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if  (Double.isInfinite(boundaries[1][i]  -  lB[1][i]))  {	  if    (Double.isInfinite(boundaries[0][i]    -    lB[0][i]))    {    	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  boundaries[0][i]  =  Math.abs(boundaries[i]);  [CE]  [FE]            AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[0][i]  =  Math.abs(boundaries[i]);  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[0][i]  =  Math.abs(boundaries[i]);	      boundaries[0][i]    =    Math.abs(lB[i]);    	non-compiled	[CE]  	10	None	replace
36	[BUG]  [BUGGY]  boundaries[1][i]  =  lB[i];  [CE]  [FE]          AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[1][i]  =  lB[i];  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[1][i]  =  lB[i];	      boundaries[0][i]    =    uB[i];    	non-compiled	[CE]  	5	None	replace
37	[BUG]  [BUGGY]  boundaries[i]  =  Math.abs(lB[i]  -  1);  [CE]  [FE]        AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  boundaries[i]  =  Math.abs(lB[i]  -  1);  [BUGGY]    if  (Double.isInfinite(boundaries[1][i]  -  boundaries[0][i]))  {  final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	boundaries[i]  =  Math.abs(lB[i]  -  1);	      boundaries[i]    =    Math.abs(lB[i]);    	non-compiled	[CE]  	12	None	replace
38	[BUG]  [BUGGY]  if  (Double.isInfinite(boundaries[0][i]  -  boundaries[1][i])||  Double.isNaN(boundaries[1][i]))  {  [CE]  [FE]        AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isInfinite(boundaries[0][i]  -  boundaries[1][i])||  Double.isNaN(boundaries[1][i]))  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if  (Double.isInfinite(boundaries[0][i]  -  boundaries[1][i])||  Double.isNaN(boundaries[1][i]))  {	  if    (Double.isInfinite(boundaries[0][i]    -    boundaries[1][i]))    {    	non-compiled	[CE]  	1	None	replace
39	[BUG]  [BUGGY]  if  (Double.isNaN(boundaries[0][i]  -  lB[0][i]))  {  [CE]  [FE]        AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isNaN(boundaries[0][i]  -  lB[0][i]))  {  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	if  (Double.isNaN(boundaries[0][i]  -  lB[0][i]))  {	  if    (Double.isInfinite(boundaries[0][i]    -    lB[0][i]))    {    	non-compiled	[CE]  	7	None	replace
40	[BUG]  [BUGGY]  double[][]  boundaries[0]  =  lB[i].doubleValue();  [CE]  [FE]            AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  double[][]  boundaries[0]  =  lB[i].doubleValue();  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	double[][]  boundaries[0]  =  lB[i].doubleValue();	      	non-compiled	[CE]  	3	None	replace
41	[BUG]  [BUGGY]  double[][]  boundaries[0]  =  lB[i].getUpperBound();  [CE]  [FE]              AssertionError    [CONTEXT]      throw  new  MathUnsupportedOperationException();  }  else  {  boundaries  =  new  double[2][];  boundaries[0]  =  lB;  boundaries[1]  =  uB;  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  double[][]  boundaries[0]  =  lB[i].getUpperBound();  [BUGGY]    final  double  max  =  Double.MAX_VALUE  +  boundaries[0][i];  final  NumberIsTooLargeException  e  =  new  NumberIsTooLargeException(boundaries[1][i],  max,  true);  e.getContext().addMessage(LocalizedFormats.OVERFLOW);  e.getContext().addMessage(LocalizedFormats.INDEX,  i);  throw  e;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  NumberIsTooLargeException  e  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	541	541	1	replace	double[][]  boundaries[0]  =  lB[i].getUpperBound();	      	non-compiled	[CE]  	3	None	replace
