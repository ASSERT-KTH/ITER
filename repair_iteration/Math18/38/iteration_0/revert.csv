projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390if(i>=checkFeasableCount||fitfun.isFeasible(arxk.getColumn(0))){
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390if(i>=checkFeasableCount&&fitfun.isFeasible(arxk.getColumn(0))){
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390if(i==checkFeasableCount&&fitfun.isFeasible(arxk.getColumn(0))){
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390if(i==checkFeasableCount){arxk=xmean.add(BD.multiply(arz.getColumnMatrix(k)).scalarMultiply(sigma));}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390if(i==checkFeasableCount){arxk=xmean.add(BD.multiply(arz.getColumnMatrix(k))).scalarMultiply(sigma));}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390if(i>0){arxk=xmean.add(BD.multiply(arz.getColumnMatrix(k)));}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390if(i>0){arxk=xmean.add(BD.multiply(arz.getRowMatrix(k)));}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390if(i>0){arz=xmean.add(BD.multiply(arz.getColumnMatrix(k)));}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390if(i>=0||fitfun.isFeasible(arxk.getColumn(0))){
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390Arxkarz=xmean.add(BD.multiply(arxk.getColumnMatrix(k)));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390Arxkarz=xmean.add(BD.multiply(arxk.getColumnMatrix(k)).scalarMultiply(sigma));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390Arxkarz=xmean.add(BD.multiply(arxk.getColumnMatrix(k))).scalarMultiply(sigma));
