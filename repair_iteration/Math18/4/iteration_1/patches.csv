bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  rackTrace( "   ").printStackTrace();  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  rackTrace( "   ").printStackTrace();  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	rackTrace( "   ").printStackTrace();	      if(negccov    >    0)    {    throw    new    IllegalArgumentException(   "   ").printStackTrace();    }    	non-compiled	[CE]  ';'  expected	12	None	replace
2	[BUG]  [BUGGY]  ((  RealMatrix)arzneg).add(negccov,  xold);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  ((  RealMatrix)arzneg).add(negccov,  xold);  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	((  RealMatrix)arzneg).add(negccov,  xold);	      ((    RealMatrix)arzneg).add(negccov);    	non-compiled	[CE]  ';'  expected	1	None	replace
3	[BUG]  [BUGGY]  RealMatrix  arzneg  =  divide(arzneg,  xold);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  RealMatrix  arzneg  =  divide(arzneg,  xold);  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	RealMatrix  arzneg  =  divide(arzneg,  xold);	      RealMatrix    arzneg    =    divide(arzneg,    idxInv);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  RealMatrix  arzneg  =  BD.multiply(diag(weights)).multiply(negccov);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  RealMatrix  arzneg  =  BD.multiply(diag(weights)).multiply(negccov);  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	RealMatrix  arzneg  =  BD.multiply(diag(weights)).multiply(negccov);	      RealMatrix    arzneg    =    BD.multiply(diag(weights)).multiply(roneu);    	non-compiled	[CE]  ';'  expected	8	None	replace
5	[BUG]  [BUGGY]  RealMatrix  arzneg  =  BD.multiply(diag(weights)).multiply(weights);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  RealMatrix  arzneg  =  BD.multiply(diag(weights)).multiply(weights);  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	RealMatrix  arzneg  =  BD.multiply(diag(weights)).multiply(weights);	      RealMatrix    arzneg    =    BD.multiply(diag(weights)).multiply(roneu);    	non-compiled	[CE]  ';'  expected	8	None	replace
6	[BUG]  [BUGGY]  allowMultiply(negccov)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  allowMultiply(negccov)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	allowMultiply(negccov)  {  throw  new  IllegalArgumentException( " ");  }	      if(negccov    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
7	[BUG]  [BUGGY]  allowMultiply(negcv)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  allowMultiply(negcv)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	allowMultiply(negcv)  {  throw  new  IllegalArgumentException( " ");  }	      if(negccov    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
8	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  [Delete]  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	[Delete]	      if(negccov    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  >>  [Delete]  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  >>  [Delete]  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	>>  [Delete]	      if(negccov    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
10	[BUG]  [BUGGY]  ((  RealMatrix)arzneg).add(negcv,  xold);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  ((  RealMatrix)arzneg).add(negcv,  xold);  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	((  RealMatrix)arzneg).add(negcv,  xold);	      ((    RealMatrix)arzneg).add(negcv);    	non-compiled	[CE]  ';'  expected	3	None	replace
11	[BUG]  [BUGGY]  RealMatrix  arzneg  =  divide(arzneg,  xold.multiply(arnormsInv));  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  RealMatrix  arzneg  =  divide(arzneg,  xold.multiply(arnormsInv));  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	RealMatrix  arzneg  =  divide(arzneg,  xold.multiply(arnormsInv));	      RealMatrix    arzneg    =    divide(arzneg,    idxInv);    	non-compiled	[CE]  ';'  expected	7	None	replace
12	[BUG]  [BUGGY]  MutableCase.isTrue(negccov  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  MutableCase.isTrue(negccov  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	MutableCase.isTrue(negccov  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(negccov    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
13	[BUG]  [BUGGY]  MutableMap.this.printStackTrace();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  MutableMap.this.printStackTrace();  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	MutableMap.this.printStackTrace();	      if(negccov    >    0)    {    throw    new    IllegalArgumentException(   "   ").printStackTrace();    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
14	[BUG]  [BUGGY]  MutableMap.this.add(negccov);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  MutableMap.this.add(negccov);  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	MutableMap.this.add(negccov);	      if(negccov    >    0)    {    throw    new    IllegalArgumentException(   "   ").printStackTrace();    }    	non-compiled	[CE]  ';'  expected	12	None	replace
15	[BUG]  [BUGGY]  negccov  -=  1;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  negccov  -=  1;  [BUGGY]    }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	negccov  -=  1;	  negccov    =    1;    	non-compiled	[CE]  ';'  expected	5	None	replace
16	[BUG]  [BUGGY]  RealMatrix  arzneg  =  BD.multiply(diag(weights)).multiply(oldFac);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  RealMatrix  arzneg  =  BD.multiply(diag(weights)).multiply(oldFac);  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	RealMatrix  arzneg  =  BD.multiply(diag(weights)).multiply(oldFac);	      RealMatrix    arzneg    =    BD.multiply(diag(weights)).multiply(roneu);    	non-compiled	[CE]  ';'  expected	8	None	replace
17	[BUG]  [BUGGY]  RealMatrix  arzneg  =  divide(arznegccov,  idxInv);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  RealMatrix  arzneg  =  divide(arznegccov,  idxInv);  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	RealMatrix  arzneg  =  divide(arznegccov,  idxInv);	      RealMatrix    arzneg    =    divide(arzneg,    idxInv);    	non-compiled	[CE]  ';'  expected	7	None	replace
18	[BUG]  [BUGGY]  ((  RealMatrix)arzneg).remove(0);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  ((  RealMatrix)arzneg).remove(0);  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	((  RealMatrix)arzneg).remove(0);	      ((    RealMatrix)arzneg).remove();    	non-compiled	[CE]  ';'  expected	2	None	replace
19	[BUG]  [BUGGY]  ((  RealMatrix)arzneg).add(negcv  -  1);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  ((  RealMatrix)arzneg).add(negcv  -  1);  [BUGGY]    negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	((  RealMatrix)arzneg).add(negcv  -  1);	      ((    RealMatrix)arzneg).add(negcv);    	non-compiled	[CE]  ';'  expected	3	None	replace
20	[BUG]  [BUGGY]  negccov  =  idxInv;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {    [BUGGY]  negccov  =  idxInv;  [BUGGY]    }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	negccov  =  idxInv;	  negccov    =    negccov;    	non-compiled	[CE]  ';'  expected	4	None	replace
