bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    ((  RealMatrix)arzneg).add(negccov);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {  [BUGGY]    ((  RealMatrix)arzneg).add(negccov);  [BUGGY]  negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	    ((  RealMatrix)arzneg).add(negccov);		non-compiled	[CE]  illegal  start  of  type	8	None	add
2	[BUG]  [BUGGY]    ((  RealMatrix)arzneg).remove();  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {  [BUGGY]    ((  RealMatrix)arzneg).remove();  [BUGGY]  negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	    ((  RealMatrix)arzneg).remove();		non-compiled	[CE]  illegal  start  of  type	8	None	add
3	[BUG]  [BUGGY]    ((  RealMatrix)arzneg).add(negcv);  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {  [BUGGY]    ((  RealMatrix)arzneg).add(negcv);  [BUGGY]  negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	    ((  RealMatrix)arzneg).add(negcv);		non-compiled	[CE]  illegal  start  of  type	8	None	add
4	[BUG]  [BUGGY]  negccov  =  negccov;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {  [BUGGY]  negccov  =  negccov;  [BUGGY]  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	negccov  =  negccov;	negccov  =  negcovMax;  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  negccov  =  1;  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {  [BUGGY]  negccov  =  1;  [BUGGY]  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	negccov  =  1;	negccov  =  negcovMax;  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  negccov  =  0;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {  [BUGGY]  negccov  =  0;  [BUGGY]  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	negccov  =  0;	negccov  =  negcovMax;  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]    RealMatrix  arzneg  =  divide(arzneg,  idxInv);  [CE]  ';'  expected  [FE]    AssertionError  [CONTEXT]  RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {  [BUGGY]    RealMatrix  arzneg  =  divide(arzneg,  idxInv);  [BUGGY]  negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	    RealMatrix  arzneg  =  divide(arzneg,  idxInv);		non-compiled	[CE]  ';'  expected	8	None	add
8	[BUG]  [BUGGY]    RealMatrix  arzneg  =  BD.multiply(diag(weights)).multiply(roneu);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {  [BUGGY]    RealMatrix  arzneg  =  BD.multiply(diag(weights)).multiply(roneu);  [BUGGY]  negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	    RealMatrix  arzneg  =  BD.multiply(diag(weights)).multiply(roneu);		non-compiled	[CE]  illegal  start  of  type	8	None	add
9	[BUG]  [BUGGY]    RealMatrix  arzneg  =  BD.multiply(diag(weights)).multiply(heights);  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {  [BUGGY]    RealMatrix  arzneg  =  BD.multiply(diag(weights)).multiply(heights);  [BUGGY]  negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	    RealMatrix  arzneg  =  BD.multiply(diag(weights)).multiply(heights);		non-compiled	[CE]  illegal  start  of  type	8	None	add
10	[BUG]  [BUGGY]    if(negccov  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {  [BUGGY]    if(negccov  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	    if(negccov  >  0)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  type	8	None	add
11	[BUG]  [BUGGY]    if(negccov  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {  [BUGGY]    if(negccov  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]  negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	    if(negccov  >  0)  {  throw  new  IllegalStateException( " ");  }		non-compiled	[CE]  ';'  expected	8	None	add
12	[BUG]  [BUGGY]    if(negccov  >  0)  {  throw  new  IllegalArgumentException( " ").printStackTrace();  }  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  RealMatrix  arnormsSorted  =  selectColumns(arnorms,  idxnorms);  int[]  idxReverse  =  reverse(idxnorms);  RealMatrix  arnormsReverse  =  selectColumns(arnorms,  idxReverse);  arnorms  =  divide(arnormsReverse,  arnormsSorted);  int[]  idxInv  =  inverse(idxnorms);  RealMatrix  arnormsInv  =  selectColumns(arnorms,  idxInv);  double  negcovMax  =  (1.  -  negminresidualvariance)  /  square(arnormsInv).multiply(weights).getEntry(0,  0);  if  (negccov  >  negcovMax)  {  [BUGGY]    if(negccov  >  0)  {  throw  new  IllegalArgumentException( " ").printStackTrace();  }  [BUGGY]  negccov  =  negcovMax;  }  arzneg  =  times(arzneg,  repmat(arnormsInv,  dimension,  1));  RealMatrix  artmp  =  BD.multiply(arzneg);  RealMatrix  Cneg  =  artmp.multiply(diag(weights)).multiply(  artmp.transpose());  oldFac  +=  negalphaold  *  negccov;  C  =  C.scalarMultiply(oldFac)  .add(roneu)  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  updateCovariance  [RETURN_TYPE]  void  boolean  hsig  RealMatrix  bestArx  RealMatrix  arz  final  int[]  arindex  RealMatrix  xold  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  Cneg  D  arnorms  arnormsInv  arnormsReverse  arnormsSorted  arpos  artmp  arx  arxk  arz  arzneg  bestArx  bestArz  diagC  diagD  insigma  pc  ps  roneu  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  max  mueff  negalphaold  negccov  negcovMax  negminresidualvariance  normps  oldFac  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int[]  arReverseIndex  arindex  idxInv  idxReverse  idxnorms  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.7071067811865475	751	751	1	replace	    if(negccov  >  0)  {  throw  new  IllegalArgumentException( " ").printStackTrace();  }		non-compiled	[CE]  illegal  start  of  type	8	None	add
