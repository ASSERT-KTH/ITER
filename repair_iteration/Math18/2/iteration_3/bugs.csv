bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sigma  =  sigma  *  Math.exp(0.2+cs/lambda);  [CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)  [FE]    AssertionError    [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  sigma  =  sigma  *  Math.exp(0.2+cs/lambda);  [BUGGY]      }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	sigma  =  sigma  *  Math.exp(0.2+cs/lambda);	  sigma    =    sigma    *    Math.exp(0.5+cs/lambda);    	non-compiled	[CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)	8	None	replace
2	[BUG]  [BUGGY]  bestFitness  =  bestArx.getValue()  +  1;  [CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)  [FE]              AssertionError      [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  bestFitness  =  bestArx.getValue()  +  1;  [BUGGY]      sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	bestFitness  =  bestArx.getValue()  +  1;	  bestFitness    =    bestArx.getValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)	2	None	replace
3	[BUG]  [BUGGY]  bestFitness  =  bestValue.doubleValue()  *  1;  [CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)  [FE]            AssertionError      [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  bestFitness  =  bestValue.doubleValue()  *  1;  [BUGGY]      sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	bestFitness  =  bestValue.doubleValue()  *  1;	  bestFitness    =    bestValue.doubleValue()    -    1;    	non-compiled	[CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)	13	None	replace
4	[BUG]  [BUGGY]  bestValue  =  bestArx.doubleValue();  [CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)  [FE]                AssertionError      [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  bestValue  =  bestArx.doubleValue();  [BUGGY]      }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	bestValue  =  bestArx.doubleValue();	  bestValue    =    bestValue.doubleValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)	10	None	replace
5	[BUG]  [BUGGY]  bestFitness  =  bestValue.computeValue(lambda);  [CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)  [FE]              AssertionError      [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  bestFitness  =  bestValue.computeValue(lambda);  [BUGGY]      sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	bestFitness  =  bestValue.computeValue(lambda);	  bestFitness    =    bestValue.computeValue();    	non-compiled	[CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)	12	None	replace
6	[BUG]  [BUGGY]  sigma  =  sigma  *  Math.exp(0.5+cs/lambda);  sigma  =  sigma  *  Math.exp(0.5+cs/lambda);  [CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)  [FE]    AssertionError    [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  sigma  =  sigma  *  Math.exp(0.5+cs/lambda);  sigma  =  sigma  *  Math.exp(0.5+cs/lambda);  [BUGGY]      }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	sigma    =    sigma    *    Math.exp(0.5+cs/lambda);    sigma  =  sigma  *  Math.exp(0.5+cs/lambda);	  	non-compiled	[CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)	7	None	add
7	[BUG]  [BUGGY]  sigma  =  sigma  *  Math.exp(0.5+cs/lambda);  sigma  =  sigma  *  Math.exp(0.5+cs/damps);  [CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)  [FE]      AssertionError    [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  sigma  =  sigma  *  Math.exp(0.5+cs/lambda);  sigma  =  sigma  *  Math.exp(0.5+cs/damps);  [BUGGY]      }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	sigma    =    sigma    *    Math.exp(0.5+cs/lambda);    sigma  =  sigma  *  Math.exp(0.5+cs/damps);	  	non-compiled	[CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)	7	None	add
8	[BUG]  [BUGGY]  sigma  =  sigma  *  Math.exp(0.5+cs/lambda);  sigma  =  sigma  *  Math.exp(0.5+cs/lambda));  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  sigma  =  sigma  *  Math.exp(0.5+cs/lambda);  sigma  =  sigma  *  Math.exp(0.5+cs/lambda));  [BUGGY]      }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	sigma    =    sigma    *    Math.exp(0.5+cs/lambda);    sigma  =  sigma  *  Math.exp(0.5+cs/lambda));	  	non-compiled	[CE]  ';'  expected	7	None	add
9	[BUG]  [BUGGY]  bestFitness  =  bestArx.getFitness();  [CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)  [FE]              AssertionError      [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  bestFitness  =  bestArx.getFitness();  [BUGGY]      sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	bestFitness  =  bestArx.getFitness();	  bestFitness    =    bestValue.getFitness();    	non-compiled	[CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)	9	None	replace
10	[BUG]  [BUGGY]  bestFitness  =  bestValue.evaluate(cs,  arindex/4);  [CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)  [FE]            AssertionError      [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  bestFitness  =  bestValue.evaluate(cs,  arindex/4);  [BUGGY]      sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	bestFitness  =  bestValue.evaluate(cs,  arindex/4);	  bestFitness    =    bestValue.evaluate(cs,lambda/4);    	non-compiled	[CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)	5	None	replace
11	[BUG]  [BUGGY]  bestValue  =  bestValue.evaluate(cs,lambda/4);  [CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)  [FE]                  AssertionError      [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  bestValue  =  bestValue.evaluate(cs,lambda/4);  [BUGGY]      }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	bestValue  =  bestValue.evaluate(cs,lambda/4);	  bestValue    =    bestValue.evaluate(cs,lambda);    	non-compiled	[CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)	11	None	replace
12	[BUG]  [BUGGY]  bestValue  =  bestValue.evaluate(cs,  arindex);  [CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)  [FE]                    AssertionError      [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  bestValue  =  bestValue.evaluate(cs,  arindex);  [BUGGY]      }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	bestValue  =  bestValue.evaluate(cs,  arindex);	  bestValue    =    bestValue.evaluate(cs,lambda);    	non-compiled	[CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)	11	None	replace
13	[BUG]  [BUGGY]  bestFitness  =  bestValue.doubleValue()  /  1;  [CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)  [FE]            AssertionError      [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  bestFitness  =  bestValue.doubleValue()  /  1;  [BUGGY]      sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	bestFitness  =  bestValue.doubleValue()  /  1;	  bestFitness    =    bestValue.doubleValue()    -    1;    	non-compiled	[CE]  no  suitable  constructor  found  for  CMAESOptimizer(int,int)	13	None	replace
14	[BUG]  [BUGGY]  bestFitness  =  bestValue.evaluate(cs,  arindex  +  1);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  bestFitness  =  bestValue.evaluate(cs,  arindex  +  1);  [BUGGY]      sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	bestFitness  =  bestValue.evaluate(cs,  arindex  +  1);	  bestFitness    =    bestValue.evaluate(cs,    arindex);    	non-compiled	[CE]  ']'  expected	6	None	replace
15	[BUG]  [BUGGY]  bestFitness  =  bestValue.evaluate(cs,  arx);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  bestFitness  =  bestValue.evaluate(cs,  arx);  [BUGGY]      sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	bestFitness  =  bestValue.evaluate(cs,  arx);	  bestFitness    =    bestValue.evaluate(cs,    arindex);    	non-compiled	[CE]  ']'  expected	6	None	replace
16	[BUG]  [BUGGY]  sigma  =  sigma  *  Math.exp(0.5+cs/lambda);  sigma  =  sigma  *  Math.exp(0.5+cs/lambda;  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {      [BUGGY]  sigma  =  sigma  *  Math.exp(0.5+cs/lambda);  sigma  =  sigma  *  Math.exp(0.5+cs/lambda;  [BUGGY]      }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	sigma    =    sigma    *    Math.exp(0.5+cs/lambda);    sigma  =  sigma  *  Math.exp(0.5+cs/lambda;	  	non-compiled	[CE]  ')'  expected	7	None	add
