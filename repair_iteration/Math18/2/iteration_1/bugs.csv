bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sigma  =  sigma  *  Math.exp(0.5+cs/damps);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  [BUGGY]  sigma  =  sigma  *  Math.exp(0.5+cs/damps);  [BUGGY]  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	sigma  =  sigma  *  Math.exp(0.5+cs/damps);	sigma  =  sigma  *  Math.exp(0.2+cs/damps);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  sigma  =  sigma  *  Math.exp(2.0+cs/damps);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  [BUGGY]  sigma  =  sigma  *  Math.exp(2.0+cs/damps);  [BUGGY]  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	sigma  =  sigma  *  Math.exp(2.0+cs/damps);	sigma  =  sigma  *  Math.exp(0.2+cs/damps);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  [BUGGY]    [BUGGY]  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	  	sigma  =  sigma  *  Math.exp(0.2+cs/damps);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]    bestFitness  =  bestValue.doubleValue();  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  [BUGGY]    bestFitness  =  bestValue.doubleValue();  [BUGGY]  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	    bestFitness  =  bestValue.doubleValue();		non-compiled	[CE]  illegal  start  of  expression	4	None	add
5	[BUG]  [BUGGY]    bestFitness  =  bestValue.getValue();  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  [BUGGY]    bestFitness  =  bestValue.getValue();  [BUGGY]  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	    bestFitness  =  bestValue.getValue();		non-compiled	[CE]  illegal  start  of  expression	4	None	add
6	[BUG]  [BUGGY]    sigma  =  bestValue  *  Math.exp(0.2+cs/damps);  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  [BUGGY]    sigma  =  bestValue  *  Math.exp(0.2+cs/damps);  [BUGGY]  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	    sigma  =  bestValue  *  Math.exp(0.2+cs/damps);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
7	[BUG]  [BUGGY]  sigma  =  sigma  *  Math.exp(1.0+cs/damps);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  [BUGGY]  sigma  =  sigma  *  Math.exp(1.0+cs/damps);  [BUGGY]  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	sigma  =  sigma  *  Math.exp(1.0+cs/damps);	sigma  =  sigma  *  Math.exp(0.2+cs/damps);  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]    sigma  =  bestValue  *  Math.exp(0.5+cs/damps);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  [BUGGY]    sigma  =  bestValue  *  Math.exp(0.5+cs/damps);  [BUGGY]  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	    sigma  =  bestValue  *  Math.exp(0.5+cs/damps);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
9	[BUG]  [BUGGY]    bestFitness  =  bestValue.evaluate(cs,lambda);  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  new  PointValuePair(bestArx.getColumn(0),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (lastResult  !=  null  &&  getConvergenceChecker().converged(iterations,  current,  lastResult))  {  break  generationLoop;  }  lastResult  =  current;  }  if  (bestValue  ==  fitness[arindex[(int)(0.1+lambda/4.)]])  {  [BUGGY]    bestFitness  =  bestValue.evaluate(cs,lambda);  [BUGGY]  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  if  (iterations  >  2  &&  Math.max(historyWorst,  bestFitness)  -  Math.min(historyBest,  bestFitness)  ==  0)  {  sigma  =  sigma  *  Math.exp(0.2+cs/damps);  }  push(fitnessHistory,bestFitness);  fitfun.setValueRange(worstFitness-bestFitness);  if  (generateStatistics)  {  statisticsSigmaHistory.add(sigma);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	1.0	482	482	1	replace	    bestFitness  =  bestValue.evaluate(cs,lambda);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
