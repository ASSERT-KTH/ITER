projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535double[][]lB=hasInfiniteBounds?Double.MAX_VALUE:Double.POSITIVE_INFINITY;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535double[][]lB=Double.MAX_VALUE;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535double[][]lB=hasInfiniteBounds;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535double[][]lB=hasInfiniteBounds?DEFAULT_STOPFITNESS:null;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535double[][]lB=hasInfiniteBounds?DEFAULT_STOPFITNESS:BD.values();
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246this(0);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246this(1);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246this(4);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246this(5);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535boundaries=newdouble[2][];
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535boundaries=newdouble[0][];
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535borders=newdouble[2][];
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535boundaries=newdouble[1][];
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536boundaries[0]=lB;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536boundaries[0]=lB.length;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536boundaries[0]=pcCol;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536boundaries[0]=uB;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247setStatistics(DEFAULT_STOPFITNESS);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247setStatistics(DEFAULT_ISACTIVECMA);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247setStatistics(DEFAULT_STOPFITNESS,DEFAULT_RANDOMGENERATOR);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247setStatistics(DEFAULT_ISACTIVECMA,DEFAULT_RANDOMGENERATOR);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247setStatistics(DEFAULT_ISACTIVECMA,false);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751BD=BD.multiply(arnormsInv,dimension,1);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751doublenegcovMax=Math.max(negccov-negminresidualvariance);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751doublenegcovMax=Math.max(negccov,negalphaold);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751negcovMax=Math.max(negccov);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751BD=BD.multiply(arnormsInv,dimension,2);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583lambda=4+(int)(3.*Math.log(dimension));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583lambda=4+(int)(3.*Math.log(guess));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583lambda=4*(2.5*Math.log(dimension));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583lambda=4+(int)(3).*Math.log(guess));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583lambda=4*(3.*Math.log(dimension));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476breakgenerationLoop;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476breakresult;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476breakresultLoop;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476breaksymbda;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253this(lambda,null,DEFAULT_MAXITERATIONS,DEFAULT_STOPFITNESS,DEFAULT_RANDOMGENERATOR,false);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253this(lambda,null,DEFAULT_MAXITERATIONS,DEFAULT_STOPFITNESS,DEFAULT_RANDOMGENERATOR,true);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253this(lambda,null,DEFAULT_MAXITERATIONS,DEFAULT_DEFAGONALONLY,DEFAULT_RANDOMGENERATOR,false);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253this(lambda,null,DEFAULT_MAXITERATIONS,DEFAULT_RANDOMGENERATOR,false);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253this(lambda,null,DEFAULT_MAXITERATIONS,DEFAULT_DEFAGONALONLY,DEFAULT_RANDOMGENERATOR,true);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536double[][]lB=Double.POSITIVE_INFINITY;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536double[][]lB=Double.MAX_VALUE;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536double[][]lB=hasInfiniteBounds;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536double[][]lB=hasInfiniteBounds?DEFAULT_STOPFITNESS:pcCol;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536double[][]lB=hasInfiniteBounds?DEFAULT_STOPFITNESS:uB;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.exp(0.2+cs/damps);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.exp(0.2+cs/damps+1);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.exp(0.5+cs/damps);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.exp(0.2+cs/damps,1);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253this(lambda,null,DEFAULT_MAXITERATIONS,DEFAULT_STOPFITNESS,DEFAULT_ISACTIVECMA,DEFAULT_DIAGONALONLY,DEFAULT_CHECKFEASABLECOUNT,DEFAULT_RANDOMGENERATOR,false);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253this(lambda,null,DEFAULT_MAXITERATIONS,DEFAULT_RANDOMGENERATOR,DEFAULT_ISACTIVECMA,DEFAULT_DIAGONALONLY,DEFAULT_CHECKFEASABLECOUNT,false);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253this(lambda,null,DEFAULT_MAXITERATIONS,DEFAULT_RANDOMGENERATOR,DEFAULT_STOPFITNESS,DEFAULT_DIAGONALONLY,DEFAULT_CHECKFEASABLECOUNT,false);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253this(lambda,null,DEFAULT_MAXITERATIONS,DEFAULT_RANDOMGENERATOR,DEFAULT_ISACTIVECMA,DEFAULT_DIAGONALONLY,DEFAULT_CHECKFEASABLECOUNT,
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253this(lambda,null,DEFAULT_MAXITERATIONS,DEFAULT_RANDOMGENERATOR,DEFAULT_ISACTIVECMA,DEFAULT_DIAGONALONLY,DEFAULT_CHECKFEASABLECOUNT,DEFAULT_
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459breakgenerationLoop;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459breakbestFitness;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459breaksigmaLoop;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459breakhistoryLoop;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583double[][]boundaries=Math.max(lambda,guess);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583double[][]boundaries=Math.exp(-lambda);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583double[][]boundaries=Math.max(lambda,false);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583double[][]boundaries=Math.max(lambda);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583double[][]boundaries=newdouble[guess.length][0];
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459doublediagD=Math.min(historyWorst,worstFitness)-Math.max(historyWorst,bestFitness)-stopTolFun);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459doublediagD=Math.min(historyWorst,bestFitness)-Math.max(historyWorst,worstFitness)-stopTolFun);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459doublediagD=Math.min(historyWorst,worstFitness)-Math.max(historyWorst,worstFitness)-stopTolFun);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246super();
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246this(DEFAULT_STOPFITNESS,DEFAULT_RANDOMGENERATOR);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246this(DEFAULT_STOPFITNESS);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246this(DEFAULT_ISACTIVECMA,DEFAULT_RANDOMGENERATOR);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246Preconditions.checkNotNull(DEFAULT_STOPFITNESS);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482if(bestFitness>bestArx.getColumnSize()){if(isActiveCMA){breakgenerationLoop;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482if(bestFitness>bestArx.getColumnCount()-1){if(isActiveCMA){breakgenerationLoop;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482if(bestFitness>bestArx.getColumnCount()-1){if(!isActiveCMA){breakgenerationLoop;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482if(bestFitness>bestArx){if(isActiveCMA){breakgenerationLoop;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482if(bestFitness>bestArx.getColumnSize()){if(isActiveCMA){generateStatistics;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751negccov=negcovMax;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751negccov=negcovMax-1;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751negccov-=negcovMax;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751negccov=0;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247this.statisticsMeanHistory=getStatisticsMean();
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476bestFitness=Math.max(bestArx.getColumn(1),isMinimize?bestFitness:-bestFitness);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476isRepairMode?bestArx.getLineno():bestArx.getCharno());
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476isRepairMode?bestArx.getLineno():bestArx.getColumnNumber(1);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476isRepairMode?bestArx.getLineno():bestArx.getColumnNode());
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476isRepairMode?bestArx.getLineno():bestArx.getColumnNode();
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246this(DEFAULT_ISACTIVECMA);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246this(DEFAULT_ISACTIVECMA,DEFAULT_DIAGONALONLY);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246this(DEFAULT_ISACTIVECMA,DEFAULT_FIELD_NAMES);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246this(DEFAULT_ISACTIVECMA,DEFAULT_FIELD_NAME);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535borders=newdouble[0][];
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247this(DEFAULT_ISACTIVECMA,DEFAULT_DIAGONALONLY);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247setFixedOptimizer(DEFAULT_ISACTIVECMA);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247setFixedOptimizer(newDoubleInputStreamReader());
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247this(DEFAULT_ISACTIVECMA);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583double[][]boundaries=Math.abs(lambda);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583double[][]boundaries=Math.exp(Math.abs(lambda));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583double[][]boundaries=Math.exp(getBounds());
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583double[][]boundaries=Math.max(lambda,0);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253this(lambda,null,DEFAULT_FIELD_NAMES,DEFAULT_COUNT,DEFAULT_ISACTIVECMA,DEFAULT_DIAGONALONLY,DEFAULT_CHECKFEASABLECOUNT,DEFAULT_RANDOMGENERATOR,false);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253this(lambda,null,DEFAULT_FIELD_NAMES,DEFAULT_COUNT,DEFAULT_ISACTIVECMA,DEFAULT_DIAGONALONLY,DEFAULT_CHECKFEASABLECOUNT,DEFAULT_RANDOMGENERATOR,
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253this(lambda,null,DEFAULT_FIELD_NAMES,DEFAULT_COUNT,DEFAULT_ISACTIVECMA,DEFAULT_DIAGONALONLY,DEFAULT_CHECKFEASABLECOUNT,DEFAULT_RANDOMGENERATOR
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535double[][]lB=getBinaryValues();
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535double[][]lB=getBounds();
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535double[][]lB=Double.valueOf(null);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535double[][]lB=getBinaryValue(null);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535double[][]lB=getBinaryValue(cs);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476breakpointValuePair;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476breakresultIndent;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751if(arnormsInv==null){BD=BD.multiply(arnormsInv,xold);BD=BD.multiply(arnormsInv,xold);}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751if(arnormsInv==null){BD=BD.multiply(arnormsInv);BD=BD.multiply(arnormsInv,negalphaold);}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751if(arnormsInv==null){BD=BD.multiply(arnormsInv);BD=BD.multiply(arnormsInv,xold);}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751if(arnormsSorted==null){BD=BD.multiply(arnormsInv);BD=BD.multiply(arnormsInv,negalphaold);}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751negcovMax=Math.max(negccov-bestArx,worstArx);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583lambda=256+(int)(3.*Math.log(lambda));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583lambda=256+(int)(.*Math.log(guess));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583lambda=0.5+(int)(.*Math.log(guess.length));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583lambda=256+(int)(3.*Math.log(guess));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253super();
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253super(lambda);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253Preconditions.checkArgument(lambda!=0);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253Preconditions.checkArgument(lambda>=0);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253Preconditions.checkArgument(lambda==0);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459if(historyWorst==null){breakgenerationLoop;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459if(historyWorst==0.0){breakgenerationLoop;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459if(historyWorst==0){breakgenerationLoop;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459if(historyWorst==0.5){breakgenerationLoop;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459for(inti=0;i<dimension;i++){if(historyWorst==historyWorst){continue;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459for(inti=0;i<dimension;i++){if(historyWorst==historyWorst){thrownewIllegalArgumentException("");}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459doublediagD=historyWorst.doubleValue();
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459doublediagD=getFieldType(historyWorst);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459if(historyWorst==null){if(historyWorst==historyWorst){continue;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536borders[0]=lB;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247setFieldOptimizer(DEFAULT_FIELD_NAMES);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247setFieldOptimizer(DEFAULT_FIELD_NAME);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751negccov=(negcovMax-negminresidualvariance));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751negccov=(negcovMax*negminresidualvariance)?negcovMax:negcovMax;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482if(generateStatistics){if(bestFitness>bestFitness){thrownewIllegalArgumentException("");}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482if(generateStatistics){if(bestFitness==null){thrownewIllegalArgumentException("");}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482int[]dups=getDimensions();
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482if(generateStatistics){if(bestFitness==null){return;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476bestArx=current.getArx();
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476current.addLast(FieldUtils.safeMultiply(current,bestArx));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476current.addLast(FieldUtils.safeMultiply(bestArx,current));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476current.addLast(FieldUtils.safeMultiply(current,bestArx),isMinimize);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476current.addLast(FieldUtils.safeMultiply(bestArx,bestFitness));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536for(inti=0;i<boundaries.length;i++){if(!hasInfiniteBounds){thrownewMathUnsupportedOperationException("");}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536for(inti=0;i<boundaries.length;i++){if(Double.isInfinite(boundaries[0][i])){thrownewMathUnsupportedOperationException("");}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536for(inti=0;i<boundaries.length;i++){if(Double.isInfinite(boundaries[0],uB)){thrownewMathUnsupportedOperationException("");}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536for(inti=0;i<boundaries.length;i++){if(Double.isInfinite(boundaries[0][i])){return;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536for(inti=0;i<boundaries.length;i++){if(Double.isInfinite(boundaries[0][i])){thrownewMathUnsupportedOperationException(")");}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.exp(1.0+cs/damps);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.exp(1.0+cs/dups);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.exp(1.0+cs/duplicate);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.exp(2.0+cs/dups);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253this(lambda,null,DEFAULT_MAXITERATIONS,DEFAULT_RANDOMGENERATOR,DEFAULT_STOPFITNESS,DEFAULT_ISACTIVECMA,DEFAULT_DIAGONALONLY,DEFAULT_CHECKFEASABLE
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253this(lambda,null,DEFAULT_MAXITERATIONS,DEFAULT_RANDOMGENERATOR,DEFAULT_STOPFITNESS,DEFAULT_ISACTIVECMA,DEFAULT_DIAGONALONLY,DEFAULT_CHECKFE
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.exp(0.2+cs/dups);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.exp(0.2+cs/da/4);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.exp(0.2+cs/da);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246this(DEFAULT_ISACTIVECMA,DEFAULT_LOAD_FACTOR);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459if(bestFitness<=Math.min(historyWorst,bestFitness)){breakgenerationLoop;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459if(bestFitness<=Math.min(historyWorst,bestFitness)){breakgenerationLoop;}else{thrownewIllegalArgumentException("");}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459if(bestFitness<=historyWorst){breakgenerationLoop;}else{thrownewIllegalArgumentException("");}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459if(bestFitness<=historyWorst){breakgenerationLoop;}else{thrownewIllegalStateException("");}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247setFixedOptimizer(getAutoRangeStickyZero());
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247returnnewCMAESOptimizer(this,false);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247returnnewCMAESOptimizer(this,true);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247returnnewCMAESOptimizer(this);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535double[][]boundaries=getBounds();
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535double[][]boundaries=Math.max(boundaries[0],uB);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535doublelB=Double.MAX_VALUE;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535double[][]lB=Double.valueOf(uB);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535double[][]boundaries=Math.max(boundaries[0],0);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583lambda=4+(int)(0.5*Math.log(guess));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583lambda=3+(int)(3.*Math.log(guess));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583lambda=4+(int)(2.5*Math.log(guess));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536doublelB=Double.MAX_VALUE;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536double[][]lB=Double.NaN;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536double[][]lB=Double.valueOf(isInfinite());
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536double[][]lB=Double.valueOf(uB);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751if(arnormsSorted==null){BD=BD.multiply(arnormsSorted);BD=BD.multiply(arnormsSorted);}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751if(arnormsSorted==null){BD=BD.multiply(arnormsSorted);BD=BD.multiply(arnormsSorted);}else{thrownewIllegalArgumentException("");}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751bestArx=BD.multiply(arnormsInv);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751if(arnormsSorted==null){BD=BD.multiply(arnormsSorted);BD=BD.multiply(arnormsSorted).multiply(arnormsInv);}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751if(arnormsSorted==null){BD=BD.multiply(arnormsSorted);BD=BD.multiply(arnormsSorted).multiply(arnormsSorted);}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476current.setOptionalArg(true);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476current.addLast(FieldUtils.safeMultiply(bestArx,fitness));
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java476current.addLast(FieldUtils.safeMultiply(bestArx,current),isMinimize);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246setFixedOptimizer(getAutoRangeStickyZero());
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java246this(DEFAULT_ISACTIVECMA,DEFAULT_LOAD_FACTOR,false);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247setFixedOptimizer(getCrc());
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java247setFixedOptimizer(getAutoRangeStandardOptimizer());
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java535boundaries=newdouble[3][];
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java536boundaries[0]=i;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459if(bestFitness>=historyBest){if(sigma*sqrtDiagC[i]==bestFitness){stopTolHistFun;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459if(bestFitness>=historyWorst){if(sigma*sqrtDiagC[i]==bestFitness]){stopTolHistFun;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459if(historyWorst==historyWorst){if(sigma*sqrtDiagC[i]==bestFitness){stopTolHistFun=Math.sqrt(historyWorst);}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459if(historyWorst==historyWorst){if(sigma*sqrtDiagC[i]==bestFitness){stopTolHistFun=Math.abs(historyWorst);}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java459if(bestFitness>=historyWorst){if(sigma*sqrtDiagC[i]==bestFitness){stopTolHistFun;}
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java253Preconditions.checkArgument(lambda<0);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583double[][]boundaries=Math.max(math.length,guess);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583double[][]boundaries=Math.max(boundaries[0],0);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583double[][]boundaries=Math.max(boundaries,guess);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583double[][]boundaries=Math.max(boundaries,guess.length);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java583double[][]boundaries=Math.max(math.length,0.5);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java751negccov=(negccov>0)?negcovMax:negminresidualvariance;
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.min(historyWorst,bestFitness)==0);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.min(historyWorst,worstFitness)==0);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.min(historyBest,bestFitness)==0);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.exp(1.0-bestValue);
projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java482sigma=sigma*Math.min(historyWorst,bestFitness);
