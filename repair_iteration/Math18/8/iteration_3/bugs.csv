bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  generationLoop  =  Math.max(historyWorst,  bestFitness);  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  generationLoop  =  Math.max(historyWorst,  bestFitness);  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	generationLoop  =  Math.max(historyWorst,  bestFitness);	  generationLoop    =    Math.min(historyWorst,    historyBest);    	non-compiled	[CE]  	23	None	replace
2	[BUG]  [BUGGY]  generationLoop  =  Math.max(historyWorst,  historyBest);  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  generationLoop  =  Math.max(historyWorst,  historyBest);  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	generationLoop  =  Math.max(historyWorst,  historyBest);	  generationLoop    =    Math.min(historyWorst,    historyBest);    	non-compiled	[CE]  	23	None	replace
3	[BUG]  [BUGGY]  break  generationLoop  +  1e7);  [CE]  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  break  generationLoop  +  1e7);  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	break  generationLoop  +  1e7);	  break    generationLoop    +    1e3;    	non-compiled	[CE]  	16	None	replace
4	[BUG]  [BUGGY]  gedToNull(historyWorst,  worstFitness)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  gedToNull(historyWorst,  worstFitness)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	gedToNull(historyWorst,  worstFitness)  {  throw  new  IllegalArgumentException( " ");  }	  gedToNull(historyWorst,    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
5	[BUG]  [BUGGY]  fortunately(historyWorst  <  stopTolHistFun)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  fortunately(historyWorst  <  stopTolHistFun)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	fortunately(historyWorst  <  stopTolHistFun)  {  throw  new  IllegalArgumentException( " ");  }	  fortunately(historyWorst    <    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
6	[BUG]  [BUGGY]  historyWorst  =  Math.max(historyWorst,  historyBest);  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  historyWorst  =  Math.max(historyWorst,  historyBest);  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	historyWorst  =  Math.max(historyWorst,  historyBest);	  historyWorst    =    Math.min(historyWorst,    historyBest);    	non-compiled	[CE]  	30	None	replace
7	[BUG]  [BUGGY]  historyWorst  =  Math.min(historyWorst,  historyBest.length);  [CE]  [FE]                  AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  historyWorst  =  Math.min(historyWorst,  historyBest.length);  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	historyWorst  =  Math.min(historyWorst,  historyBest.length);	  historyWorst    =    Math.min(historyWorst,    historyBest);    	non-compiled	[CE]  	30	None	replace
8	[BUG]  [BUGGY]  Since(historyWorst  >=  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  Since(historyWorst  >=  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	Since(historyWorst  >=  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }	  Since(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "The    fitnessHistory    must    be    in    the    range    [   "    +    historyWorst    +   "]   ");    }    	non-compiled	[CE]  	1	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  historyWorst;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }  [CE]  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  for(int  i  =  0;  i  <  historyWorst;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	for(int  i  =  0;  i  <  historyWorst;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }	  for(int    i    =    0;    i    <    dimension;    i++)    {    if(sigma*sqrtDiagC[i]    >=    stopTolUpX)    {    break    generationLoop;    }    	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  historyWorst;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  For(int  i  =  0;  i  <  historyWorst;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	For(int  i  =  0;  i  <  historyWorst;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }	  for(int    i    =    0;    i    <    dimension;    i++)    {    if(sigma*sqrtDiagC[i]    >=    stopTolUpX)    {    break    generationLoop;    }    	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  historyWorst;  i++)  {  if(sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  [CE]  [FE]                  AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  For(int  i  =  0;  i  <  historyWorst;  i++)  {  if(sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	For(int  i  =  0;  i  <  historyWorst;  i++)  {  if(sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }	  For(int    i    =    0;    i    <    dimension;    i++)    {    if(sigma*sqrtDiagC[i]    ==    stopTolUpX)    {    break    generationLoop;    }    	non-compiled	[CE]  	13	None	replace
12	[BUG]  [BUGGY]  luate(historyWorst,  true))  {  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  luate(historyWorst,  true))  {  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	luate(historyWorst,  true))  {  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }	  luate(historyWorst,    false))    {    for(int    i    =    0;    i    <    dimension;    i++)    {    if(sigma*sqrtDiagC[i]    >=    stopTolUpX)    {    break    generationLoop;    }    	non-compiled	[CE]  	24	None	replace
13	[BUG]  [BUGGY]  luate(historyWorst,  true))  {  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  luate(historyWorst,  true))  {  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	luate(historyWorst,  true))  {  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }	  luate(historyWorst,    false))    {    for(int    i    =    0;    i    <    dimension;    i++)    {    if(sigma*sqrtDiagC[i]    >=    stopTolUpX)    {    break    generationLoop;    }    	non-compiled	[CE]  	24	None	replace
14	[BUG]  [BUGGY]  fortunately(historyWorst  <  stopTolHistFun)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  fortunately(historyWorst  <  stopTolHistFun)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	fortunately(historyWorst  <  stopTolHistFun)  {  throw  new  IllegalStateException( " ");  }	  fortunately(historyWorst    <    bestFitness)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
15	[BUG]  [BUGGY]  generationLoop  =  Math.max(historyWorst,  worstFitness)-  Math.min(historyBest,  historyWorst);  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  generationLoop  =  Math.max(historyWorst,  worstFitness)-  Math.min(historyBest,  historyWorst);  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	generationLoop  =  Math.max(historyWorst,  worstFitness)-  Math.min(historyBest,  historyWorst);	  generationLoop    =    Math.min(historyWorst,    historyWorst)-    Math.min(historyBest,    historyWorst);    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  generationLoop  =  Math.max(historyWorst,  bestFitness)-  Math.min(historyBest,  historyWorst);  [CE]  [FE]                  AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  generationLoop  =  Math.max(historyWorst,  bestFitness)-  Math.min(historyBest,  historyWorst);  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	generationLoop  =  Math.max(historyWorst,  bestFitness)-  Math.min(historyBest,  historyWorst);	  generationLoop    =    Math.min(historyWorst,    historyWorst)-    Math.min(historyBest,    historyWorst);    	non-compiled	[CE]  	4	None	replace
17	[BUG]  [BUGGY]  Since(historyWorst  <  0)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  Since(historyWorst  <  0)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	Since(historyWorst  <  0)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }	  Since(historyWorst    <    bestFitness)    {    throw    new    IllegalArgumentException(   "The    fitnessHistory    must    be    in    the    range    [   "    +    historyWorst    +   "]   ");    }    	non-compiled	[CE]  	2	None	replace
18	[BUG]  [BUGGY]  fortunately(historyWorst  <  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  fortunately(historyWorst  <  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	fortunately(historyWorst  <  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }	  fortunately(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "The    fitnessHistory    must    be    in    the    range    [   "    +    historyWorst    +   "]   ");    }    	non-compiled	[CE]  	35	None	replace
19	[BUG]  [BUGGY]  safeThan  <  =(historyWorst  >=  bestFitness)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  safeThan  <  =(historyWorst  >=  bestFitness)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	safeThan  <  =(historyWorst  >=  bestFitness)  {  throw  new  IllegalStateException( " ");  }	  safeThan    <    =(historyWorst    >    bestFitness)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  historyWorst;  i++)  {  if(sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  for(int  i  =  0;  i  <  historyWorst;  i++)  {  if(sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	for(int  i  =  0;  i  <  historyWorst;  i++)  {  if(sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }	  for(int    i    =    0;    i    <    dimension;    i++)    {    if(sigma*sqrtDiagC[i]    ==    stopTolUpX)    {    break    generationLoop;    }    	non-compiled	[CE]  	12	None	replace
21	[BUG]  [BUGGY]  luate(historyWorst,  bestFitness)  {  break  generationLoop;  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  luate(historyWorst,  bestFitness)  {  break  generationLoop;  }  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	luate(historyWorst,  bestFitness)  {  break  generationLoop;  }	  if(historyWorst    >    bestFitness)    {    break    generationLoop;    }    	non-compiled	[CE]  	29	None	replace
22	[BUG]  [BUGGY]  luate(historyWorst,  bestFitness))  {  break  generationLoop;  }  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  luate(historyWorst,  bestFitness))  {  break  generationLoop;  }  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	luate(historyWorst,  bestFitness))  {  break  generationLoop;  }	  if(historyWorst    >    bestFitness)    {    break    generationLoop;    }    	non-compiled	[CE]  	29	None	replace
23	[BUG]  [BUGGY]  gedToNull()  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  gedToNull()  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	gedToNull()  {  throw  new  IllegalStateException( " ");  }	  gedToNull(historyWorst)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
24	[BUG]  [BUGGY]  gedToNull()  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  gedToNull()  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	gedToNull()  {  throw  new  IllegalArgumentException( " ");  }	  gedToNull(historyWorst)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  luate(historyWorst)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "], ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  luate(historyWorst)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "], ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	luate(historyWorst)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "], ");  }	  luate(historyWorst)    {    throw    new    IllegalArgumentException(   "The    fitnessHistory    must    be    in    the    range    [   "    +    historyWorst    +   "]   ");    }    	non-compiled	[CE]  	18	None	replace
26	[BUG]  [BUGGY]  gedToNull(historyWorst,  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  gedToNull(historyWorst,  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	gedToNull(historyWorst,  null)  {  throw  new  IllegalStateException( " ");  }	  gedToNull(historyWorst,    bestFitness)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
27	[BUG]  [BUGGY]  luate(historyWorst)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + ", ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  luate(historyWorst)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + ", ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	luate(historyWorst)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + ", ");  }	  luate(historyWorst)    {    throw    new    IllegalArgumentException(   "The    fitnessHistory    must    be    in    the    range    [   "    +    historyWorst    +   "]   ");    }    	non-compiled	[CE]  	18	None	replace
28	[BUG]  [BUGGY]  aughtExceptionHandler.handleInternal();  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  aughtExceptionHandler.handleInternal();  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	aughtExceptionHandler.handleInternal();	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  	14	None	replace
29	[BUG]  [BUGGY]  gedToNull(historyBest)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  gedToNull(historyBest)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	gedToNull(historyBest)  {  throw  new  IllegalStateException( " ");  }	  gedToNull(historyWorst)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	10	None	replace
30	[BUG]  [BUGGY]  safeFitness(historyBest)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  safeFitness(historyBest)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	safeFitness(historyBest)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }	  safeFitness(historyWorst)    {    throw    new    IllegalArgumentException(   "The    fitnessHistory    must    be    in    the    range    [   "    +    historyWorst    +   "]   ");    }    	non-compiled	[CE]  	17	None	replace
31	[BUG]  [BUGGY]  luate(historyWorst,  true))  {  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  ==  stopTolUpX)  {  break  generationLoop;  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  luate(historyWorst,  true))  {  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  ==  stopTolUpX)  {  break  generationLoop;  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	luate(historyWorst,  true))  {  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  ==  stopTolUpX)  {  break  generationLoop;  }	  luate(historyWorst,    false))    {    for(int    i    =    0;    i    <    dimension;    i++)    {    if(sigma*sqrtDiagC[i]    >=    stopTolUpX)    {    break    generationLoop;    }    	non-compiled	[CE]  	24	None	replace
32	[BUG]  [BUGGY]  gedToNull(historyBest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  gedToNull(historyBest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	gedToNull(historyBest)  {  throw  new  IllegalArgumentException( " ");  }	  gedToNull(historyWorst)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  historyWorst  =  Math.min(historyBest,  worstFitness);  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  historyWorst  =  Math.min(historyBest,  worstFitness);  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	historyWorst  =  Math.min(historyBest,  worstFitness);	  historyWorst    =    Math.min(historyWorst,    historyBest);    	non-compiled	[CE]  	30	None	replace
34	[BUG]  [BUGGY]  generationLoop  =  Math.min(historyWorst,  worstFitness)-  Math.min(historyBest,  historyWorst);  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  generationLoop  =  Math.min(historyWorst,  worstFitness)-  Math.min(historyBest,  historyWorst);  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	generationLoop  =  Math.min(historyWorst,  worstFitness)-  Math.min(historyBest,  historyWorst);	  generationLoop    =    Math.min(historyWorst,    historyWorst)-    Math.min(historyBest,    historyWorst);    	non-compiled	[CE]  	4	None	replace
35	[BUG]  [BUGGY]  generationLoop  =  Math.min(historyWorst,  bestFitness)-  Math.min(historyBest,  historyWorst);  [CE]  [FE]                  AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  generationLoop  =  Math.min(historyWorst,  bestFitness)-  Math.min(historyBest,  historyWorst);  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	generationLoop  =  Math.min(historyWorst,  bestFitness)-  Math.min(historyBest,  historyWorst);	  generationLoop    =    Math.min(historyWorst,    historyWorst)-    Math.min(historyBest,    historyWorst);    	non-compiled	[CE]  	4	None	replace
36	[BUG]  [BUGGY]  generationLoop  =  Math.min(historyWorst,  bestFitness);  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  generationLoop  =  Math.min(historyWorst,  bestFitness);  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	generationLoop  =  Math.min(historyWorst,  bestFitness);	  generationLoop    =    Math.min(historyWorst,    historyBest);    	non-compiled	[CE]  	23	None	replace
37	[BUG]  [BUGGY]  Since(historyWorst  ==  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  Since(historyWorst  ==  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	Since(historyWorst  ==  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }	  Since(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "The    fitnessHistory    must    be    in    the    range    [   "    +    historyWorst    +   "]   ");    }    	non-compiled	[CE]  	1	None	replace
38	[BUG]  [BUGGY]  break  generationLoop  +  2;  [CE]  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  break  generationLoop  +  2;  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	break  generationLoop  +  2;	  break    generationLoop    +    1;    	non-compiled	[CE]  	36	None	replace
39	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIAE( " ",  historyWorst);  [CE]  [FE]                  AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  aughtExceptionHandler.throwAsIAE( " ",  historyWorst);  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	aughtExceptionHandler.throwAsIAE( " ",  historyWorst);	  aughtExceptionHandler.throwAsIAE(   "   ");    	non-compiled	[CE]  	32	None	replace
40	[BUG]  [BUGGY]  safe(historyWorst)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  safe(historyWorst)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	safe(historyWorst)  {  throw  new  IllegalArgumentException( " ");  }	  fortunately(historyWorst    <    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
41	[BUG]  [BUGGY]  gedToNull(historyWorst,  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  gedToNull(historyWorst,  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	gedToNull(historyWorst,  null)  {  throw  new  IllegalArgumentException( " ");  }	  gedToNull(historyWorst,    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
42	[BUG]  [BUGGY]  safeThan  =(historyWorst  >=  bestFitness)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  safeThan  =(historyWorst  >=  bestFitness)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	safeThan  =(historyWorst  >=  bestFitness)  {  throw  new  IllegalStateException( " ");  }	  safeThan    <    =(historyWorst    >    bestFitness)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
43	[BUG]  [BUGGY]  luate(historyWorst,  true)  {  break  generationLoop;  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  luate(historyWorst,  true)  {  break  generationLoop;  }  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	luate(historyWorst,  true)  {  break  generationLoop;  }	  if(historyWorst    >    bestFitness)    {    break    generationLoop;    }    	non-compiled	[CE]  	29	None	replace
44	[BUG]  [BUGGY]  luate(historyWorst,  null)  {  break  generationLoop;  }  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  luate(historyWorst,  null)  {  break  generationLoop;  }  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	luate(historyWorst,  null)  {  break  generationLoop;  }	  if(historyWorst    >    bestFitness)    {    break    generationLoop;    }    	non-compiled	[CE]  	29	None	replace
45	[BUG]  [BUGGY]  fortunately(historyWorst  >=  bestFitness)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  fortunately(historyWorst  >=  bestFitness)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	fortunately(historyWorst  >=  bestFitness)  {  throw  new  IllegalArgumentException( " ");  }	  fortunately(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
46	[BUG]  [BUGGY]  fortunately(historyWorst  >=  bestFitness)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  fortunately(historyWorst  >=  bestFitness)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	fortunately(historyWorst  >=  bestFitness)  {  throw  new  IllegalStateException( " ");  }	  fortunately(historyWorst    >    bestFitness)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	26	None	replace
47	[BUG]  [BUGGY]  safe(historyWorst)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  safe(historyWorst)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	safe(historyWorst)  {  throw  new  IllegalStateException( " ");  }	  fortunately(historyWorst    <    bestFitness)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
48	[BUG]  [BUGGY]  fortunately(historyWorst  <  historyBest)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  fortunately(historyWorst  <  historyBest)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	fortunately(historyWorst  <  historyBest)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }	  fortunately(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "The    fitnessHistory    must    be    in    the    range    [   "    +    historyWorst    +   "]   ");    }    	non-compiled	[CE]  	35	None	replace
49	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIAE( "Worst  failed. ");  [CE]  [FE]                  AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  aughtExceptionHandler.throwAsIAE( "Worst  failed. ");  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	aughtExceptionHandler.throwAsIAE( "Worst  failed. ");	  aughtExceptionHandler.throwAsIAE(   "   ");    	non-compiled	[CE]  	32	None	replace
50	[BUG]  [BUGGY]  if(historyWorst  >=  bestFitness)  {  break  generationLoop;  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  if(historyWorst  >=  bestFitness)  {  break  generationLoop;  }  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	if(historyWorst  >=  bestFitness)  {  break  generationLoop;  }	  if(historyWorst    >    bestFitness)    {    break    generationLoop;    }    	non-compiled	[CE]  	29	None	replace
51	[BUG]  [BUGGY]  if(historyWorst  ==  bestFitness)  {  break  generationLoop;  }  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  if(historyWorst  ==  bestFitness)  {  break  generationLoop;  }  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	if(historyWorst  ==  bestFitness)  {  break  generationLoop;  }	  if(historyWorst    >    bestFitness)    {    break    generationLoop;    }    	non-compiled	[CE]  	29	None	replace
52	[BUG]  [BUGGY]  While(historyWorst  <  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  While(historyWorst  <  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [BUGGY]      break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	While(historyWorst  <  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }	  Since(historyWorst    <    bestFitness)    {    throw    new    IllegalArgumentException(   "The    fitnessHistory    must    be    in    the    range    [   "    +    historyWorst    +   "]   ");    }    	non-compiled	[CE]  	2	None	replace
53	[BUG]  [BUGGY]  historyWorst  =  Math.min(historyBest,  historyWorst);  [CE]  [FE]                AssertionError      [CONTEXT]      }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {      [BUGGY]  historyWorst  =  Math.min(historyBest,  historyWorst);  [BUGGY]      }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	historyWorst  =  Math.min(historyBest,  historyWorst);	  historyWorst    =    Math.min(historyWorst,    historyBest);    	non-compiled	[CE]  	30	None	replace
