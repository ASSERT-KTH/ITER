bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Since(historyWorst  >  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  Since(historyWorst  >  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	Since(historyWorst  >  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "The    fitnessHistory    must    be    in    the    range    [   "    +    historyWorst    +   "]   ");    }    	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  Since(historyWorst  <  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  Since(historyWorst  <  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	Since(historyWorst  <  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "The    fitnessHistory    must    be    in    the    range    [   "    +    historyWorst    +   "]   ");    }    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  generationLoop  =  Math.min(historyWorst,  historyWorst);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  generationLoop  =  Math.min(historyWorst,  historyWorst);  [BUGGY]    }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	generationLoop  =  Math.min(historyWorst,  historyWorst);	      	non-compiled	[CE]  ')'  expected	2	None	replace
4	[BUG]  [BUGGY]  generationLoop  =  Math.min(historyWorst,  historyWorst)-  Math.min(historyBest,  historyWorst);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  generationLoop  =  Math.min(historyWorst,  historyWorst)-  Math.min(historyBest,  historyWorst);  [BUGGY]    }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	generationLoop  =  Math.min(historyWorst,  historyWorst)-  Math.min(historyBest,  historyWorst);	      	non-compiled	[CE]  ')'  expected	2	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }	      if(historyWorst    >    bestFitness)    {    for(int    i    =    0;    i    <    dimension;    i++)    {    if(sigma*sqrtDiagC[i]    >=    stopTolUpX)    {    break    generationLoop;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
6	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  For(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	For(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }	      if(historyWorst    >    bestFitness)    {    for(int    i    =    0;    i    <    dimension;    i++)    {    if(sigma*sqrtDiagC[i]    >=    stopTolUpX)    {    break    generationLoop;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
7	[BUG]  [BUGGY]  gedToNull(historyWorst)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  gedToNull(historyWorst)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	gedToNull(historyWorst)  {  throw  new  IllegalArgumentException( " ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
8	[BUG]  [BUGGY]  gedToNull(historyWorst,  bestFitness)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  gedToNull(historyWorst,  bestFitness)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	gedToNull(historyWorst,  bestFitness)  {  throw  new  IllegalArgumentException( " ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
9	[BUG]  [BUGGY]  break  generationLoop  +  1e0;  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  break  generationLoop  +  1e0;  [BUGGY]    }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	break  generationLoop  +  1e0;	  break    generationLoop    +    1e7;    	non-compiled	[CE]  ')'  expected	1	None	replace
10	[BUG]  [BUGGY]  gedToNull(historyWorst)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  gedToNull(historyWorst)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	gedToNull(historyWorst)  {  throw  new  IllegalStateException( " ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  gedToNull(historyWorst,  bestFitness)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  gedToNull(historyWorst,  bestFitness)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	gedToNull(historyWorst,  bestFitness)  {  throw  new  IllegalStateException( " ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  ==  stopTolUpX)  {  break  generationLoop;  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  ==  stopTolUpX)  {  break  generationLoop;  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  ==  stopTolUpX)  {  break  generationLoop;  }	      if(historyWorst    >    bestFitness)    {    for(int    i    =    0;    i    <    dimension;    i++)    {    if(sigma*sqrtDiagC[i]    ==    stopTolUpX)    {    break    generationLoop;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
13	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  ==  stopTolUpX)  {  break  generationLoop;  }  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  For(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  ==  stopTolUpX)  {  break  generationLoop;  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	For(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  ==  stopTolUpX)  {  break  generationLoop;  }	      if(historyWorst    >    bestFitness)    {    for(int    i    =    0;    i    <    dimension;    i++)    {    if(sigma*sqrtDiagC[i]    ==    stopTolUpX)    {    break    generationLoop;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
14	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	aughtExceptionHandler.throwInternal();	      if(historyWorst    >=    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	8	None	replace
15	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSuccess( " ");  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  aughtExceptionHandler.throwAsSuccess( " ");  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	aughtExceptionHandler.throwAsSuccess( " ");	      if(historyWorst    >=    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	8	None	replace
16	[BUG]  [BUGGY]  break  generationLoop  +  1e3;  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  break  generationLoop  +  1e3;  [BUGGY]    }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	break  generationLoop  +  1e3;	  break    generationLoop    +    1e7;    	non-compiled	[CE]  ')'  expected	1	None	replace
17	[BUG]  [BUGGY]  safeFitness(historyWorst)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  safeFitness(historyWorst)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	safeFitness(historyWorst)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "The    fitnessHistory    must    be    in    the    range    [   "    +    historyWorst    +   "]   ");    }    	non-compiled	[CE]  	9	None	replace
18	[BUG]  [BUGGY]  luate(historyWorst)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  luate(historyWorst)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	luate(historyWorst)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "The    fitnessHistory    must    be    in    the    range    [   "    +    historyWorst    +   "]   ");    }    	non-compiled	[CE]  	9	None	replace
19	[BUG]  [BUGGY]  safeFitness(historyWorst)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  safeFitness(historyWorst)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	safeFitness(historyWorst)  {  throw  new  IllegalStateException( " ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
20	[BUG]  [BUGGY]  safeThan  <  =(historyWorst  >  bestFitness)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  safeThan  <  =(historyWorst  >  bestFitness)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	safeThan  <  =(historyWorst  >  bestFitness)  {  throw  new  IllegalStateException( " ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  safeFitness(historyWorst)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  safeFitness(historyWorst)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	safeFitness(historyWorst)  {  throw  new  IllegalArgumentException( " ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
22	[BUG]  [BUGGY]  safeFitness(historyWorst)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]          AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  safeFitness(historyWorst)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	safeFitness(historyWorst)  {  throw  new  IllegalArgumentException( " ".);  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
23	[BUG]  [BUGGY]  generationLoop  =  Math.min(historyWorst,  historyBest);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  generationLoop  =  Math.min(historyWorst,  historyBest);  [BUGGY]    }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	generationLoop  =  Math.min(historyWorst,  historyBest);	      	non-compiled	[CE]  ')'  expected	2	None	replace
24	[BUG]  [BUGGY]  luate(historyWorst,  false))  {  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  luate(historyWorst,  false))  {  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	luate(historyWorst,  false))  {  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }	      if(historyWorst    >    bestFitness)    {    for(int    i    =    0;    i    <    dimension;    i++)    {    if(sigma*sqrtDiagC[i]    >=    stopTolUpX)    {    break    generationLoop;    }    }    	non-compiled	[CE]  ')'  expected	4	None	replace
25	[BUG]  [BUGGY]  safeFitness(historyBest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  safeFitness(historyBest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	safeFitness(historyBest)  {  throw  new  IllegalArgumentException( " ");  }	      if(historyWorst    >=    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  fortunately(historyWorst  >  bestFitness)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  fortunately(historyWorst  >  bestFitness)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	fortunately(historyWorst  >  bestFitness)  {  throw  new  IllegalStateException( " ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
27	[BUG]  [BUGGY]  fortunately(historyWorst  <  bestFitness)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  fortunately(historyWorst  <  bestFitness)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	fortunately(historyWorst  <  bestFitness)  {  throw  new  IllegalStateException( " ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	for(int  i  =  0;  i  <  dimension;  i++)  {  if(sigma*sqrtDiagC[i]  >=  stopTolUpX)  {  break  generationLoop;  }  }	      if(historyWorst    >    bestFitness)    {    for(int    i    =    0;    i    <    dimension;    i++)    {    if(sigma*sqrtDiagC[i]    >=    stopTolUpX)    {    break    generationLoop;    }    }    	non-compiled	[CE]  ')'  expected	4	None	replace
29	[BUG]  [BUGGY]  if(historyWorst  >  bestFitness)  {  break  generationLoop;  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  if(historyWorst  >  bestFitness)  {  break  generationLoop;  }  [BUGGY]    }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	if(historyWorst  >  bestFitness)  {  break  generationLoop;  }	      	non-compiled	[CE]  ')'  expected	2	None	replace
30	[BUG]  [BUGGY]  historyWorst  =  Math.min(historyWorst,  historyBest);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  historyWorst  =  Math.min(historyWorst,  historyBest);  [BUGGY]    }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	historyWorst  =  Math.min(historyWorst,  historyBest);	      	non-compiled	[CE]  ')'  expected	2	None	replace
31	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	      if(historyWorst    >=    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	8	None	replace
32	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIAE( " ");  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  aughtExceptionHandler.throwAsIAE( " ");  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	aughtExceptionHandler.throwAsIAE( " ");	      if(historyWorst    >=    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	8	None	replace
33	[BUG]  [BUGGY]  fortunately(historyWorst  >  bestFitness)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  fortunately(historyWorst  >  bestFitness)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	fortunately(historyWorst  >  bestFitness)  {  throw  new  IllegalArgumentException( " ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  fortunately(historyWorst  <  bestFitness)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  fortunately(historyWorst  <  bestFitness)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	fortunately(historyWorst  <  bestFitness)  {  throw  new  IllegalArgumentException( " ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
35	[BUG]  [BUGGY]  fortunately(historyWorst  >  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  fortunately(historyWorst  >  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }  [BUGGY]    break  generationLoop;  }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	fortunately(historyWorst  >  bestFitness)  {  throw  new  IllegalArgumentException( "The  fitnessHistory  must  be  in  the  range  [ "  +  historyWorst  + "] ");  }	      if(historyWorst    >    bestFitness)    {    throw    new    IllegalArgumentException(   "The    fitnessHistory    must    be    in    the    range    [   "    +    historyWorst    +   "]   ");    }    	non-compiled	[CE]  	9	None	replace
36	[BUG]  [BUGGY]  break  generationLoop  +  1;  [CE]  [FE]        AssertionError    [CONTEXT]    }  for  (int  i  =  0;  i  <  dimension;  i++)  {  if  (sigma*sqrtDiagC[i]  >  stopTolUpX)  {  break  generationLoop;  }  }  double  historyBest  =  min(fitnessHistory);  double  historyWorst  =  max(fitnessHistory);  if  (iterations  >  2  &&  Math.max(historyWorst,  worstFitness)  -  Math.min(historyBest,  bestFitness)  <  stopTolFun)  {    [BUGGY]  break  generationLoop  +  1;  [BUGGY]    }  if  (iterations  >  fitnessHistory.length  &&  historyWorst-historyBest  <  stopTolHistFun)  {  break  generationLoop;  }  if  (max(diagD)/min(diagD)  >  1e7)  {  break  generationLoop;  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math18/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.5773502691896258	459	459	1	replace	break  generationLoop  +  1;	  break    generationLoop    +    1e7;    	non-compiled	[CE]  	1	None	replace
