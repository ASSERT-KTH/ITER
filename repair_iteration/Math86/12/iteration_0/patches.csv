bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  cachedL  =  matrix.getColumnDimension();  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]    int  cachedL  =  matrix.getColumnDimension();  [BUGGY]  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	    int  cachedL  =  matrix.getColumnDimension();		non-compiled	[CE]  incompatible  types	25	None	add
2	[BUG]  [BUGGY]    int  cachedL  =  matrix.getLowerCaseDimension();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]    int  cachedL  =  matrix.getLowerCaseDimension();  [BUGGY]  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	    int  cachedL  =  matrix.getLowerCaseDimension();		non-compiled	[CE]  cannot  find  symbol	25	None	add
3	[BUG]  [BUGGY]    double[]  cachedL  =  matrix.getDataRelativeSymmetryThreshold();  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]    double[]  cachedL  =  matrix.getDataRelativeSymmetryThreshold();  [BUGGY]  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	    double[]  cachedL  =  matrix.getDataRelativeSymmetryThreshold();		non-compiled	[CE]  cannot  find  symbol	25	None	add
4	[BUG]  [BUGGY]    double[]  cachedL  =  matrix.getDataRelativeSymmetry();  [CE]  cannot  find  symbol  [FE]          AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]    double[]  cachedL  =  matrix.getDataRelativeSymmetry();  [BUGGY]  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	    double[]  cachedL  =  matrix.getDataRelativeSymmetry();		non-compiled	[CE]  cannot  find  symbol	25	None	add
5	[BUG]  [BUGGY]    int  cachedL  =  matrix.getLowerCase();  [CE]  cannot  find  symbol  [FE]            AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]    int  cachedL  =  matrix.getLowerCase();  [BUGGY]  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	    int  cachedL  =  matrix.getLowerCase();		non-compiled	[CE]  cannot  find  symbol	25	None	add
6	[BUG]  [BUGGY]  lTData  =  matrix.getData(order);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]  lTData  =  matrix.getData(order);  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	lTData  =  matrix.getData(order);	lTData  =  matrix.getData();  	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	24	None	replace
7	[BUG]  [BUGGY]  lTData  =  matrix.getDataImpl();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]  lTData  =  matrix.getDataImpl();  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	lTData  =  matrix.getDataImpl();	lTData  =  matrix.getData();  	non-compiled	[CE]  cannot  find  symbol	24	None	replace
8	[BUG]  [BUGGY]  lTData  =  matrix.getDataRef();  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]  lTData  =  matrix.getDataRef();  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	lTData  =  matrix.getDataRef();	lTData  =  matrix.getData();  	non-compiled	[CE]  cannot  find  symbol	24	None	replace
9	[BUG]  [BUGGY]    RealMatrix[]  cachedL  =  matrix.getData();  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]    RealMatrix[]  cachedL  =  matrix.getData();  [BUGGY]  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	    RealMatrix[]  cachedL  =  matrix.getData();		non-compiled	[CE]  incompatible  types	25	None	add
10	[BUG]  [BUGGY]    RealMatrix[]  cachedLT  =  matrix.getDataRef();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]    RealMatrix[]  cachedLT  =  matrix.getDataRef();  [BUGGY]  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	    RealMatrix[]  cachedLT  =  matrix.getDataRef();		non-compiled	[CE]  cannot  find  symbol	25	None	add
11	[BUG]  [BUGGY]    RealMatrix[]  cachedLT  =  matrix.getData();  [CE]  incompatible  types  [FE]        AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]    RealMatrix[]  cachedLT  =  matrix.getData();  [BUGGY]  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	    RealMatrix[]  cachedLT  =  matrix.getData();		non-compiled	[CE]  incompatible  types	25	None	add
12	[BUG]  [BUGGY]    int  cachedL  =  matrix.getColumnDimension(order);  [CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;  [FE]          AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]    int  cachedL  =  matrix.getColumnDimension(order);  [BUGGY]  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	    int  cachedL  =  matrix.getColumnDimension(order);		non-compiled	[CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;	25	None	add
13	[BUG]  [BUGGY]  lTData  =  matrix.getDataLength();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]  lTData  =  matrix.getDataLength();  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	lTData  =  matrix.getDataLength();	lTData  =  matrix.getData();  	non-compiled	[CE]  cannot  find  symbol	24	None	replace
14	[BUG]  [BUGGY]  lTData  =  matrix.getDataItem(order);  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]  lTData  =  matrix.getDataItem(order);  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	lTData  =  matrix.getDataItem(order);	lTData  =  matrix.getData();  	non-compiled	[CE]  cannot  find  symbol	24	None	replace
15	[BUG]  [BUGGY]    Matrix  matrix  =  matrix.getColumnDimension();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]    Matrix  matrix  =  matrix.getColumnDimension();  [BUGGY]  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	    Matrix  matrix  =  matrix.getColumnDimension();		non-compiled	[CE]  cannot  find  symbol	25	None	add
16	[BUG]  [BUGGY]    double[]  cachedL  =  matrix.getDataRef();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]    double[]  cachedL  =  matrix.getDataRef();  [BUGGY]  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	    double[]  cachedL  =  matrix.getDataRef();		non-compiled	[CE]  cannot  find  symbol	25	None	add
17	[BUG]  [BUGGY]    double[]  cachedL  =  matrix.getData();  [CE]  incompatible  types  [FE]        AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]    double[]  cachedL  =  matrix.getData();  [BUGGY]  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	    double[]  cachedL  =  matrix.getData();		non-compiled	[CE]  incompatible  types	25	None	add
18	[BUG]  [BUGGY]    double[]  cachedL  =  matrix.getCachedLocals();  [CE]  cannot  find  symbol  [FE]          AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  [BUGGY]    double[]  cachedL  =  matrix.getCachedLocals();  [BUGGY]  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	105	105	2	replace	    double[]  cachedL  =  matrix.getCachedLocals();		non-compiled	[CE]  cannot  find  symbol	25	None	add
