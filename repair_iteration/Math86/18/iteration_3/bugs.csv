bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  lTData.length);  ++j)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  lTData.length);  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  lTData.length);  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lTData.length);    ++j)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
2	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  lTData[i].length);  ++j)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  lTData[i].length);  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  lTData[i].length);  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lTData.length);    ++j)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
3	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  absolutePositivityThreshold);	  int    order    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
4	[BUG]  [BUGGY]  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  int    order    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
5	[BUG]  [BUGGY]  int  j  =  i  +  1;  j  <  lI.length;  ++j)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  i  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  i  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  >  expected	66	None	replace
6	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  int  j  =  0;  j  <  lI.length;  ++j)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  int  j  =  0;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lI.length;  ++j)  {  int  j  =  0;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  >  expected	66	None	replace
7	[BUG]  [BUGGY]  final  int  j  =  i  +  1;  j  <  lI.length;  ++j)  {  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  int  j  =  i  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  int  j  =  i  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  >  expected	66	None	replace
8	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  final  int  j  =  i  +  1;  j  <  lI.length;  ++j)  {  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  final  int  j  =  i  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lI.length;  ++j)  {  final  int  j  =  i  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  >  expected	66	None	replace
9	[BUG]  [BUGGY]  int  j  =  i  +  1;  j  <  2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  i  +  1;  j  <  2;  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  i  +  1;  j  <  2;	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    int    j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
10	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  2;  ++j)  {  int  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    int    j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
11	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  int  j  =  i  +  1;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  int  j  =  i  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  0;  ++j)  {  int  j  =  i  +  1;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    int    j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
12	[BUG]  [BUGGY]  ((  RealMatrix)lTData[i]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)lTData[i]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)lTData[i]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
13	[BUG]  [BUGGY]  ((  RealMatrix)ltQ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)ltQ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)ltQ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
14	[BUG]  [BUGGY]  ((  RealMatrix)lTData[i].relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)lTData[i].relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)lTData[i].relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lTData[i]));    	non-compiled	[CE]  ')'  expected	143	None	replace
15	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData[length;  ++j)  {  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData[length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lTData[length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lTData[length;    ++j)    {    	non-compiled	[CE]  ']'  expected	63	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  lTData[i].length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  i  +  1;  j  <  lTData[i].length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lTData[length;    ++j)    {    	compilable	  [FE]  AssertionError  	63	2	replace
17	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  lTData[i].length;  ++j)  {  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  lTData[i].length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  lTData[i].length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lTData[length;    ++j)    {    	compilable	  [FE]  AssertionError  	63	2	replace
18	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  lTData[length];  ++j)  {  [CE]  cannot  find  symbol  length  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  lTData[length];  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  lTData[length];  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lTData[length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  length	63	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  ==  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  i  +  1;  j  ==  0;  ++j)  {	  for(int    j    =    i    +    1;    j!=    0;    ++j)    {    	compilable	  [FE]  AssertionError  	105	6	replace
20	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  ==  0;  ++j)  {  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  ==  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  ==  0;  ++j)  {	  for(int    j    =    i    +    1;    j!=    0;    ++j)    {    	compilable	  [FE]  AssertionError  	105	6	replace
21	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j!=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  order  +  1;  j!=  0;  ++j)  {	  for(int    j    =    i    +    1;    j!=    0;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	8	replace
22	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j!=  0;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j!=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  order  +  1;  j!=  0;  ++j)  {	  for(int    j    =    i    +    1;    j!=    0;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	105	8	replace
23	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  *  3];  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i  *  3];  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i  *  3];	  final    double[][]    lTData    =    lTData[i    +    3];    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lI,  inverseSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lI,  inverseSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lI,  inverseSymmetryThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    lI);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
25	[BUG]  [BUGGY]  int  order  =  lI  *  Math.max(relativeSymmetryThreshold,  lI);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  lI  *  Math.max(relativeSymmetryThreshold,  lI);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  lI  *  Math.max(relativeSymmetryThreshold,  lI);	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    lI);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
26	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  /  Math.max(lI,  inverseSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  /  Math.max(lI,  inverseSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  /  Math.max(lI,  inverseSymmetryThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    lI);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
27	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lI);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lI);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lI);	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    lI);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
28	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    lI.length;    ++j)    {    for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
29	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  For(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  For(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    lI.length;    ++j)    {    For(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	72	None	add
30	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    lI.length;    ++j)    {    int  j  =  order  +  1;  j  <  lI.length;  ++j)  {	  	non-compiled	[CE]  >  expected	72	None	add
31	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  for(int  j  =  order  +  1;  j  <  lI.length);  ++j)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  for(int  j  =  order  +  1;  j  <  lI.length);  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    lI.length;    ++j)    {    for(int  j  =  order  +  1;  j  <  lI.length);  ++j)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
32	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1;  j  <  lI.length;  ++j)  {  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lI  =  lTData[i  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lI  =  lTData[i  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    final    double[]    lI    =    lTData[i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  ']'  expected	159	None	replace
33	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  final  double[]  lI  =  lTData[i  +  1;  j  <  lI.length;  ++j)  {  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  final  double[]  lI  =  lTData[i  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lI.length;  ++j)  {  final  double[]  lI  =  lTData[i  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    final    double[]    lI    =    lTData[i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  ']'  expected	159	None	replace
34	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i  +  1;  j  <  lI.length;  ++j)  {  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lJ  =  lTData[i  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lJ  =  lTData[i  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    final    double[]    lI    =    lTData[i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  ']'  expected	159	None	replace
35	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(lI,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(lI,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.min(lI,  Math.max(relativeSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
36	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  /  Math.min(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  /  Math.min(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  /  Math.min(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
37	[BUG]  [BUGGY]  int  order  =  absoluteSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  absoluteSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  absoluteSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
38	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(lTData,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(lTData,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.min(lTData,  Math.max(relativeSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
39	[BUG]  [BUGGY]  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPos  [CE]  '('  or  '['  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPos  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPos	  for(int    i    =    0;    j    <    order;    ++i)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPos    	non-compiled	[CE]  '('  or  '['  expected	131	None	replace
40	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ordered;  ++j)  {  [CE]  cannot  find  symbol  ordered  [FE]            NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  ordered;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  ordered;  ++j)  {	  for(int    j    =    0;    j    <    order;    ++j)    {    for(int    j    =    0;    j    <    ordered;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  ordered	40	None	replace
41	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ordered.length;  ++j)  {  [CE]  cannot  find  symbol  ordered  [FE]              NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  ordered.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  ordered.length;  ++j)  {	  for(int    j    =    0;    j    <    order;    ++j)    {    for(int    j    =    0;    j    <    ordered;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  ordered	40	None	replace
42	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym	  for(int    j    =    i    +    1;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[j];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	78	None	replace
43	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  Not  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  Not	  for(int    j    =    i    +    1;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[j];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	78	None	replace
44	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotS  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotS	  for(int    j    =    i    +    1;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[j];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	78	None	replace
45	[BUG]  [BUGGY]  ((  RealMatrix)lTData[i]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[i]));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)lTData[i]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[i]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)lTData[i]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[i]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
46	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lTData[i]));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lTData[i]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lTData[i]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
47	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lTData[i]));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lTData[i]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lTData[i]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
48	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  for(int  j  =  0;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  for(int  j  =  0;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    i;    ++j)    {    for(int  j  =  0;  j  <  i;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
49	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  For(int  j  =  0;  j  <  i;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  For(int  j  =  0;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    i;    ++j)    {    For(int  j  =  0;  j  <  i;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	36	None	add
50	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  int  j  =  0;  j  <  i;  ++j)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  int  j  =  0;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    i;    ++j)    {    int  j  =  0;  j  <  i;  ++j)  {	  	non-compiled	[CE]  >  expected	36	None	add
51	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  for(int  i  =  0;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  for(int  i  =  0;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    i;    ++j)    {    for(int  i  =  0;  j  <  i;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
52	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  for(int  j  =  0;  j  <  lI.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  for(int  j  =  0;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    lI.length;    ++j)    {    for(int  j  =  0;  j  <  lI.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
53	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  For(int  j  =  0;  j  <  lI.length;  ++j)  {  [CE]  '.class'  expected  [FE]      NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  For(int  j  =  0;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    lI.length;    ++j)    {    For(int  j  =  0;  j  <  lI.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	21	None	add
54	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  for(int  j  =  0;  j  <  lI[length;  ++j)  {  [CE]  ']'  expected  [FE]        NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  for(int  j  =  0;  j  <  lI[length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    lI.length;    ++j)    {    for(int  j  =  0;  j  <  lI[length;  ++j)  {	  	non-compiled	[CE]  ']'  expected	21	None	add
55	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(absoluteSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(absoluteSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(absoluteSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  int    order    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
56	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(absolutePositivityThreshold));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(absolutePositivityThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(absolutePositivityThreshold));	  int    order    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
57	[BUG]  [BUGGY]  int  j  =  i  +  1;  j  <  0;  ++j)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
58	[BUG]  [BUGGY]  final  int  j  =  i  +  1;  j  <  0;  ++j)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  int  j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  int  j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
59	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  final  int  j  =  i  +  1;  j  <  0;  ++j)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  final  int  j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  0;  ++j)  {  final  int  j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
60	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    i    +    1;    j    >=    0;    ++j)    {    for(int  j  =  i  +  1;  j  >=  0;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
61	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    i    +    1;    j    >=    0;    ++j)    {    for(int  j  =  i  +  1;  j!=  0;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
62	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  for(int  j  =  i  +  1;  j  >>  0;  ++j)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  for(int  j  =  i  +  1;  j  >>  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    i    +    1;    j    >=    0;    ++j)    {    for(int  j  =  i  +  1;  j  >>  0;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
63	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  for(int  j  =  i  +  1;  j  ==  0;  ++j)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  for(int  j  =  i  +  1;  j  ==  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    i    +    1;    j    >=    0;    ++j)    {    for(int  j  =  i  +  1;  j  ==  0;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
64	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  For(int  j  =  i  +  1;  j  >=  0;  ++j)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  For(int  j  =  i  +  1;  j  >=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    i    +    1;    j    >=    0;    ++j)    {    For(int  j  =  i  +  1;  j  >=  0;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	17	None	add
65	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  inverseSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  inverseSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  inverseSymmetryThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    inverseSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
66	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    inverseSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
67	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetryException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
68	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetryException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
69	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetryException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
70	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    2;    ++j)    {    for(int  j  =  order  +  1;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
71	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  For(int  j  =  order  +  1;  j  <  2;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  For(int  j  =  order  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    2;    ++j)    {    For(int  j  =  order  +  1;  j  <  2;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	25	None	add
72	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  int  j  =  order  +  1;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  int  j  =  order  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    2;    ++j)    {    int  j  =  order  +  1;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	25	None	add
73	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  final  double[]  lTData[j  =  order  +  1;  j  <  2;  ++j)  {  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  final  double[]  lTData[j  =  order  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    2;    ++j)    {    final  double[]  lTData[j  =  order  +  1;  j  <  2;  ++j)  {	  	non-compiled	[CE]  ']'  expected	25	None	add
74	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  for(int  j  =  order  +  1;  j  <  2);  ++j)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  for(int  j  =  order  +  1;  j  <  2);  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    2;    ++j)    {    for(int  j  =  order  +  1;  j  <  2);  ++j)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
75	[BUG]  [BUGGY]  ((  RealMatrix)ltQ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  ltQ));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)ltQ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  ltQ));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)ltQ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  ltQ));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    ltQ));    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
76	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  ltQ));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  ltQ));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  ltQ));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    ltQ));    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
77	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  ltQ));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  ltQ));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  ltQ));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    ltQ));    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
78	[BUG]  [BUGGY]  int  j  =  lTData.length  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lTData.length  -  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lTData.length  -  1;	  int    j    =    lTData.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
79	[BUG]  [BUGGY]  int  j  =  lTData[i].length  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lTData[i].length  +  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lTData[i].length  +  1;	  int    j    =    lTData.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
80	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i  +  1;  j  <  lTData.length;  ++j)  {  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    final    double[]    lTData    =    lTData[i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  ']'  expected	145	None	replace
81	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i]  [relativeSymmetryThreshold];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i]  [relativeSymmetryThreshold];  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i]  [relativeSymmetryThreshold];	  final    double[][]    lTData    =    lTData[i]    [absolutePositivityThreshold];    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
82	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0]  [absolutePositivityThreshold];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[0]  [absolutePositivityThreshold];  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[0]  [absolutePositivityThreshold];	  final    double[][]    lTData    =    lTData[i]    [absolutePositivityThreshold];    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
83	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  absoluteSymmetryThreshold);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i],  absoluteSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i],  absoluteSymmetryThreshold);	  final    double[][]    lTData    =    lTData[i],    matrix);    	non-compiled	[CE]  ';'  expected	152	None	replace
84	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  matrix,  relativeSymmetryThreshold);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i],  matrix,  relativeSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i],  matrix,  relativeSymmetryThreshold);	  final    double[][]    lTData    =    lTData[i],    matrix);    	non-compiled	[CE]  ';'  expected	152	None	replace
85	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  computedL,  matrix);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i],  computedL,  matrix);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i],  computedL,  matrix);	  final    double[][]    lTData    =    lTData[i],    matrix);    	non-compiled	[CE]  ';'  expected	152	None	replace
86	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  cachedLT);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i],  cachedLT);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i],  cachedLT);	  final    double[][]    lTData    =    lTData[i],    matrix);    	non-compiled	[CE]  ';'  expected	152	None	replace
87	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
88	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
89	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
90	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0]  [absoluteSymmetryThreshold];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[0]  [absoluteSymmetryThreshold];  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[0]  [absoluteSymmetryThreshold];	  final    double[][]    lTData    =    lTData[i]    [absoluteSymmetryThreshold];    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
91	[BUG]  [BUGGY]  final  double[][]  lIJ  =  lTData[j];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lIJ  =  lTData[j];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lIJ  =  lTData[j];	  final    double[][]    lIJ    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
92	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotS  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotS	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	48	None	replace
93	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	48	None	replace
94	[BUG]  [BUGGY]  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	48	None	replace
95	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i][0];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i][0];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i][0];	  final    double[][]    lTData    =    lTData[i][i];    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
96	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i][1];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i][1];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i][1];	  final    double[][]    lTData    =    lTData[i][i];    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
97	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0][i];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[0][i];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[0][i];	  final    double[][]    lTData    =    lTData[i][i];    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
98	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
99	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
100	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
101	[BUG]  [BUGGY]  for(int  j  =  lI.length;  j  <  i.length;  ++j)  {  [CE]  int  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length;  j  <  i.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length;  j  <  i.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	64	None	replace
102	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	150	None	replace
103	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSym	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	150	None	replace
104	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absoluteSymmetryThreshold)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absoluteSymmetryThreshold)  {  throw  new  NotSym  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absoluteSymmetryThreshold)  {  throw  new  NotSym	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	150	None	replace
105	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetric	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetric    	non-compiled	[CE]  '('  or  '['  expected	50	None	replace
106	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  lI.length);  ++j)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  lI.length);  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  lI.length);  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lI.length);    ++j)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
107	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  2;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  i  +  2;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lI.length);    ++j)    {    	compilable	  [FE]  AssertionError  	67	5	replace
108	[BUG]  [BUGGY]  for(int  j  =  i  +  2;  j  <  lI.length;  ++j)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  2;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  2;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lI.length);    ++j)    {    	compilable	  [FE]  AssertionError  	67	5	replace
109	[BUG]  [BUGGY]  For(int  j  =  i  +  1;  j  <  lTData.length;  ++j)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  For(int  j  =  i  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	For(int  j  =  i  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    For(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	60	None	replace
110	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  lTData.length;  ++j)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  For(int  j  =  0;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	For(int  j  =  0;  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    For(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	60	None	replace
111	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  order.length;  ++j)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  order.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  +  1;  j  <  order.length;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	73	None	replace
112	[BUG]  [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  order.length;  ++j)  {  [CE]  int  cannot  be  dereferenced  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  order.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lTData.length  +  1;  j  <  order.length;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	73	None	replace
113	[BUG]  [BUGGY]  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDef    	non-compiled	[CE]  '('  or  '['  expected	128	None	replace
114	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotP  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotP  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotP	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDef    	non-compiled	[CE]  '('  or  '['  expected	128	None	replace
115	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(absoluteSymmetryThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(absoluteSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(absoluteSymmetryThreshold,  absolutePositivityThreshold);	  int    order    =    absoluteSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
116	[BUG]  [BUGGY]  final  double[]  lTData[j  =  i  +  1;  j  <  2;  ++j)  {  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData[j  =  i  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData[j  =  i  +  1;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    final    double[]    lTData[j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  ']'  expected	13	None	replace
117	[BUG]  [BUGGY]  final  double[]  lTData[j  =  i  +  1;  j  <  2;  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData[j  =  i  +  1;  j  <  2;  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData[j  =  i  +  1;  j  <  2;	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    final    double[]    lTData[j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  ']'  expected	13	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lTData.length  +  1;  j  <  0;  ++j)  {	  for(int    j    =    order    +    1;    j    <    0;    ++j)    {    	compilable	  [FE]  AssertionError  	16	6	replace
119	[BUG]  [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  0;  ++j)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lTData.length  +  1;  j  <  0;  ++j)  {	  for(int    j    =    order    +    1;    j    <    0;    ++j)    {    	compilable	  [FE]  AssertionError  	16	6	replace
120	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  order  +  1;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  0;  j  <  order  +  1;  ++j)  {	  for(int    j    =    order    +    1;    j    <    0;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	7	replace
121	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  order  +  1;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  order  +  1;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  order  +  1;  ++j)  {	  for(int    j    =    order    +    1;    j    <    0;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	7	replace
122	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  item;  ++j)  {  [CE]  cannot  find  symbol  item  [FE]              NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  item;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  item;  ++j)  {	  for(int    j    =    0;    j    <    order;    ++j)    {    for(int    j    =    0;    j    <    item;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  item	41	None	replace
123	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  item.length;  ++j)  {  [CE]  cannot  find  symbol  item  [FE]                NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  item.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  item.length;  ++j)  {	  for(int    j    =    0;    j    <    order;    ++j)    {    for(int    j    =    0;    j    <    item;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  item	41	None	replace
124	[BUG]  [BUGGY]  double  j  =  lI.length  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  j  =  lI.length  +  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  j  =  lI.length  +  1;	  double    j    =    i    +    1;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
125	[BUG]  [BUGGY]  double  j  =  lI[i  +  1];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  j  =  lI[i  +  1];  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  j  =  lI[i  +  1];	  double    j    =    i    +    1;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
126	[BUG]  [BUGGY]  double  j  =  lI  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  j  =  lI  +  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  j  =  lI  +  1;	  double    j    =    i    +    1;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
127	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException();  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetryMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
128	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException();  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetryMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
129	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetryMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
130	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException();  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetryMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
131	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }	  final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
132	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }	  final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
133	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }	  final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
134	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absoluteSymmetryThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absoluteSymmetryThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absoluteSymmetryThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }	  final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
135	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  for(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  for(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    lI.length    +    1;    j    <    2;    ++j)    {    for(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
136	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  For(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  For(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    lI.length    +    1;    j    <    2;    ++j)    {    For(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	27	None	add
137	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  for(int  j  =  lI.length  +  1;  j  <  2);  ++j)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  for(int  j  =  lI.length  +  1;  j  <  2);  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    lI.length    +    1;    j    <    2;    ++j)    {    for(int  j  =  lI.length  +  1;  j  <  2);  ++j)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
138	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    lI.length    +    1;    j    <    2;    ++j)    {    int  j  =  lI.length  +  1;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	27	None	add
139	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  final  double[]  lI  =  lI.length  +  1;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  final  double[]  lI  =  lI.length  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    lI.length    +    1;    j    <    2;    ++j)    {    final  double[]  lI  =  lI.length  +  1;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	27	None	add
140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  3;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  i  +  1;  j  <  3;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    for(int    j    =    i    +    1;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionError  	10	6	replace
141	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  3;  ++j)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  3;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  3;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    for(int    j    =    i    +    1;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionError  	10	6	replace
142	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  inverseSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  inverseSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  inverseSymmetryThreshold);	  double    order    =    inverseSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
143	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(inverseSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(inverseSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  *  Math.max(inverseSymmetryThreshold,  relativeSymmetryThreshold);	  double    order    =    inverseSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
144	[BUG]  [BUGGY]  double  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  double    order    =    inverseSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
145	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotM    	non-compiled	[CE]  '('  or  '['  expected	49	None	replace
146	[BUG]  [BUGGY]  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotM    	non-compiled	[CE]  '('  or  '['  expected	49	None	replace
147	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [CE]  '('  or  '['  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotM    	non-compiled	[CE]  '('  or  '['  expected	49	None	replace
148	[BUG]  [BUGGY]  final  double[][]  lI  =  lTData[i  *  3];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lI  =  lTData[i  *  3];  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lI  =  lTData[i  *  3];	  final    double[][]    lI    =    lTData[i    +    3];    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
149	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  relativeSymmetryThreshold;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i],  relativeSymmetryThreshold;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i],  relativeSymmetryThreshold;	  final    double[][]    lTData    =    lTData[i],    absoluteSymmetryThreshold;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
150	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  absoluteSymmetryThreshold,  relativeSymmetryThreshold;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i],  absoluteSymmetryThreshold,  relativeSymmetryThreshold;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i],  absoluteSymmetryThreshold,  relativeSymmetryThreshold;	  final    double[][]    lTData    =    lTData[i],    absoluteSymmetryThreshold;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
151	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0],  absoluteSymmetryThreshold;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[0],  absoluteSymmetryThreshold;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[0],  absoluteSymmetryThreshold;	  final    double[][]    lTData    =    lTData[i],    absoluteSymmetryThreshold;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
152	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lJ  =  lTData[j];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lJ  =  lTData[j];	  final    double[][]    lJ    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
153	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[0];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lJ  =  lTData[0];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lJ  =  lTData[0];	  final    double[][]    lJ    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
154	[BUG]  [BUGGY]  final  double[]  lTData[j  =  i  +  1;  j  <  0;  ++j)  {  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData[j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData[j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    final    double[]    lTData[j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  ']'  expected	45	None	replace
155	[BUG]  [BUGGY]  final  double[]  lTData[j  =  i  +  1;  j  >=  0;  ++j)  {  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData[j  =  i  +  1;  j  >=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData[j  =  i  +  1;  j  >=  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    final    double[]    lTData[j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  ']'  expected	45	None	replace
156	[BUG]  [BUGGY]  int  j  =  lTData[i]  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lTData[i]  +  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lTData[i]  +  1;	  int    j    =    lI[i]    +    1;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
157	[BUG]  [BUGGY]  int  j  =  lI[i]  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lI[i]  -  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lI[i]  -  1;	  int    j    =    lI[i]    +    1;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
158	[BUG]  [BUGGY]  double  j  =  lI[i]  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  j  =  lI[i]  +  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  j  =  lI[i]  +  1;	  int    j    =    lI[i]    +    1;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
159	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  order.length;  ++j)  {  [CE]  int  cannot  be  dereferenced  [FE]    NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  order.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  order.length;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	24	None	replace
160	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  0;  j  <  1;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionError  	24	6	replace
161	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  [FE]  AssertionError  [FE]      NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  1;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionError  	24	6	replace
162	[BUG]  [BUGGY]  ((  RealMatrix)ltQ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)ltQ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)ltQ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
163	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
164	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
165	[BUG]  [BUGGY]  final  double[][]  lI  =  lTData[i];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lI  =  lTData[i];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lI  =  lTData[i];	  final    double[][]    lI    =    lTData[i][i];    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
166	[BUG]  [BUGGY]  final  double[][]  lI  =  lTData[i][0];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lI  =  lTData[i][0];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lI  =  lTData[i][0];	  final    double[][]    lI    =    lTData[i][i];    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
167	[BUG]  [BUGGY]  final  double[][]  lI  =  lTData[0][i];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lI  =  lTData[0][i];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lI  =  lTData[0][i];	  final    double[][]    lI    =    lTData[i][i];    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
168	[BUG]  [BUGGY]  final  double[][]  lI  =  lTData[i][1];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lI  =  lTData[i][1];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lI  =  lTData[i][1];	  final    double[][]    lI    =    lTData[i][i];    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
169	[BUG]  [BUGGY]  int  order  =  lI.length  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  lI.length  -  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  lI.length  -  1;	  int    order    =    lI.length;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
170	[BUG]  [BUGGY]  int  order  =  lI.length  -  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  lI.length  -  2;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  lI.length  -  2;	  int    order    =    lI.length;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
171	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i  +  1;  j  <  2;  ++j)  {  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i  +  1;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    final    double[]    lTData    =    lTData[i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  ']'  expected	149	None	replace
172	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i  +  1;  j  <  2;  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i  +  1;  j  <  2;  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i  +  1;  j  <  2;	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    final    double[]    lTData    =    lTData[i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  ']'  expected	149	None	replace
173	[BUG]  [BUGGY]  int  j  =  lTData[i  +  1];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lTData[i  +  1];  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lTData[i  +  1];	  int    j    =    lI[i    +    1];    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
174	[BUG]  [BUGGY]  int  j  =  lI[i  +  1]  &  0xff;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lI[i  +  1]  &  0xff;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lI[i  +  1]  &  0xff;	  int    j    =    lI[i    +    1];    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
175	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
176	[BUG]  [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
177	[BUG]  [BUGGY]  int  order  =  inverseSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  inverseSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  inverseSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
178	[BUG]  [BUGGY]  int  j  =  lI.length  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lI.length  -  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lI.length  -  1;	  int    j    =    lI.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
179	[BUG]  [BUGGY]  int  j  =  lI.length  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lI.length  +  2;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lI.length  +  2;	  int    j    =    lI.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
180	[BUG]  [BUGGY]  int  j  =  lI.length  /  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lI.length  /  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lI.length  /  1;	  int    j    =    lI.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
181	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  >=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  order  +  1;  j  >=  0;  ++j)  {	  for(int    j    =    i    +    1;    j    >=    0;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	8	replace
182	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  >=  0;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  >=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  order  +  1;  j  >=  0;  ++j)  {	  for(int    j    =    i    +    1;    j    >=    0;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	8	replace
183	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  >=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lI.length  +  1;  j  >=  0;  ++j)  {	  for(int    j    =    i    +    1;    j    >=    0;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	8	replace
184	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  >=  0;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  >=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  +  1;  j  >=  0;  ++j)  {	  for(int    j    =    i    +    1;    j    >=    0;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	8	replace
185	[BUG]  [BUGGY]  For(int  j  =  i  +  1;  j  <  lI.length;  ++j)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  For(int  j  =  i  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	For(int  j  =  i  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    For(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	65	None	replace
186	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  lI.length;  ++j)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  For(int  j  =  0;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	For(int  j  =  0;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    For(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	65	None	replace
187	[BUG]  [BUGGY]  final  double[]  lI  =  i  +  1;  j  <  lI.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lI  =  i  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lI  =  i  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    final    double[]    lI    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  >  expected	129	None	replace
188	[BUG]  [BUGGY]  final  double[]  lI  =  lI.length  +  1;  j  <  lI.length;  ++j)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lI  =  lI.length  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lI  =  lI.length  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    final    double[]    lI    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  >  expected	129	None	replace
189	[BUG]  [BUGGY]  final  double[]  lI  =  lI.length;  ++j)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lI  =  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lI  =  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    final    double[]    lI    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  ';'  expected	129	None	replace
190	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM	  for(int    j    =    i    +    1;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[j];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotM    	non-compiled	[CE]  '('  or  '['  expected	75	None	replace
191	[BUG]  [BUGGY]  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM	  for(int    j    =    i    +    1;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[j];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotM    	non-compiled	[CE]  '('  or  '['  expected	75	None	replace
192	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lI[j].length;  ++j)  {  [CE]  double  cannot  be  dereferenced  [FE]    NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI[j].length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lI[j].length;  ++j)  {	  for(int    j    =    0;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	22	None	replace
193	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  2)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  2)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  2)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    for(int    j    =    i    +    1;    j    <    2)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
194	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  2)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  2)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    for(int    j    =    i    +    1;    j    <    2)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
195	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  >=  2)  {  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  >=  2)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  >=  2)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    for(int    j    =    i    +    1;    j    <    2)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
196	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  =  0;  ++j)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  =  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  order  +  1;  j  <  =  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    =    0;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
197	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  =  0;  ++j)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  =  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  +  1;  j  <  =  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    =    0;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
198	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
199	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
200	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
201	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
202	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  lIJ.length;  ++j)  {  [CE]  cannot  find  symbol  lIJ  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  lIJ.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  order  +  1;  j  <  lIJ.length;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lJ.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  lIJ	56	None	replace
203	[BUG]  [BUGGY]  double  order  =  lTData.length  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  lTData.length  -  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  lTData.length  -  1;	  double    order    =    lTData.length;    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
204	[BUG]  [BUGGY]  double  order  =  lTData[i].length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  lTData[i].length;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  lTData[i].length;	  double    order    =    lTData.length;    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
205	[BUG]  [BUGGY]  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
206	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
207	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  -  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lI.length  -  1;  j  <  0;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    0;    ++j)    {    	compilable	  [FE]  AssertionError  	20	6	replace
208	[BUG]  [BUGGY]  for(int  j  =  lI.length  -  1;  j  <  0;  ++j)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  -  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  -  1;  j  <  0;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    0;    ++j)    {    	compilable	  [FE]  AssertionError  	20	6	replace
209	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j!=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lI.length  +  1;  j!=  0;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    0;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	8	replace
210	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j!=  0;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j!=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  +  1;  j!=  0;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    0;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	8	replace
211	[BUG]  [BUGGY]  for(int  j  =  order  +  1,  j  <  0;  ++j)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1,  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  order  +  1,  j  <  0;  ++j)  {	  for(int    j    =    i    +    1,    j    <    0;    ++j)    {    	non-compiled	[CE]  ';'  expected	154	None	replace
212	[BUG]  [BUGGY]  for(int  j  =  i  +  1,  j  <  =  0;  ++j)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1,  j  <  =  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1,  j  <  =  0;  ++j)  {	  for(int    j    =    i    +    1,    j    <    0;    ++j)    {    	non-compiled	[CE]  ';'  expected	154	None	replace
213	[BUG]  [BUGGY]  for(int  j  =  i  +  1,  order  <  0;  ++j)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1,  order  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1,  order  <  0;  ++j)  {	  for(int    j    =    i    +    1,    j    <    0;    ++j)    {    	non-compiled	[CE]  ';'  expected	154	None	replace
214	[BUG]  [BUGGY]  for(int  j  =  i  +  1,  j  >  0;  ++j)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1,  j  >  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1,  j  >  0;  ++j)  {	  for(int    j    =    i    +    1,    j    <    0;    ++j)    {    	non-compiled	[CE]  ';'  expected	154	None	replace
215	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
216	[BUG]  [BUGGY]  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	  double    order    =    inverseSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
217	[BUG]  [BUGGY]  double  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  double    order    =    inverseSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
218	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  final  int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  final  int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  2;  ++j)  {  final  int  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    (int    j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
219	[BUG]  [BUGGY]  final  int  j  =  i  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  int  j  =  i  +  1;  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  int  j  =  i  +  1;	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    (int    j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
220	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  final  int  j  =  i  +  1;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  final  int  j  =  i  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  0;  ++j)  {  final  int  j  =  i  +  1;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    (int    j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
221	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  (int  j  =  0;  j  <  2;  ++j)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  (int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  2;  ++j)  {  (int  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    (int    j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  ')'  expected	122	None	replace
222	[BUG]  [BUGGY]  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotS  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotS	  for(int    i    =    0;    j    <    order;    ++i)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotS    	non-compiled	[CE]  '('  or  '['  expected	102	None	replace
223	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  *  2];  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i  *  2];  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i  *  2];	  final    double[][]    lTData    =    lTData[i    *    1];    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
224	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    lTData.length;    ++j)    {    for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
225	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  For(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  For(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    lTData.length;    ++j)    {    For(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	57	None	add
226	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    lTData.length;    ++j)    {    int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {	  	non-compiled	[CE]  >  expected	57	None	add
227	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  for(int  j  =  order  +  1;  j  <  lTData.length);  ++j)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  for(int  j  =  order  +  1;  j  <  lTData.length);  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    lTData.length;    ++j)    {    for(int  j  =  order  +  1;  j  <  lTData.length);  ++j)  {	  	non-compiled	[CE]  ';'  expected	57	None	add
228	[BUG]  [BUGGY]  final  double[][]  lI  =  lTData[i  *  2];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lI  =  lTData[i  *  2];  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lI  =  lTData[i  *  2];	  final    double[][]    lI    =    lTData[i    +    2];    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
229	[BUG]  [BUGGY]  final  int  j  =  0;  j  <  order;  ++j)  {  [CE]  >  expected  [FE]        NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  int  j  =  0;  j  <  order;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  int  j  =  0;  j  <  order;  ++j)  {	  for(int    j    =    0;    j    <    order;    ++j)    {    final    int    j    =    0;    j    <    order;    ++j)    {    	non-compiled	[CE]  >  expected	118	None	replace
230	[BUG]  [BUGGY]  final  int  j  =  0;  j  <  order;  [CE]  >  expected  [FE]          NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  int  j  =  0;  j  <  order;  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  int  j  =  0;  j  <  order;	  for(int    j    =    0;    j    <    order;    ++j)    {    final    int    j    =    0;    j    <    order;    ++j)    {    	non-compiled	[CE]  >  expected	118	None	replace
231	[BUG]  [BUGGY]  for(int  j  =  lIJ  +  1;  j  <  order;  ++j)  {  [CE]  cannot  find  symbol  lIJ  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lIJ  +  1;  j  <  order;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lIJ  +  1;  j  <  order;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lIJ;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  lIJ	55	None	replace
232	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  order;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lI.length  +  1;  j  <  order;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lIJ;    ++j)    {    	compilable	  [FE]  AssertionError  	55	6	replace
233	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  order;  ++j)  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  order;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  +  1;  j  <  order;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lIJ;    ++j)    {    	compilable	  [FE]  AssertionError  	55	6	replace
234	[BUG]  [BUGGY]  int  j  =  0;  j  <  order;  ++j)  {  [CE]  >  expected  [FE]                NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  0;  j  <  order;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  0;  j  <  order;  ++j)  {	  for(int    j    =    0;    j    <    order;    ++j)    {    int    j    =    0;    j    <    order;    ++j)    {    	non-compiled	[CE]  >  expected	42	None	replace
235	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  int  j  =  0;  j  <  lTData[j];  ++j)  {  [CE]  ']'  expected  [FE]                  NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  int  j  =  0;  j  <  lTData[j];  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lTData.length;  ++j)  {  int  j  =  0;  j  <  lTData[j];  ++j)  {	  for(int    j    =    0;    j    <    order;    ++j)    {    int    j    =    0;    j    <    order;    ++j)    {    	non-compiled	[CE]  ']'  expected	42	None	replace
236	[BUG]  [BUGGY]  Math.max(Math.abs(lI),  Math.abs(lI));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  Math.max(Math.abs(lI),  Math.abs(lI));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	Math.max(Math.abs(lI),  Math.abs(lI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lI));    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
237	[BUG]  [BUGGY]  final  double[]  lTData  =  i  +  1;  j  <  0;  ++j)  {  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    final    double[]    lTData    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
238	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lI.length  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    i.length;    ++j)    {    	compilable	  [FE]  AssertionError  	71	6	replace
239	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  lI.length;  ++j)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    i.length;    ++j)    {    	compilable	  [FE]  AssertionError  	71	6	replace
240	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  lJ.length;  ++j)  {  [CE]  cannot  find  symbol  lJ  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  lJ.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  +  1;  j  <  lJ.length;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    i.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  lJ	71	None	replace
241	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lI.length  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    i.length;    ++j)    {    	compilable	  [FE]  AssertionError  	71	6	replace
242	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  lTData.length;  ++j)  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    i.length;    ++j)    {    	compilable	  [FE]  AssertionError  	71	6	replace
243	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    0;    ++j)    {    for(int  j  =  order  +  1;  j  <  0;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
244	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  For(int  j  =  order  +  1;  j  <  0;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  For(int  j  =  order  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    0;    ++j)    {    For(int  j  =  order  +  1;  j  <  0;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	15	None	add
245	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  final  double[]  lTData[j  =  order  +  1;  j  <  0;  ++j)  {  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  final  double[]  lTData[j  =  order  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    0;    ++j)    {    final  double[]  lTData[j  =  order  +  1;  j  <  0;  ++j)  {	  	non-compiled	[CE]  ']'  expected	15	None	add
246	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  int  j  =  order  +  1;  j  <  0;  ++j)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  int  j  =  order  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    0;    ++j)    {    int  j  =  order  +  1;  j  <  0;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	15	None	add
247	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i][relativeSymmetryThreshold(Math.abs(lIJ  -  lJ));  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i][relativeSymmetryThreshold(Math.abs(lIJ  -  lJ));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i][relativeSymmetryThreshold(Math.abs(lIJ  -  lJ));	  final    double[][]    lTData    =    lTData[i][relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJ));    	non-compiled	[CE]  ']'  expected	6	None	replace
248	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i][relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJ)+  1);  [CE]  ']'  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i][relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJ)+  1);  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i][relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJ)+  1);	  final    double[][]    lTData    =    lTData[i][relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJ));    	non-compiled	[CE]  ']'  expected	6	None	replace
249	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetryMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
250	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetryMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
251	[BUG]  [BUGGY]  For(int  j  =  i  +  1;  j  <  0;  ++j)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  For(int  j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	For(int  j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    For(int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  '.class'  expected	44	None	replace
252	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotS  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotS	  for(int    j    =    i    +    1;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[j];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotS    	non-compiled	[CE]  '('  or  '['  expected	76	None	replace
253	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
254	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
255	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
256	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lData.length;  ++j)  {  [CE]  cannot  find  symbol  lData  [FE]    NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lData.length;  ++j)  {	  for(int    j    =    0;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  lData	34	None	replace
257	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lIJ.length;  ++j)  {  [CE]  cannot  find  symbol  lIJ  [FE]          NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lIJ.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lIJ.length;  ++j)  {	  for(int    j    =    0;    j    <    lJ.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  lIJ	35	None	replace
258	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
259	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  0);	  int    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
260	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold);  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold);  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(relativeSymmetryThreshold);    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
261	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold);  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold);  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(relativeSymmetryThreshold);    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
262	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold);  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold);  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(relativeSymmetryThreshold);    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
263	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    i    +    1;    j!=    0;    ++j)    {    for(int  j  =  i  +  1;  j!=  0;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
264	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    i    +    1;    j!=    0;    ++j)    {    for(int  j  =  i  +  1;  j  >=  0;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
265	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  for(int  j  =  i  +  1;  j  >>  0;  ++j)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  for(int  j  =  i  +  1;  j  >>  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    i    +    1;    j!=    0;    ++j)    {    for(int  j  =  i  +  1;  j  >>  0;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
266	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  for(int  j  =  i  +  1;  j  ==  0;  ++j)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  for(int  j  =  i  +  1;  j  ==  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    i    +    1;    j!=    0;    ++j)    {    for(int  j  =  i  +  1;  j  ==  0;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
267	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  for(int  j  =  i  +  1;  j  [Delete]  0;  ++j)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  for(int  j  =  i  +  1;  j  [Delete]  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    i    +    1;    j!=    0;    ++j)    {    for(int  j  =  i  +  1;  j  [Delete]  0;  ++j)  {	  	non-compiled	[CE]  ';'  expected	104	None	add
268	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(absoluteSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(absoluteSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(absoluteSymmetryThreshold));	  int    order    =    absolutePositivityThreshold    *    Math.max(inverseSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
269	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }	  final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
270	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }	  final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
271	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }	  final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
272	[BUG]  [BUGGY]  final  double[]  lTData  =  i  +  1;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  i  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  i  +  1;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    final    double[]    lTData    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
273	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  final  double[]  lTData  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  final  double[]  lTData  =  0;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  2;  ++j)  {  final  double[]  lTData  =  0;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    final    double[]    lTData    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
274	[BUG]  [BUGGY]  final  double[]  lTData  =  i  +  1;  j  <  2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  i  +  1;  j  <  2;  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  i  +  1;  j  <  2;	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    final    double[]    lTData    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
275	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0],  absolutePositivityThreshold;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[0],  absolutePositivityThreshold;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[0],  absolutePositivityThreshold;	  final    double[][]    lTData    =    lTData[i],    absolutePositivityThreshold;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
276	[BUG]  [BUGGY]  final  double[]  lTData  =  i  +  1;  j  <  lTData.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  i  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  i  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    final    double[]    lTData    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  >  expected	99	None	replace
277	[BUG]  [BUGGY]  int  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
278	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    double[]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
279	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  =  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  =  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  =  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    double[]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
280	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  final    double[]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
281	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  int  j  =  0;  j  <  lTData.length;  ++j)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  int  j  =  0;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  int  j  =  0;  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    (int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  >  expected	100	None	replace
282	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  (int  j  =  0;  j  <  lTData.length;  ++j)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  (int  j  =  0;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lTData.length;  ++j)  {  (int  j  =  0;  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    (int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  ')'  expected	100	None	replace
283	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  int  j  =  i  +  1;  j  <  lTData.length;  ++j)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  int  j  =  i  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  int  j  =  i  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    (int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  >  expected	100	None	replace
284	[BUG]  [BUGGY]  final  for(int  j  =  i  +  1;  j  <  lTData.length;  ++j)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  for(int  j  =  i  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  for(int  j  =  i  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    (int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
285	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lTData.length  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    lTData.length    +    1;    j    <    i.length;    ++j)    {    	compilable	  [FE]  AssertionError  	90	6	replace
286	[BUG]  [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  lTData.length;  ++j)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lTData.length  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    lTData.length    +    1;    j    <    i.length;    ++j)    {    	compilable	  [FE]  AssertionError  	90	6	replace
287	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lTData.length  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    lTData.length    +    1;    j    <    i.length;    ++j)    {    	compilable	  [FE]  AssertionError  	90	6	replace
288	[BUG]  [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  lI.length;  ++j)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lTData.length  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    lTData.length    +    1;    j    <    i.length;    ++j)    {    	compilable	  [FE]  AssertionError  	90	6	replace
289	[BUG]  [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  lJ.length;  ++j)  {  [CE]  cannot  find  symbol  lJ  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  lJ.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lTData.length  +  1;  j  <  lJ.length;  ++j)  {	  for(int    j    =    lTData.length    +    1;    j    <    i.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  lJ	90	None	replace
290	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
291	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
292	[BUG]  [BUGGY]  int  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
293	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold),  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold),  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold),  Math.max(relativeSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
294	[BUG]  [BUGGY]  For(int  j  =  i  +  1;  j  <  2;  ++j)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  For(int  j  =  i  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	For(int  j  =  i  +  1;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    For(int    j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
295	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lI[length;  ++j)  {  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI[length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lI[length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lI[length;    ++j)    {    	non-compiled	[CE]  ']'  expected	68	None	replace
296	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  lI[j];  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  i  +  1;  j  <  lI[j];  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lI[length;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	68	7	replace
297	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  lI[j];  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  lI[j];  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  lI[j];  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lI[length;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	68	7	replace
298	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  lI[length];  ++j)  {  [CE]  cannot  find  symbol  length  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  lI[length];  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  lI[length];  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lI[length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  length	68	None	replace
299	[BUG]  [BUGGY]  int  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold));    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
300	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold));    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
301	[BUG]  [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold));    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
302	[BUG]  [BUGGY]  int  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold));    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
303	[BUG]  [BUGGY]  int  order  =  lTData.length  /  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  lTData.length  /  2;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  lTData.length  /  2;	  int    order    =    lTData.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
304	[BUG]  [BUGGY]  int  order  =  lTData.length  -  3;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  lTData.length  -  3;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  lTData.length  -  3;	  int    order    =    lTData.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
305	[BUG]  [BUGGY]  int  j  =  lI[i  +  2];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lI[i  +  2];  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lI[i  +  2];	  int    j    =    i    +    2;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
306	[BUG]  [BUGGY]  int  j  =  lI  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lI  +  2;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lI  +  2;	  int    j    =    i    +    2;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
307	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  final  int  j  =  0;  j  <  lI.length;  ++j)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  final  int  j  =  0;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lI.length;  ++j)  {  final  int  j  =  0;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    (int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  >  expected	130	None	replace
308	[BUG]  [BUGGY]  final  for(int  j  =  i  +  1;  j  <  lI.length;  ++j)  {  final  int  j  =  i  +  1;  j  <  lI.length;  ++j)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  for(int  j  =  i  +  1;  j  <  lI.length;  ++j)  {  final  int  j  =  i  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  for(int  j  =  i  +  1;  j  <  lI.length;  ++j)  {  final  int  j  =  i  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    (int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
309	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  (int  j  =  0;  j  <  lI.length;  ++j)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  (int  j  =  0;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lI.length;  ++j)  {  (int  j  =  0;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    (int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  ')'  expected	130	None	replace
310	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
311	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
312	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    lTData.length;    ++j)    {    for(int  j  =  0;  j  <  lTData.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
313	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  For(int  j  =  0;  j  <  lTData.length;  ++j)  {  [CE]  '.class'  expected  [FE]      NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  For(int  j  =  0;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    lTData.length;    ++j)    {    For(int  j  =  0;  j  <  lTData.length;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	33	None	add
314	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  int  j  =  0;  j  <  lTData.length;  ++j)  {  [CE]  >  expected  [FE]        NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  int  j  =  0;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    lTData.length;    ++j)    {    int  j  =  0;  j  <  lTData.length;  ++j)  {	  	non-compiled	[CE]  >  expected	33	None	add
315	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  for(int  j  =  0;  j  <  lTData.length);  ++j)  {  [CE]  ';'  expected  [FE]          NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  for(int  j  =  0;  j  <  lTData.length);  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    lTData.length;    ++j)    {    for(int  j  =  0;  j  <  lTData.length);  ++j)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
316	[BUG]  [BUGGY]  int  order  =  lTData[i].length  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  lTData[i].length  -  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  lTData[i].length  -  1;	  int    order    =    lTData[i].length;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
317	[BUG]  [BUGGY]  int  order  =  lTData[i].length  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  lTData[i].length  +  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  lTData[i].length  +  1;	  int    order    =    lTData[i].length;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
318	[BUG]  [BUGGY]  int  j  =  lI  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lI  +  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lI  +  1;	  int    j    =    order    +    1;    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
319	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  -  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lI.length  -  1;  j  <  2;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionError  	28	6	replace
320	[BUG]  [BUGGY]  for(int  j  =  lI.length  -  1;  j  <  2;  ++j)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  -  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  -  1;  j  <  2;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionError  	28	6	replace
321	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  >=  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lI.length  +  1;  j  >=  2;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    2;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	8	replace
322	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  >=  2;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  >=  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  +  1;  j  >=  2;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    2;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	28	8	replace
323	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i  +  1;  j  <  0;  ++j)  {  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    final    double[]    lTData    =    lTData[i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  ']'  expected	135	None	replace
324	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  absoluteSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  absoluteSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  absoluteSymmetryThreshold);	  int    order    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
325	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    i;    ++j)    {    for(int  j  =  order  +  1;  j  <  i;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
326	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  For(int  j  =  order  +  1;  j  <  i;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  For(int  j  =  order  +  1;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    i;    ++j)    {    For(int  j  =  order  +  1;  j  <  i;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	106	None	add
327	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  int  j  =  order  +  1;  j  <  i;  ++j)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  int  j  =  order  +  1;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    i;    ++j)    {    int  j  =  order  +  1;  j  <  i;  ++j)  {	  	non-compiled	[CE]  >  expected	106	None	add
328	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  final  double[]  lTData[j  =  order  +  1;  j  <  i;  ++j)  {  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  final  double[]  lTData[j  =  order  +  1;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    i;    ++j)    {    final  double[]  lTData[j  =  order  +  1;  j  <  i;  ++j)  {	  	non-compiled	[CE]  ']'  expected	106	None	add
329	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  for(int  j  =  ordered  +  1;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  for(int  j  =  ordered  +  1;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    i;    ++j)    {    for(int  j  =  ordered  +  1;  j  <  i;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
330	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
331	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
332	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[j  +  1;  j  <  lI.length;  ++j)  {  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lI  =  lTData[j  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lI  =  lTData[j  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    final    double[]    lI    =    lTData[j    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  ']'  expected	160	None	replace
333	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  final  double[]  lI  =  lTData[j  +  1;  j  <  lI.length;  ++j)  {  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  final  double[]  lI  =  lTData[j  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lI.length;  ++j)  {  final  double[]  lI  =  lTData[j  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    final    double[]    lI    =    lTData[j    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  ']'  expected	160	None	replace
334	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[j  +  1;  j  <  lI.length;  ++j)  {  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lJ  =  lTData[j  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lJ  =  lTData[j  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    final    double[]    lI    =    lTData[j    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  ']'  expected	160	None	replace
335	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(inverseSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(inverseSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  *  Math.max(inverseSymmetryThreshold);	  double    order    =    inverseSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
336	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(relativeSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
337	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  int  j  =  i  +  1;  j  <  0;  ++j)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  int  j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  int  j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    (int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
338	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  (int  j  =  i  +  1;  j  <  0;  ++j)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  (int  j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  order;  ++j)  {  (int  j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    (int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
339	[BUG]  [BUGGY]  (int  j  =  i  +  1;  j  <  0;  ++j)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  (int  j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	(int  j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    (int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
340	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  for(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  for(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    lI.length    +    1;    j    <    0;    ++j)    {    for(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
341	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  For(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  For(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    lI.length    +    1;    j    <    0;    ++j)    {    For(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	19	None	add
342	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    lI.length    +    1;    j    <    0;    ++j)    {    int  j  =  lI.length  +  1;  j  <  0;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	19	None	add
343	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  final  double[]  lI  =  lI.length  +  1;  j  <  0;  ++j)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  final  double[]  lI  =  lI.length  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    lI.length    +    1;    j    <    0;    ++j)    {    final  double[]  lI  =  lI.length  +  1;  j  <  0;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  type	19	None	add
344	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef	  for(int    i    =    0;    j    <    order;    ++i)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDef    	non-compiled	[CE]  '('  or  '['  expected	132	None	replace
345	[BUG]  [BUGGY]  for(int  j  =  i  +  1,  j  <  1;  ++j)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1,  j  <  1;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1,  j  <  1;  ++j)  {	  for(int    j    =    i    +    1,    j    <    2;    ++j)    {    	non-compiled	[CE]  ';'  expected	148	None	replace
346	[BUG]  [BUGGY]  for(int  j  =  order  +  1,  j  <  2;  ++j)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1,  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  order  +  1,  j  <  2;  ++j)  {	  for(int    j    =    i    +    1,    j    <    2;    ++j)    {    	non-compiled	[CE]  ';'  expected	148	None	replace
347	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
348	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lI.length  +  1;  j  <  i;  ++j)  {	  for(int    j    =    order    +    1;    j    <    i;    ++j)    {    	compilable	  [FE]  AssertionError  	107	6	replace
349	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  i;  ++j)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  +  1;  j  <  i;  ++j)  {	  for(int    j    =    order    +    1;    j    <    i;    ++j)    {    	compilable	  [FE]  AssertionError  	107	6	replace
350	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lTData.length  +  1;  j  <  i;  ++j)  {	  for(int    j    =    order    +    1;    j    <    i;    ++j)    {    	compilable	  [FE]  AssertionError  	107	6	replace
351	[BUG]  [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  i;  ++j)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lTData.length  +  1;  j  <  i;  ++j)  {	  for(int    j    =    order    +    1;    j    <    i;    ++j)    {    	compilable	  [FE]  AssertionError  	107	6	replace
352	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    2;    ++j)    {    for(int  j  =  0;  j  <  2;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
353	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  For(int  j  =  0;  j  <  2;  ++j)  {  [CE]  '.class'  expected  [FE]      NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  For(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    2;    ++j)    {    For(int  j  =  0;  j  <  2;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	23	None	add
354	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2)  {  [CE]  ';'  expected  [FE]        NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  for(int  j  =  0;  j  <  2)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    2;    ++j)    {    for(int  j  =  0;  j  <  2)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
355	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
356	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold));	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
357	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  Math.max(relativeSymmetryThreshold));	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
358	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  size;  ++j)  {  [CE]  cannot  find  symbol  size  [FE]        NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  size;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  size;  ++j)  {	  for(int    j    =    0;    j    <    q;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  size	109	None	replace
359	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotMissing  [CE]  '('  or  '['  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotMissing  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotMissing	  for(int    j    =    i    +    1;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[j];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	74	None	replace
360	[BUG]  [BUGGY]  int  order  =  lTData[i  +  1];  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  lTData[i  +  1];  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  lTData[i  +  1];	  int    order    =    lTData.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
361	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
362	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold);	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
363	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  0);	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
364	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(inverseSymmetryThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(inverseSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(inverseSymmetryThreshold,  absolutePositivityThreshold);	  int    order    =    absolutePositivityThreshold    *    Math.max(inverseSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
365	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[j];  [CE]  illegal  start  of  type  [FE]          NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[j];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[j];	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData    =    lTData[j];    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
366	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  double[]  lTData  =  lTData[j];  [CE]  incompatible  types  [FE]            NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  double[]  lTData  =  lTData[j];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  double[]  lTData  =  lTData[j];	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData    =    lTData[j];    	non-compiled	[CE]  incompatible  types	119	None	replace
367	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  final  double[]  lTData  =  lTData[j];  [CE]  incompatible  types  [FE]              NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  final  double[]  lTData  =  lTData[j];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lI.length;  ++j)  {  final  double[]  lTData  =  lTData[j];	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData    =    lTData[j];    	non-compiled	[CE]  incompatible  types	119	None	replace
368	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lTData.length  +  1;  j  <  2;  ++j)  {	  for(int    j    =    order    +    1;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionError  	26	6	replace
369	[BUG]  [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  2;  ++j)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lTData.length  +  1;  j  <  2;  ++j)  {	  for(int    j    =    order    +    1;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionError  	26	6	replace
370	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1],  relativeSymmetryThreshold;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1],  relativeSymmetryThreshold;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i  +  1],  relativeSymmetryThreshold;	  final    double[][]    lTData    =    lTData[i    +    1],    absoluteSymmetryThreshold;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
371	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1],  absoluteSymmetryThreshold,  relativeSymmetryThreshold;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1],  absoluteSymmetryThreshold,  relativeSymmetryThreshold;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i  +  1],  absoluteSymmetryThreshold,  relativeSymmetryThreshold;	  final    double[][]    lTData    =    lTData[i    +    1],    absoluteSymmetryThreshold;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
372	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1],  computeSymmetryThreshold;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1],  computeSymmetryThreshold;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i  +  1],  computeSymmetryThreshold;	  final    double[][]    lTData    =    lTData[i    +    1],    absoluteSymmetryThreshold;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
373	[BUG]  [BUGGY]  int  j  =  i  +  1;  j  <  lTData.length;  ++j)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  i  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  i  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  >  expected	61	None	replace
374	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  int  j  =  0;  j  <  lTData[i].length;  ++j)  {  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  int  j  =  0;  j  <  lTData[i].length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lTData.length;  ++j)  {  int  j  =  0;  j  <  lTData[i].length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  ']'  expected	61	None	replace
375	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  lJ.length;  ++j)  {  [CE]  cannot  find  symbol  lJ  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  lJ.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  lJ.length;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lJ.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  lJ	56	None	replace
376	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  absolutePositivityThreshold,  relativeSymmetryThreshold;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i],  absolutePositivityThreshold,  relativeSymmetryThreshold;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i],  absolutePositivityThreshold,  relativeSymmetryThreshold;	  final    double[][]    lTData    =    lTData[i],    absolutePositivityThreshold;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
377	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  (int  j  =  0;  j  <  i;  ++j)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  (int  j  =  0;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    i;    ++j)    {    (int  j  =  0;  j  <  i;  ++j)  {	  	non-compiled	[CE]  ')'  expected	36	None	add
378	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  final  double[]  lTData  =  lTData[j];  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  final  double[]  lTData  =  lTData[j];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    i;    ++j)    {    final  double[]  lTData  =  lTData[j];	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
379	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lTData[i]));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lTData[i]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lTData[i]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
380	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[0]));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[0]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[0]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
381	[BUG]  [BUGGY]  for(int  j  =  i.length  +  1;  j  <  lTData.length;  ++j)  {  [CE]  int  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i.length  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i.length  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    lTData.length    +    1;    j    <    i.length;    ++j)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	90	None	replace
382	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[][]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[][]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  Not  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[][]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  Not	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotM    	non-compiled	[CE]  '('  or  '['  expected	49	None	replace
383	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  final  double[]  lTData  =  lTData[i  +  1;  j  <  2;  ++j)  {  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  final  double[]  lTData  =  lTData[i  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  2;  ++j)  {  final  double[]  lTData  =  lTData[i  +  1;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    final    double[]    lTData    =    lTData[i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  ']'  expected	149	None	replace
384	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  *  4];  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i  *  4];  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i  *  4];	  final    double[][]    lTData    =    lTData[i    *    1];    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
385	[BUG]  [BUGGY]  double  j  =  i  +  2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  j  =  i  +  2;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  j  =  i  +  2;	  double    j    =    i    +    1;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
386	[BUG]  [BUGGY]  double  j  =  i  +  1L;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  j  =  i  +  1L;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  j  =  i  +  1L;	  double    j    =    i    +    1;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
387	[BUG]  [BUGGY]  double  j  =  i  +  3;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  j  =  i  +  3;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  j  =  i  +  3;	  double    j    =    i    +    1;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
388	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  0;  j  <  0;  ++j)  {	  for(int    j    =    order    +    1;    j    <    0;    ++j)    {    	compilable	  [FE]  AssertionError  	16	6	replace
389	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  0;  ++j)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  0;  ++j)  {	  for(int    j    =    order    +    1;    j    <    0;    ++j)    {    	compilable	  [FE]  AssertionError  	16	6	replace
390	[BUG]  [BUGGY]  for(int  j  =  q  +  1;  j  <  0;  ++j)  {  [CE]  cannot  find  symbol  q  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  q  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  q  +  1;  j  <  0;  ++j)  {	  for(int    j    =    order    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  q	16	None	replace
391	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  li.length;  ++j)  {  [CE]  cannot  find  symbol  li  [FE]    NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  li.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  li.length;  ++j)  {	  for(int    j    =    0;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  li	34	None	replace
392	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  (int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  (int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    lI.length    +    1;    j    <    0;    ++j)    {    (int  j  =  lI.length  +  1;  j  <  0;  ++j)  {	  	non-compiled	[CE]  ')'  expected	19	None	add
393	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  final  double[]  lTData  =  i  +  1;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  final  double[]  lTData  =  i  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  0;  ++j)  {  final  double[]  lTData  =  i  +  1;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    final    double[]    lTData    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
394	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ  -  ltQ));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ  -  ltQ));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ  -  ltQ));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    ltQ));    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
395	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  Math.max(relativeSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
396	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(maxDelta));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(maxDelta));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(maxDelta));	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
397	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPos  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPos  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPos	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPos    	non-compiled	[CE]  '('  or  '['  expected	126	None	replace
398	[BUG]  [BUGGY]  int  j  =  i  +  1;  j  <  lI.length;  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  i  +  1;  j  <  lI.length;  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  i  +  1;  j  <  lI.length;	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  >  expected	66	None	replace
399	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotSymmetryException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotSymmetryException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotSymmetryException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetryException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
400	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  double[]  lTData  =  0;  j  <  lTData.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  double[]  lTData  =  0;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  double[]  lTData  =  0;  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    final    double[]    lTData    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  >  expected	99	None	replace
401	[BUG]  [BUGGY]  final  double[]  lTData  =  i  +  1;  j  <  lTData.length;  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  i  +  1;  j  <  lTData.length;  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  i  +  1;  j  <  lTData.length;	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    final    double[]    lTData    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  >  expected	99	None	replace
402	[BUG]  [BUGGY]  int  order  =  lI.length  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  lI.length  +  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  lI.length  +  1;	  int    order    =    lI.length;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
403	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    double[]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
404	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
405	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
406	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[i]  -  lIJ));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[i]  -  lIJ));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[i]  -  lIJ));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
407	[BUG]  [BUGGY]  int  order  =  lTData.length  -  2  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  lTData.length  -  2  +  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  lTData.length  -  2  +  1;	  int    order    =    lTData.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
408	[BUG]  [BUGGY]  for(int  j  =  q  +  1;  j  <  i;  ++j)  {  [CE]  cannot  find  symbol  q  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  q  +  1;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  q  +  1;  j  <  i;  ++j)  {	  for(int    j    =    order    +    1;    j    <    i;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  q	107	None	replace
409	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  final  double[]  lTData  =  lTData[j  +  1;  j  <  i;  ++j)  {  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  final  double[]  lTData  =  lTData[j  +  1;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    i;    ++j)    {    final  double[]  lTData  =  lTData[j  +  1;  j  <  i;  ++j)  {	  	non-compiled	[CE]  ']'  expected	106	None	add
410	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  (int  j  =  order  +  1;  j  <  i;  ++j)  {  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  i;  ++j)  {  (int  j  =  order  +  1;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    i;    ++j)    {    (int  j  =  order  +  1;  j  <  i;  ++j)  {	  	non-compiled	[CE]  ')'  expected	106	None	add
411	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
412	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
413	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  int  j  =  i  +  1;  j!=  0;  ++j)  {  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  int  j  =  i  +  1;  j!=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    i    +    1;    j!=    0;    ++j)    {    int  j  =  i  +  1;  j!=  0;  ++j)  {	  	non-compiled	[CE]  not  a  statement	104	None	add
414	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  For(int  j  =  i  +  1;  j!=  0;  ++j)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j!=  0;  ++j)  {  For(int  j  =  i  +  1;  j!=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    i    +    1;    j!=    0;    ++j)    {    For(int  j  =  i  +  1;  j!=  0;  ++j)  {	  	non-compiled	[CE]  '.class'  expected	104	None	add
415	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  for(int  j  =  lI.length  +  1;  j  <  2)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  2;  ++j)  {  for(int  j  =  lI.length  +  1;  j  <  2)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    lI.length    +    1;    j    <    2;    ++j)    {    for(int  j  =  lI.length  +  1;  j  <  2)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
416	[BUG]  [BUGGY]  for(int  j  =  i.length  +  1;  j  <  lI.length;  ++j)  {  [CE]  int  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i.length  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i.length  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    i.length;    ++j)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	71	None	replace
417	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	150	None	replace
418	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotSym  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotSym	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	150	None	replace
419	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  final  double[]  lTData  =  lTData[j  +  1;  j  <  lTData.length;  ++j)  {  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  final  double[]  lTData  =  lTData[j  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    lTData.length;    ++j)    {    final  double[]  lTData  =  lTData[j  +  1;  j  <  lTData.length;  ++j)  {	  	non-compiled	[CE]  ']'  expected	57	None	add
420	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  (int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  (int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    lTData.length;    ++j)    {    (int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {	  	non-compiled	[CE]  ')'  expected	57	None	add
421	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  (int  j  =  order  +  1;  j  <  0;  ++j)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  (int  j  =  order  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    0;    ++j)    {    (int  j  =  order  +  1;  j  <  0;  ++j)  {	  	non-compiled	[CE]  ')'  expected	15	None	add
422	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  final  double[]  lTData  =  lTData[j];  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  final  double[]  lTData  =  lTData[j];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    0;    ++j)    {    final  double[]  lTData  =  lTData[j];	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
423	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  absolutePositivityThreshold;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  0;  j  <  absolutePositivityThreshold;  ++j)  {	  for(int    j    =    0;    j    <    q;    ++j)    {    	compilable	  [FE]  AssertionError  	109	6	replace
424	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  absolutePositivityThreshold;  ++j)  {  [FE]  AssertionError  [FE]        NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  absolutePositivityThreshold;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  absolutePositivityThreshold;  ++j)  {	  for(int    j    =    0;    j    <    q;    ++j)    {    	compilable	  [FE]  AssertionError  	109	6	replace
425	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1,  relativeSymmetryThreshold;  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1,  relativeSymmetryThreshold;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i  +  1,  relativeSymmetryThreshold;	  final    double[][]    lTData    =    lTData[i    +    1],    absoluteSymmetryThreshold;    	non-compiled	[CE]  ']'  expected	120	None	replace
426	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  order;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lTData.length  +  1;  j  <  order;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lTData.length;    ++j)    {    	compilable	  [FE]  AssertionError  	58	6	replace
427	[BUG]  [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  order;  ++j)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  order;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lTData.length  +  1;  j  <  order;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lTData.length;    ++j)    {    	compilable	  [FE]  AssertionError  	58	6	replace
428	[BUG]  [BUGGY]  int  order  =  lTData.length  /  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  lTData.length  /  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  lTData.length  /  1;	  int    order    =    lTData.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
429	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  q;  ++j)  {  final  int  j  =  0;  j  <  q;  ++j)  {  [CE]  >  expected  [FE]        NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  q;  ++j)  {  final  int  j  =  0;  j  <  q;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  q;  ++j)  {  final  int  j  =  0;  j  <  q;  ++j)  {	  for(int    j    =    0;    j    <    order;    ++j)    {    final    int    j    =    0;    j    <    order;    ++j)    {    	non-compiled	[CE]  >  expected	118	None	replace
430	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  final  int  j  =  0;  j  <  i;  ++j)  {  [CE]  >  expected  [FE]          NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  final  int  j  =  0;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  i;  ++j)  {  final  int  j  =  0;  j  <  i;  ++j)  {	  for(int    j    =    0;    j    <    order;    ++j)    {    final    int    j    =    0;    j    <    order;    ++j)    {    	non-compiled	[CE]  >  expected	118	None	replace
431	[BUG]  [BUGGY]  double  order  =  lTData.length  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  lTData.length  +  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  lTData.length  +  1;	  double    order    =    lTData.length;    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
432	[BUG]  [BUGGY]  int  order  =  inverseSymmetryThreshold  *  Math.max(lI,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  inverseSymmetryThreshold  *  Math.max(lI,  relativeSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  inverseSymmetryThreshold  *  Math.max(lI,  relativeSymmetryThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    lI);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
433	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(lI,  inverseSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(lI,  inverseSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.min(lI,  inverseSymmetryThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    lI);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
434	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  (int  j  =  0;  j  <  i);  ++j)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  (int  j  =  0;  j  <  i);  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  i;  ++j)  {  (int  j  =  0;  j  <  i);  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    (int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
435	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  final  double[]  lTData  =  lTData[j];  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  final  double[]  lTData  =  lTData[j];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  final  double[]  lTData  =  lTData[j];	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    (int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  incompatible  types	95	None	replace
436	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
437	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  i  +  1;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lTData.length  +  1;  j  <  i  +  1;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	compilable	  [FE]  AssertionError  	59	6	replace
438	[BUG]  [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  i  +  1;  ++j)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  i  +  1;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lTData.length  +  1;  j  <  i  +  1;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	compilable	  [FE]  AssertionError  	59	6	replace
439	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  2;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  i  +  2;  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	compilable	  [FE]  AssertionError  	59	5	replace
440	[BUG]  [BUGGY]  for(int  j  =  i  +  2;  j  <  lTData.length;  ++j)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  2;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  2;  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	compilable	  [FE]  AssertionError  	59	5	replace
441	[BUG]  [BUGGY]  For(int  j  =  i  +  1;  j  <  2)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  For(int  j  =  i  +  1;  j  <  2)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	For(int  j  =  i  +  1;  j  <  2)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    For(int    j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
442	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  int  j  =  i  +  1;  j  <  0;  ++j)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  int  j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  int  j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
443	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  int  j  =  i  +  2;  j  <  0;  ++j)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  int  j  =  i  +  2;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  0;  ++j)  {  int  j  =  i  +  2;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
444	[BUG]  [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  absolutePositivityThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
445	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(maxDelta,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(maxDelta,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.min(maxDelta,  Math.max(relativeSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
446	[BUG]  [BUGGY]  final  double[]  lTData[]  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData[]  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData[]  =  lTData[i];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }	  final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
447	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  final  double[]  lTData[j  =  0;  j  <  2;  ++j)  {  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  final  double[]  lTData[j  =  0;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  2;  ++j)  {  final  double[]  lTData[j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    final    double[]    lTData[j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  ']'  expected	13	None	replace
448	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  final  double[]  lTData[j  =  i  +  1;  j  <  2;  ++j)  {  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  final  double[]  lTData[j  =  i  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  0;  ++j)  {  final  double[]  lTData[j  =  i  +  1;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    final    double[]    lTData[j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  ']'  expected	13	None	replace
449	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  ltI;  ++j)  {  [CE]  cannot  find  symbol  ltI  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  ltI;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  ltI;  ++j)  {	  for(int    j    =    order    +    1;    j    <    q;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  ltI	108	None	replace
450	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  (int  j  =  order  +  1;  j  <  2;  ++j)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  (int  j  =  order  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    2;    ++j)    {    (int  j  =  order  +  1;  j  <  2;  ++j)  {	  	non-compiled	[CE]  ')'  expected	25	None	add
451	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  final  double[]  lTData  =  lTData[j];  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  final  double[]  lTData  =  lTData[j];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    2;    ++j)    {    final  double[]  lTData  =  lTData[j];	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
452	[BUG]  [BUGGY]  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  int    order    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
453	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  Math.max(relativeSymmetryThreshold));	  int    order    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
454	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(relativeSymmetryThreshold));	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
455	[BUG]  [BUGGY]  double  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
456	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
457	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i]  [absolutePositivityThreshold];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lJ  =  lTData[i]  [absolutePositivityThreshold];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lJ  =  lTData[i]  [absolutePositivityThreshold];	  final    double[][]    lJ    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
458	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
459	[BUG]  [BUGGY]  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold);	  double    order    =    inverseSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
460	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  for(int  j  =  0;  j  <  lI.length);  ++j)  {  [CE]  ';'  expected  [FE]    NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  for(int  j  =  0;  j  <  lI.length);  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    lI.length;    ++j)    {    for(int  j  =  0;  j  <  lI.length);  ++j)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
461	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    j    =    i    +    1;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[j];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    Not    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
462	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPos  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPos  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPos	  for(int    j    =    i    +    1;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[j];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	74	None	replace
463	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef	  for(int    j    =    i    +    1;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[j];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	74	None	replace
464	[BUG]  [BUGGY]  (int  j  =  i  +  1;  j  <  lI.length;  ++j)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  (int  j  =  i  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	(int  j  =  i  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    (int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  ')'  expected	130	None	replace
465	[BUG]  [BUGGY]  int  j  =  lTQ  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lTQ  +  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lTQ  +  1;	  int    j    =    order    +    1;    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
466	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  /  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lI.length  /  1;  j  <  0;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    0;    ++j)    {    	compilable	  [FE]  AssertionError  	20	6	replace
467	[BUG]  [BUGGY]  for(int  j  =  lI.length  /  1;  j  <  0;  ++j)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  /  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  /  1;  j  <  0;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    0;    ++j)    {    	compilable	  [FE]  AssertionError  	20	6	replace
468	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i][relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lIJ));  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i][relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lIJ));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i][relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lIJ));	  final    double[][]    lTData    =    lTData[i][relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJ));    	non-compiled	[CE]  ']'  expected	6	None	replace
469	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetryMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
470	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativePositivityThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativePositivityThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(relativePositivityThreshold,  absolutePositivityThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
471	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  int  j  =  0;  j  <  lTData[j];  ++j)  {  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  int  j  =  0;  j  <  lTData[j];  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  int  j  =  0;  j  <  lTData[j];  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    (int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  ']'  expected	100	None	replace
472	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  (int  j  =  0;  j  <  lTData[i].length;  ++j)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  (int  j  =  0;  j  <  lTData[i].length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lTData.length;  ++j)  {  (int  j  =  0;  j  <  lTData[i].length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    (int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  ')'  expected	100	None	replace
473	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  0;  ++i)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPos  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  i  =  0;  j  <  0;  ++i)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPos  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  i  =  0;  j  <  0;  ++i)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPos	  for(int    i    =    0;    j    <    order;    ++i)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDef    	non-compiled	[CE]  '('  or  '['  expected	132	None	replace
474	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  final  double[]  lI  =  lTData[j  +  1;  j  <  lI.length;  ++j)  {  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  final  double[]  lI  =  lTData[j  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    lI.length;    ++j)    {    final  double[]  lI  =  lTData[j  +  1;  j  <  lI.length;  ++j)  {	  	non-compiled	[CE]  ']'  expected	72	None	add
475	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  final  double[]  lI  =  order  +  1;  j  <  lI.length;  ++j)  {  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  final  double[]  lI  =  order  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    lI.length;    ++j)    {    final  double[]  lI  =  order  +  1;  j  <  lI.length;  ++j)  {	  	non-compiled	[CE]  >  expected	72	None	add
476	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  0;  j  <  4;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  NotSymmetricMatrixException  	24	7	replace
477	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  4;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  4;  ++j)  {	  for(int    j    =    0;    j    <    2;    ++j)    {    	compilable	  [FE]  NotSymmetricMatrixException  	24	7	replace
478	[BUG]  [BUGGY]  double  order  =  absolutePositivityThreshold  *  Math.max(inverseSymmetryThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  absolutePositivityThreshold  *  Math.max(inverseSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  absolutePositivityThreshold  *  Math.max(inverseSymmetryThreshold,  absolutePositivityThreshold);	  double    order    =    inverseSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
479	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  matrix,  absoluteSymmetryThreshold);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i],  matrix,  absoluteSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i],  matrix,  absoluteSymmetryThreshold);	  final    double[][]    lTData    =    lTData[i],    matrix);    	non-compiled	[CE]  ';'  expected	152	None	replace
480	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  absolutePositivityThreshold);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i],  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i],  absolutePositivityThreshold);	  final    double[][]    lTData    =    lTData[i],    matrix);    	non-compiled	[CE]  ';'  expected	152	None	replace
481	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  computedL);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i],  computedL);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i],  computedL);	  final    double[][]    lTData    =    lTData[i],    matrix);    	non-compiled	[CE]  ';'  expected	152	None	replace
482	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  q;  ++j)  {  For(int  j  =  0;  j  <  q;  ++j)  {  [CE]  '.class'  expected  [FE]          NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  q;  ++j)  {  For(int  j  =  0;  j  <  q;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  q;  ++j)  {  For(int  j  =  0;  j  <  q;  ++j)  {	  for(int    j    =    0;    j    <    order;    ++j)    {    For(int    j    =    0;    j    <    order;    ++j)    {    	non-compiled	[CE]  '.class'  expected	39	None	replace
483	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(relativePositivityThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(relativePositivityThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  *  Math.max(relativePositivityThreshold,  absolutePositivityThreshold);	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
484	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i  +  1;  j  <  0;  ++j)  {  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lJ  =  lTData[i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lJ  =  lTData[i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    final    double[]    lTData    =    lTData[i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  ']'  expected	135	None	replace
485	[BUG]  [BUGGY]  int  order  =  lTData.length  -  1  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  lTData.length  -  1  +  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  lTData.length  -  1  +  1;	  int    order    =    lTData.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
486	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[][]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[][]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  Not  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[][]  lTData[]  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  Not	  for(int    i    =    0;    j    <    order;    ++i)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	112	None	replace
487	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
488	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  q;  ++j)  {  final  double[]  lTData  =  lTData[j];  [CE]  cannot  find  symbol  q  [FE]          NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  q;  ++j)  {  final  double[]  lTData  =  lTData[j];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  q;  ++j)  {  final  double[]  lTData  =  lTData[j];	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData    =    lTData[j];    	non-compiled	[CE]  cannot  find  symbol  q	119	None	replace
489	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }	  final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
490	[BUG]  [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
491	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  q;  ++j)  {  int  j  =  0;  j  <  q;  ++j)  {  [CE]  >  expected  [FE]                NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  q;  ++j)  {  int  j  =  0;  j  <  q;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  q;  ++j)  {  int  j  =  0;  j  <  q;  ++j)  {	  for(int    j    =    0;    j    <    order;    ++j)    {    int    j    =    0;    j    <    order;    ++j)    {    	non-compiled	[CE]  >  expected	42	None	replace
492	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  final  double[]  lTData  =  lTData[j];  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  final  double[]  lTData  =  lTData[j];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    2;    ++j)    {    final  double[]  lTData  =  lTData[j];	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
493	[BUG]  [BUGGY]  final  double[][]  lIJ  =  lTData[0];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lIJ  =  lTData[0];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lIJ  =  lTData[0];	  final    double[][]    lIJ    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
494	[BUG]  [BUGGY]  final  double[][]  lIJ  =  lTData[q];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lIJ  =  lTData[q];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lIJ  =  lTData[q];	  final    double[][]    lIJ    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
495	[BUG]  [BUGGY]  for(int  j  =  i  +  1,  j  <  4;  ++j)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1,  j  <  4;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1,  j  <  4;  ++j)  {	  for(int    j    =    i    +    1,    j    <    2;    ++j)    {    	non-compiled	[CE]  ';'  expected	148	None	replace
496	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  int  j  =  i  +  1;  j  >=  0;  ++j)  {  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  int  j  =  i  +  1;  j  >=  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    i    +    1;    j    >=    0;    ++j)    {    int  j  =  i  +  1;  j  >=  0;  ++j)  {	  	non-compiled	[CE]  not  a  statement	17	None	add
497	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[0];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[0];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  order;  ++j)  {  final  double[]  lTData[]  =  lTData[0];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM	  for(int    j    =    i    +    1;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[j];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotM    	non-compiled	[CE]  '('  or  '['  expected	75	None	replace
498	[BUG]  [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absoluteSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absoluteSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absoluteSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold));    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
499	[BUG]  [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold));    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
500	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  lIJ;  ++j)  {  [CE]  cannot  find  symbol  lIJ  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  lIJ;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  lIJ;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lIJ;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  lIJ	55	None	replace
501	[BUG]  [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  lIJ;  ++j)  {  [CE]  cannot  find  symbol  lIJ  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lTData.length  +  1;  j  <  lIJ;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lTData.length  +  1;  j  <  lIJ;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lIJ;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  lIJ	55	None	replace
502	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lIJ;  ++j)  {  [CE]  cannot  find  symbol  lIJ  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lIJ;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lIJ;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lIJ;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  lIJ	55	None	replace
503	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  lIJ;  ++j)  {  [CE]  cannot  find  symbol  lIJ  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  lIJ;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  +  1;  j  <  lIJ;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lIJ;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  lIJ	55	None	replace
504	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  /  2;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lI.length  /  2;  j  <  2;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionError  	28	6	replace
505	[BUG]  [BUGGY]  for(int  j  =  lI.length  /  2;  j  <  2;  ++j)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  /  2;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  /  2;  j  <  2;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionError  	28	6	replace
506	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  -  2;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lI.length  -  2;  j  <  2;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionError  	28	6	replace
507	[BUG]  [BUGGY]  for(int  j  =  lI.length  -  2;  j  <  2;  ++j)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  -  2;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  -  2;  j  <  2;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    2;    ++j)    {    	compilable	  [FE]  AssertionError  	28	6	replace
508	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[j][i];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[j][i];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[j][i];	  final    double[][]    lTData    =    lTData[i][i];    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
509	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i][j];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i][j];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i][j];	  final    double[][]    lTData    =    lTData[i][i];    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
510	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  double[]  lTData  =  lTData[i  +  1;  j  <  lTData.length;  ++j)  {  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  double[]  lTData  =  lTData[i  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  double[]  lTData  =  lTData[i  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    final    double[]    lTData    =    lTData[i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  ']'  expected	145	None	replace
511	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i  +  1;  j  <  lJ.length;  ++j)  {  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lJ  =  lTData[i  +  1;  j  <  lJ.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lJ  =  lTData[i  +  1;  j  <  lJ.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    final    double[]    lTData    =    lTData[i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  ']'  expected	145	None	replace
512	[BUG]  [BUGGY]  final  double[]  lI  =  lTData.length  +  1;  j  <  lI.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lI  =  lTData.length  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lI  =  lTData.length  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    final    double[]    lI    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  >  expected	129	None	replace
513	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i].length;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lI  =  lTData[i].length;  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lI  =  lTData[i].length;	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    final    double[]    lI    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
514	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  final  double[]  lTData[j  =  i  +  1;  j  <  0;  ++j)  {  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  final  double[]  lTData[j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  final  double[]  lTData[j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    final    double[]    lTData[j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  ']'  expected	45	None	replace
515	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  final  double[]  lTData[j  =  i  +  2;  j  <  0;  ++j)  {  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  final  double[]  lTData[j  =  i  +  2;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  >=  0;  ++j)  {  final  double[]  lTData[j  =  i  +  2;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    final    double[]    lTData[j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  ']'  expected	45	None	replace
516	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
517	[BUG]  [BUGGY]  int  j  =  lTData.length  /  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lTData.length  /  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lTData.length  /  1;	  int    j    =    lTData.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
518	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  final  double[]  lTData  =  lTData[j];  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  lTData.length;  ++j)  {  final  double[]  lTData  =  lTData[j];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    lTData.length;    ++j)    {    final  double[]  lTData  =  lTData[j];	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
519	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ")  [CE]  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ")  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ")	  for(int    j    =    i    +    1;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[j];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  	78	None	replace
520	[BUG]  [BUGGY]  double  order  =  inverseSymmetryThreshold  *  Math.max(matrix,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  inverseSymmetryThreshold  *  Math.max(matrix,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  inverseSymmetryThreshold  *  Math.max(matrix,  absolutePositivityThreshold);	  double    order    =    inverseSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
521	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
522	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	48	None	replace
523	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData.length  +  1;  j  <  lTData.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData.length  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData.length  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    final    double[]    lTData    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  >  expected	99	None	replace
524	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");	  for(int    j    =    i    +    1;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[j];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotS    	non-compiled	[CE]  incompatible  types	76	None	replace
525	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData  =  i  +  1;  j  <  0;  ++j)  {  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lTData  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    final    double[]    lTData    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
526	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  0;  ++j)  {  final  double[]  lTData  =  i  +  1;  j  <  0;  ++j)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  0;  ++j)  {  final  double[]  lTData  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  0;  ++j)  {  final  double[]  lTData  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    final    double[]    lTData    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
527	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[0];  if(lTData[0][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }	  final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
528	[BUG]  [BUGGY]  for(int  j  =  i  +  1,  j  <  order;  ++j)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1,  j  <  order;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1,  j  <  order;  ++j)  {	  for(int    j    =    i    +    1,    j    <    0;    ++j)    {    	non-compiled	[CE]  ';'  expected	154	None	replace
529	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
530	[BUG]  [BUGGY]  int  j  =  lI[i].length  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lI[i].length  +  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lI[i].length  +  1;	  int    j    =    lI.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
531	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  for(int  j  =  order  +  1;  j  <  2)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  2;  ++j)  {  for(int  j  =  order  +  1;  j  <  2)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    2;    ++j)    {    for(int  j  =  order  +  1;  j  <  2)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
532	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM	  for(int    j    =    0;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotM    	non-compiled	[CE]  '('  or  '['  expected	49	None	replace
533	[BUG]  [BUGGY]  double  order  =  lTData.length  -  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  lTData.length  -  2;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  lTData.length  -  2;	  double    order    =    lTData.length;    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
534	[BUG]  [BUGGY]  for(int  j  =  i  +  1,  j  <  0;  ++j)  {  final  int  j  =  i  +  1;  j  <  0;  ++j)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1,  j  <  0;  ++j)  {  final  int  j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1,  j  <  0;  ++j)  {  final  int  j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    (int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  ';'  expected	95	None	replace
535	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  (int  j  =  0;  j  <  i)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  (int  j  =  0;  j  <  i)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  i;  ++j)  {  (int  j  =  0;  j  <  i)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    (int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
536	[BUG]  [BUGGY]  for(int  j  =  i  +  1,  j  <  0;  ++j)  {  (int  j  =  i  +  1;  j  <  0;  ++j)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1,  j  <  0;  ++j)  {  (int  j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1,  j  <  0;  ++j)  {  (int  j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    (int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  ';'  expected	95	None	replace
537	[BUG]  [BUGGY]  final  double[][]  lJ  =  ltData[i];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lJ  =  ltData[i];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lJ  =  ltData[i];	  final    double[][]    lJ    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
538	[BUG]  [BUGGY]  int  order  =  matrix.relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  matrix.relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  matrix.relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
539	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  absolutePositivityThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
540	[BUG]  [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  for(int  j  =  lI.length  +  1;  j  <  0);  ++j)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  +  1;  j  <  0;  ++j)  {  for(int  j  =  lI.length  +  1;  j  <  0);  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    lI.length    +    1;    j    <    0;    ++j)    {    for(int  j  =  lI.length  +  1;  j  <  0);  ++j)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
541	[BUG]  [BUGGY]  double  j  =  order  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  j  =  order  +  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  j  =  order  +  1;	  double    j    =    i    +    1;    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
542	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  double[]  lTData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  double[]  lTData  =  lTData[i];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    lTData.length;    ++j)    {    final  double[]  lTData  =  lTData[i];	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
543	[BUG]  [BUGGY]  int  order  =  matrix.relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  matrix.relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  matrix.relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
544	[BUG]  [BUGGY]  for(int  j  =  i  +  1,  j  <  lTData.length;  ++j)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1,  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1,  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lTData.length);    ++j)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
545	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  (int  j  =  0;  j  <  2)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  (int  j  =  0;  j  <  2)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  2;  ++j)  {  (int  j  =  0;  j  <  2)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    (int    j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  ')'  expected	122	None	replace
546	[BUG]  [BUGGY]  final  int  j  =  i  +  1;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  int  j  =  i  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  int  j  =  i  +  1;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    (int    j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
547	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i  +  1;  j  <  2)  {  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i  +  1;  j  <  2)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i  +  1;  j  <  2)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    final    double[]    lTData    =    lTData[i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  ']'  expected	149	None	replace
548	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  0  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lTData.length;    ++j)    {    	compilable	  [FE]  NotSymmetricMatrixException  	58	7	replace
549	[BUG]  [BUGGY]  for(int  j  =  0  +  1;  j  <  lTData.length;  ++j)  {  [FE]  NotSymmetricMatrixException  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lTData.length;    ++j)    {    	compilable	  [FE]  NotSymmetricMatrixException  	58	7	replace
550	[BUG]  [BUGGY]  int  j  =  order  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  order  +  2;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  order  +  2;	  int    j    =    i    +    2;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
551	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException();  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetryMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
552	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI.length  -  1;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  0;  j  <  lI.length  -  1;  ++j)  {	  for(int    j    =    0;    j    <    lI.length;    ++j)    {    	compilable	  [FE]  NotSymmetricMatrixException  	22	7	replace
553	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lI.length  -  1;  ++j)  {  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI.length  -  1;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  lI.length  -  1;  ++j)  {	  for(int    j    =    0;    j    <    lI.length;    ++j)    {    	compilable	  [FE]  NotSymmetricMatrixException  	22	7	replace
554	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
555	[BUG]  [BUGGY]  final  double[][]  lTData  =  ltData[i  +  1];  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  ltData[i  +  1];  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  ltData[i  +  1];	  final    double[][]    lTData    =    lTData[i    +    2];    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
556	[BUG]  [BUGGY]  for(int  j  =  i  +  1,  j  <  lI.length;  ++j)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1,  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1,  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    for(int    j    =    i    +    1;    j    <    lI.length);    ++j)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
557	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  for(int  j  =  0;  j  <  li.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  lI.length;  ++j)  {  for(int  j  =  0;  j  <  li.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    lI.length;    ++j)    {    for(int  j  =  0;  j  <  li.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
558	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
559	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  absolutePositivityThreshold);	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
560	[BUG]  [BUGGY]  double  order  =  matrix.relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  matrix.relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  matrix.relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
561	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  0  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lI.length;    ++j)    {    	compilable	  [FE]  NotSymmetricMatrixException  	73	7	replace
562	[BUG]  [BUGGY]  for(int  j  =  0  +  1;  j  <  lI.length;  ++j)  {  [FE]  NotSymmetricMatrixException  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lI.length;    ++j)    {    	compilable	  [FE]  NotSymmetricMatrixException  	73	7	replace
563	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef	  for(int    i    =    0;    j    <    order;    ++i)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDef    	non-compiled	[CE]  '('  or  '['  expected	132	None	replace
564	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  matrix[i]));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  matrix[i]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  matrix[i]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
565	[BUG]  [BUGGY]  ((  RealMatrix)ltI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)ltI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)ltI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
566	[BUG]  [BUGGY]  ((  RealMatrix)ltData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)ltData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)ltData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lTData[i]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
567	[BUG]  [BUGGY]  ((  RealMatrix)ltData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  matrix[i]));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)ltData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  matrix[i]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)ltData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  matrix[i]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
568	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  For(int  j  =  i  +  1;  j  <  0;  ++j)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  For(int  j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  order;  ++j)  {  For(int  j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    For(int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  '.class'  expected	44	None	replace
569	[BUG]  [BUGGY]  For(int  j  =  i  +  1,  j  <  0;  ++j)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  For(int  j  =  i  +  1,  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	For(int  j  =  i  +  1,  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    For(int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  '.class'  expected	44	None	replace
570	[BUG]  [BUGGY]  if(lTData!=  null)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  if(lTData!=  null)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	if(lTData!=  null)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSym	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	150	None	replace
571	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  ==  absolutePositivityThreshold)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  ==  absolutePositivityThreshold)  {  throw  new  NotSym  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  ==  absolutePositivityThreshold)  {  throw  new  NotSym	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	150	None	replace
572	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  /  2;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  lI.length  /  2;  j  <  0;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    0;    ++j)    {    	compilable	  [FE]  AssertionError  	20	6	replace
573	[BUG]  [BUGGY]  for(int  j  =  lI.length  /  2;  j  <  0;  ++j)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  lI.length  /  2;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  lI.length  /  2;  j  <  0;  ++j)  {	  for(int    j    =    lI.length    +    1;    j    <    0;    ++j)    {    	compilable	  [FE]  AssertionError  	20	6	replace
574	[BUG]  [BUGGY]  double  order  =  inverseSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  inverseSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  inverseSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	  double    order    =    inverseSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
575	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  final  double[]  lTData  =  lTData[j];  for(int  j  =  0;  j  <  i;  ++j)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  i;  ++j)  {  final  double[]  lTData  =  lTData[j];  for(int  j  =  0;  j  <  i;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    0;    j    <    i;    ++j)    {    final  double[]  lTData  =  lTData[j];  for(int  j  =  0;  j  <  i;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
576	[BUG]  [BUGGY]  final  double[][]  lIJ  =  lTData[i]  [absolutePositivityThreshold];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lIJ  =  lTData[i]  [absolutePositivityThreshold];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lIJ  =  lTData[i]  [absolutePositivityThreshold];	  final    double[][]    lIJ    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
577	[BUG]  [BUGGY]  final  double[][]  lIJ  =  lTData[i]  [relativeSymmetryThreshold];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lIJ  =  lTData[i]  [relativeSymmetryThreshold];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lIJ  =  lTData[i]  [relativeSymmetryThreshold];	  final    double[][]    lIJ    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
578	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[i]));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[i]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[i]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
579	[BUG]  [BUGGY]  ((  RealMatrix)ltData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[i]));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)ltData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[i]));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)ltData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[i]));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData[i]));    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
580	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  q;  ++j)  {  final  int  j  =  0;  j  <  q;  ++j)  {  }  [CE]  >  expected  [FE]        NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  q;  ++j)  {  final  int  j  =  0;  j  <  q;  ++j)  {  }  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  q;  ++j)  {  final  int  j  =  0;  j  <  q;  ++j)  {  }	  for(int    j    =    0;    j    <    order;    ++j)    {    final    int    j    =    0;    j    <    order;    ++j)    {    	non-compiled	[CE]  >  expected	118	None	replace
581	[BUG]  [BUGGY]  final  double[]  lTData[j  =  i  +  1;  j  <  0,  ++j)  {  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData[j  =  i  +  1;  j  <  0,  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData[j  =  i  +  1;  j  <  0,  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    final    double[]    lTData[j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  ']'  expected	45	None	replace
582	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  Math.max(relativeSymmetryThreshold),  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  Math.max(relativeSymmetryThreshold),  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  Math.max(relativeSymmetryThreshold),  Math.max(relativeSymmetryThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
583	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ltQ;  ++j)  {  int  j  =  0;  j  <  ltQ;  ++j)  {  [CE]  >  expected  [FE]                NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  ltQ;  ++j)  {  int  j  =  0;  j  <  ltQ;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  ltQ;  ++j)  {  int  j  =  0;  j  <  ltQ;  ++j)  {	  for(int    j    =    0;    j    <    order;    ++j)    {    int    j    =    0;    j    <    order;    ++j)    {    	non-compiled	[CE]  >  expected	42	None	replace
584	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  >  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	add	for(int  j  =  i  +  1;  j  >  0;  ++j)  {	  for(int    j    =    i    +    1;    j    >=    0;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	7	replace
585	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  >  0;  ++j)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  >  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  >  0;  ++j)  {	  for(int    j    =    i    +    1;    j    >=    0;    ++j)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	7	replace
586	[BUG]  [BUGGY]  int  order  =  lI[i].length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  order  =  lI[i].length;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  order  =  lI[i].length;	  int    order    =    lI.length;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
587	[BUG]  [BUGGY]  final  double[]  lI  =  lI  +  1;  j  <  lI.length;  ++j)  {  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lI  =  lI  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lI  =  lI  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    final    double[]    lI    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  >  expected	129	None	replace
588	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " "));  }  [CE]  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " "));  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " "));  }	  for(int    i    =    0;    j    <    order;    ++i)    {    final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    Not    	non-compiled	[CE]  	101	None	replace
589	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  2;  ++j)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  For(int  j  =  0;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	For(int  j  =  0;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    For(int    j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
590	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  0;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    0;    ++j)    {    final  double[][]  lTData  =  lTData[j];	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
591	[BUG]  [BUGGY]  for(int  j  =  0,  j  <  2;  ++j)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0,  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0,  j  <  2;  ++j)  {	  for(int    j    =    i    +    1,    j    <    2;    ++j)    {    	non-compiled	[CE]  ';'  expected	148	None	replace
592	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryMatrixException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetryMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
593	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    j    =    i    +    1;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[j];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    Not    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
594	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  order.length;  ++j)  {  [CE]  int  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  order.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  order.length;  ++j)  {	  for(int    j    =    order    +    1;    j    <    lJ.length;    ++j)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	56	None	replace
595	[BUG]  [BUGGY]  Integer  j  =  i  +  1;  j  <  lI.length;  ++j)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  Integer  j  =  i  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	Integer  j  =  i  +  1;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  >  expected	66	None	replace
596	[BUG]  [BUGGY]  for(int  j  =  i  +  1,  j  <  2)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1,  j  <  2)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1,  j  <  2)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    for(int    j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
597	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  Math.max(relativeSymmetryThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  *  Math.max(matrix,  Math.max(relativeSymmetryThreshold));	  double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
598	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  lI.length;  ++j)  {  (int  j  =  0;  j  <  lI.length;  ++j)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  For(int  j  =  0;  j  <  lI.length;  ++j)  {  (int  j  =  0;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	For(int  j  =  0;  j  <  lI.length;  ++j)  {  (int  j  =  0;  j  <  lI.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    (int    j    =    i    +    1;    j    <    lI.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	130	None	replace
599	[BUG]  [BUGGY]  if(lTData!=  null)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  if(lTData!=  null)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	if(lTData!=  null)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '('  or  '['  expected	157	None	replace
600	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  for(int  j  =  i  +  1;  j  <  2)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  0;  ++j)  {  for(int  j  =  i  +  1;  j  <  2)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  0;  ++j)  {  for(int  j  =  i  +  1;  j  <  2)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    for(int    j    =    i    +    1;    j    <    2)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
601	[BUG]  [BUGGY]  int  j  =  lI[i]  /  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  lI[i]  /  1;  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  lI[i]  /  1;	  int    j    =    lI[i]    +    1;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
602	[BUG]  [BUGGY]  Integer  j  =  i  +  1;  j  <  lTData.length;  ++j)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  Integer  j  =  i  +  1;  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	Integer  j  =  i  +  1;  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  >  expected	61	None	replace
603	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(ltQ  -  ltQ));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(ltQ  -  ltQ));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(ltQ  -  ltQ));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    ltQ));    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
604	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  itemCount;  ++j)  {  [CE]  cannot  find  symbol  itemCount  [FE]        NotSymmetricMatrixException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  0;  j  <  itemCount;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  0;  j  <  itemCount;  ++j)  {	  for(int    j    =    0;    j    <    q;    ++j)    {    	non-compiled	[CE]  cannot  find  symbol  itemCount	109	None	replace
605	[BUG]  [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  int  j  =  i  +  1;  j  <  0;  ++j)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1;  j  <  order;  ++j)  {  int  j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1;  j  <  order;  ++j)  {  int  j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
606	[BUG]  [BUGGY]  for(int  j  =  i  +  1,  j  <  0;  ++j)  {  int  j  =  i  +  1;  j  <  0;  ++j)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  i  +  1,  j  <  0;  ++j)  {  int  j  =  i  +  1;  j  <  0;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int  j  =  i  +  1,  j  <  0;  ++j)  {  int  j  =  i  +  1;  j  <  0;  ++j)  {	  for(int    j    =    i    +    1;    j    <    0;    ++j)    {    int    j    =    i    +    1;    j    <    0;    ++j)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
607	[BUG]  [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));	  int    order    =    relativeSymmetryThreshold    *    Math.max(inverseSymmetryThreshold,    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold));    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
608	[BUG]  [BUGGY]  Math.max(Math.abs(lI)),  Math.abs(lI));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  Math.max(Math.abs(lI)),  Math.abs(lI));  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	Math.max(Math.abs(lI)),  Math.abs(lI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lI));    	non-compiled	[CE]  ';'  expected	125	None	replace
609	[BUG]  [BUGGY]  if(lTData!=  null)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  if(lTData!=  null)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	if(lTData!=  null)  {  final  double[]  lTData[]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetricMatrixException();  }	  final    double[]    lTData[]    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetricMatrixException();    }    	non-compiled	[CE]  incompatible  types	77	None	replace
610	[BUG]  [BUGGY]  if(lTData!=  null)  {  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  if(lTData!=  null)  {  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	if(lTData!=  null)  {  final  double[]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    double[]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  incompatible  types	156	None	replace
611	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[]  lTData  =  lTData[i];  if(lTData[i][0]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  final    double[]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
612	[BUG]  [BUGGY]  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  final  double[]  lI  =  lTData[order  +  1;  j  <  lI.length;  ++j)  {  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  for(int  j  =  order  +  1;  j  <  lI.length;  ++j)  {  final  double[]  lI  =  lTData[order  +  1;  j  <  lI.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	for(int    j    =    order    +    1;    j    <    lI.length;    ++j)    {    final  double[]  lI  =  lTData[order  +  1;  j  <  lI.length;  ++j)  {	  	non-compiled	[CE]  ']'  expected	72	None	add
613	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[j];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotM	  for(int    j    =    i    +    1;    j    <    order;    ++j)    {    final    double[]    lTData[]    =    lTData[j];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotM    	non-compiled	[CE]  '('  or  '['  expected	75	None	replace
614	[BUG]  [BUGGY]  For(int  j  =  i  +  1,  j  <  lTData.length;  ++j)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  For(int  j  =  i  +  1,  j  <  lTData.length;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	For(int  j  =  i  +  1,  j  <  lTData.length;  ++j)  {	  for(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    For(int    j    =    i    +    1;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  '.class'  expected	60	None	replace
615	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryException( " ");  }  [BUGGY]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	final  double[][]  lTData  =  lTData[i  +  1];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotSymmetryException( " ");  }	  final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotSymmetryException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
616	[BUG]  [BUGGY]  int  j  =  i  +  1;  j  <  2;  ++j)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }        [BUGGY]  int  j  =  i  +  1;  j  <  2;  ++j)  {  [BUGGY]      final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	118	118	2	replace	int  j  =  i  +  1;  j  <  2;  ++j)  {	  for(int    j    =    i    +    1;    j    <    2;    ++j)    {    int    j    =    i    +    1;    j    <    2;    ++j)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
