projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getColumnDimension();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=absolutePositivityThreshold;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getColumnDimension();cachedL=null;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=true;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=Math.max(order,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=null;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=lTData;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix(lTData,lTData);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix[lTData.length];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107if(cachedL!=null){for(inti=0;i<order;++i){lTData[i][i]=lTData[i][i];}
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107if(cachedL!=null){for(inti=0;i<order;++i){lTData[i][i]=matrix.getData();}
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107if(cachedL!=null){for(intj=0;j<lTData.length;++j){cachedL[j]=Math.max(cachedL[j][j]);}
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix(cachedL,lTData);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=relativeSymmetryThreshold;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107double[][]lTData=matrix.getColumnDimension();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT-=lTData;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107CachedLcachedL[j]=Math.max(cachedL[j][j]);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedL[j]=Math.max(cachedL[j][j]);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107CachedLcachedL[j]=newRealMatrix(cachedL[j][j]);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT-=lTData.length;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedL-=lTData.length;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedL-=lTData;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=false;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=super.relativeSymmetryThreshold;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=null;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=lTData.length;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=lTData.trim();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix(lTData,lTQ);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix(lTData,order);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedL=newRealMatrix(lTData,lTData);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107CachedLcachedLT=newRealMatrix(lTData,lTData);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData[i][i]=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107LTData[][]cachedL=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107LtData[][]cachedL=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix[lTData.length-1];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix[lTData.length+1];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData[i][i]=lTData[i][i];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData[i][i]=cachedL.value(lTData[i][i]);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData[i][i]=cachedL.get(lTData[i][i]);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=absolutePositivityThreshold,cachedL;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=absolutePositivityThreshold+1;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix(lTData);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107CachedLcachedLT=newRealMatrix();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix(lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107double[][]lTData=matrix.getRowDimension();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107double[][]lTData=matrix.getLocalDimension();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107double[][]lTData=matrix.getLowerCachedDimension();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=absoluteSymmetryThreshold;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold-=relativeSymmetryThreshold;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=Math.max(relativeSymmetryThreshold,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=Math.max(cachedL,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=Math.max(order,cachedL,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=Math.max(relativeSymmetryThreshold,order,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getData(order);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getData(cachedL);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix(lTData,cachedL);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107CachedLcachedLT=newRealMatrix(lTData,cachedL);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix(cachedL,lTData,absoluteSymmetryThreshold);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedL=null;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getData();cachedL=null;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getDataDimension();cachedL=null;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getData();lTData=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getData();((RealMatrix)matrix).relativeSymmetryThreshold=absolutePositivityThreshold;lTData=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getData();((RealMatrix)matrix).relativeSymmetryThreshold=absolutePositivityThreshold;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getData();((RealMatrix)matrix).relativeSymmetryThreshold=absolutePositivityThreshold+lTData.length;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getData();((RealMatrix)matrix).relativeSymmetryThreshold=absolutePositivityThreshold?totalDelta:totalDelta;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getRowDimension();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getDataDimension();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=lTData.cloneTree();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix(cachedL,lTData,absolutePositivityThreshold);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=Math.min(order,cachedL.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getColumnDimension();cachedL=cachedL;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getColumnDimension();cachedL=cachedLT;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107for(inti=0;i<order;++i){lTData[i][i]=matrix.getData();}
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getData();((RealMatrix)matrix).data=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getData();((RealMatrix)matrix).cachedL=lTData;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getData();((RealMatrix)matrix).cachedL=null;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=super.relativeSymmetryThreshold=true;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix(lTData,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix(cachedL);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix(calendar);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107if(cachedL!=null){for(intj=0;j<lTData.length;++j){cachedL[j]=Math.min(cachedL[j][j]);}
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107if(cachedL!=null){for(intj=0;j<order;++j){cachedL[j]=Math.max(cachedL[j][j]);}
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107if(cachedL!=null){for(intj=0;j<lTData.length;++j){cachedL[j]=Math.min(cachedL[j][j],absolutePositivityThreshold);}
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107for(inti=0;i<order;++i){lTData[i][i]=lTData[i][i];}
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107if(cachedL!=null){for(inti=0;i<order;++i){lTData[i][i]=newdouble[lTData[i][i];}
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getDataLength();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107double[][]lTData=matrix.getSymmetryDimension();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold=absolutePositivityThreshold.doubleValue();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData[i][i]=cachedL.clone();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData[i][i]=cachedL[i];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107double[][]lTData=matrix.getLargerDimension();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getDataRef();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold-=absolutePositivityThreshold;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107((RealMatrix)lTData).relativeSymmetryThreshold-absolutePositivityThreshold;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107LTData[i][i]=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107LtTData[i][i]=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107if(lTData!=null){for(intj=0;j<lTData.length;++j){cachedL[j]=Math.max(cachedL[j][j]);}
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107if(lTData!=null){for(intj=0;j<cachedL.length;++j){cachedL[j]=Math.max(cachedL[j][j]);}
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getData();lTData=matrix.getData();cachedL=null;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107lTData=matrix.getData();LTData=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix(calendar,lTData);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedLT=newRealMatrix(cachedL,lTData,absolutePositiveThreshold);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java107cachedL=newRealMatrix();
