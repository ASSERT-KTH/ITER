bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  CachedL  cachedL[j]  =  Math.max(cachedL[j][j]);  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  CachedL  cachedL[j]  =  Math.max(cachedL[j][j]);  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	CachedL  cachedL[j]  =  Math.max(cachedL[j][j]);	      if(cachedL!=    null)    {    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    cachedL[j]    =    Math.max(cachedL[j][j]);    }    	non-compiled	[CE]  ']'  expected	12	None	replace
2	[BUG]  [BUGGY]  cachedL[j]  =  Math.max(cachedL[j][j]);  [CE]  cannot  find  symbol  j  [FE]              AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedL[j]  =  Math.max(cachedL[j][j]);  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedL[j]  =  Math.max(cachedL[j][j]);	      if(cachedL!=    null)    {    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    cachedL[j]    =    Math.max(cachedL[j][j]);    }    	non-compiled	[CE]  cannot  find  symbol  j	12	None	replace
3	[BUG]  [BUGGY]  CachedL  cachedL[j]  =  new  RealMatrix(cachedL[j][j]);  [CE]  ']'  expected  [FE]                AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  CachedL  cachedL[j]  =  new  RealMatrix(cachedL[j][j]);  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	CachedL  cachedL[j]  =  new  RealMatrix(cachedL[j][j]);	      if(cachedL!=    null)    {    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    cachedL[j]    =    Math.max(cachedL[j][j]);    }    	non-compiled	[CE]  ']'  expected	12	None	replace
4	[BUG]  [BUGGY]  cachedLT  -=  lTData.length;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  -=  lTData.length;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  -=  lTData.length;	  cachedLT    -=    lTData;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	18	None	replace
5	[BUG]  [BUGGY]  cachedL  -=  lTData.length;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedL  -=  lTData.length;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedL  -=  lTData.length;	  cachedLT    -=    lTData;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	18	None	replace
6	[BUG]  [BUGGY]  cachedL  -=  lTData;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedL  -=  lTData;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedL  -=  lTData;	  cachedLT    -=    lTData;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	18	None	replace
7	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  false;  [CE]  inconvertible  types  [FE]              AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  false;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  false;	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    true;    	non-compiled	[CE]  inconvertible  types	4	None	replace
8	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  super.relativeSymmetryThreshold;  [CE]  inconvertible  types  [FE]                AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  super.relativeSymmetryThreshold;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  super.relativeSymmetryThreshold;	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    true;    	non-compiled	[CE]  inconvertible  types	4	None	replace
9	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  null;  [CE]  inconvertible  types  [FE]                  AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  null;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  null;	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    true;    	non-compiled	[CE]  inconvertible  types	4	None	replace
10	[BUG]  [BUGGY]  cachedLT  =  lTData.length;  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  lTData.length;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  lTData.length;	  cachedLT    =    lTData;    	non-compiled	[CE]  incompatible  types	6	None	replace
11	[BUG]  [BUGGY]  cachedLT  =  lTData.trim();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  lTData.trim();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  lTData.trim();	  cachedLT    =    lTData;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
12	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix(lTData,  lTQ);  [CE]  cannot  find  symbol  lTQ  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  new  RealMatrix(lTData,  lTQ);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix(lTData,  lTQ);	  cachedLT    =    new    RealMatrix(lTData,    lTData);    	non-compiled	[CE]  cannot  find  symbol  lTQ	8	None	replace
13	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix(lTData,  order);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]              AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  new  RealMatrix(lTData,  order);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix(lTData,  order);	  cachedLT    =    new    RealMatrix(lTData,    lTData);    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	8	None	replace
14	[BUG]  [BUGGY]  cachedL  =  new  RealMatrix(lTData,  lTData);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]                AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedL  =  new  RealMatrix(lTData,  lTData);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedL  =  new  RealMatrix(lTData,  lTData);	  cachedLT    =    new    RealMatrix(lTData,    lTData);    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	8	None	replace
15	[BUG]  [BUGGY]  CachedL  cachedLT  =  new  RealMatrix(lTData,  lTData);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  CachedL  cachedLT  =  new  RealMatrix(lTData,  lTData);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	CachedL  cachedLT  =  new  RealMatrix(lTData,  lTData);	  cachedLT    =    new    RealMatrix(lTData,    lTData);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
16	[BUG]  [BUGGY]  lTData[i][i]  =  matrix.getData();  [CE]  cannot  find  symbol  i  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData[i][i]  =  matrix.getData();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData[i][i]  =  matrix.getData();	      if(cachedL!=    null)    {    for(int    i    =    0;    i    <    order;    ++i)    {    lTData[i][i]    =    matrix.getData();    }    	non-compiled	[CE]  cannot  find  symbol  i	11	None	replace
17	[BUG]  [BUGGY]  LTData[][]  cachedL  =  matrix.getData();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  LTData[][]  cachedL  =  matrix.getData();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	LTData[][]  cachedL  =  matrix.getData();	      if(cachedL!=    null)    {    for(int    i    =    0;    i    <    order;    ++i)    {    lTData[i][i]    =    matrix.getData();    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
18	[BUG]  [BUGGY]  LtData[][]  cachedL  =  matrix.getData();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  LtData[][]  cachedL  =  matrix.getData();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	LtData[][]  cachedL  =  matrix.getData();	      if(cachedL!=    null)    {    for(int    i    =    0;    i    <    order;    ++i)    {    lTData[i][i]    =    matrix.getData();    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
19	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix[lTData.length  -  1];  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  new  RealMatrix[lTData.length  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix[lTData.length  -  1];	  cachedLT    =    new    RealMatrix[lTData.length];    	non-compiled	[CE]  incompatible  types	9	None	replace
20	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix[lTData.length  +  1];  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  new  RealMatrix[lTData.length  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix[lTData.length  +  1];	  cachedLT    =    new    RealMatrix[lTData.length];    	non-compiled	[CE]  incompatible  types	9	None	replace
21	[BUG]  [BUGGY]  lTData[i][i]  =  lTData[i][i];  [CE]  cannot  find  symbol  i  [FE]        AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData[i][i]  =  lTData[i][i];  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData[i][i]  =  lTData[i][i];	      if(cachedL!=    null)    {    for(int    i    =    0;    i    <    order;    ++i)    {    lTData[i][i]    =    lTData[i][i];    }    	non-compiled	[CE]  cannot  find  symbol  i	10	None	replace
22	[BUG]  [BUGGY]  lTData[i][i]  =  cachedL.value(lTData[i][i]);  [CE]  cannot  find  symbol  i  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData[i][i]  =  cachedL.value(lTData[i][i]);  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData[i][i]  =  cachedL.value(lTData[i][i]);	      if(cachedL!=    null)    {    for(int    i    =    0;    i    <    order;    ++i)    {    lTData[i][i]    =    lTData[i][i];    }    	non-compiled	[CE]  cannot  find  symbol  i	10	None	replace
23	[BUG]  [BUGGY]  lTData[i][i]  =  cachedL.get(lTData[i][i]);  [CE]  cannot  find  symbol  i  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData[i][i]  =  cachedL.get(lTData[i][i]);  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData[i][i]  =  cachedL.get(lTData[i][i]);	      if(cachedL!=    null)    {    for(int    i    =    0;    i    <    order;    ++i)    {    lTData[i][i]    =    lTData[i][i];    }    	non-compiled	[CE]  cannot  find  symbol  i	10	None	replace
24	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold,  cachedL;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold,  cachedL;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold,  cachedL;	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  ';'  expected	2	None	replace
25	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  1;  [CE]  inconvertible  types  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  1;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  1;	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  inconvertible  types	2	None	replace
26	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix(lTData);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  new  RealMatrix(lTData);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix(lTData);	  cachedLT    =    new    RealMatrix();    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	7	None	replace
27	[BUG]  [BUGGY]  CachedL  cachedLT  =  new  RealMatrix();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  CachedL  cachedLT  =  new  RealMatrix();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	CachedL  cachedLT  =  new  RealMatrix();	  cachedLT    =    new    RealMatrix();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
28	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix(lTData.length);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]              AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  new  RealMatrix(lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix(lTData.length);	  cachedLT    =    new    RealMatrix();    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	7	None	replace
29	[BUG]  [BUGGY]  double[][]  lTData  =  matrix.getRowDimension();  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  double[][]  lTData  =  matrix.getRowDimension();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	double[][]  lTData  =  matrix.getRowDimension();	      double[][]    lTData    =    matrix.getColumnDimension();    	non-compiled	[CE]  incompatible  types	17	None	replace
30	[BUG]  [BUGGY]  double[][]  lTData  =  matrix.getLocalDimension();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  double[][]  lTData  =  matrix.getLocalDimension();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	double[][]  lTData  =  matrix.getLocalDimension();	      double[][]    lTData    =    matrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
31	[BUG]  [BUGGY]  double[][]  lTData  =  matrix.getLowerCachedDimension();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  double[][]  lTData  =  matrix.getLowerCachedDimension();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	double[][]  lTData  =  matrix.getLowerCachedDimension();	      double[][]    lTData    =    matrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
32	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absoluteSymmetryThreshold;  [CE]  inconvertible  types  [FE]        AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absoluteSymmetryThreshold;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  absoluteSymmetryThreshold;	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    	non-compiled	[CE]  inconvertible  types	16	None	replace
33	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  -  =  relativeSymmetryThreshold;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  -  =  relativeSymmetryThreshold;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  -  =  relativeSymmetryThreshold;	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
34	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.max(relativeSymmetryThreshold,  lTData.length);  [CE]  inconvertible  types  [FE]                AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.max(relativeSymmetryThreshold,  lTData.length);  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.max(relativeSymmetryThreshold,  lTData.length);	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    Math.max(order,    lTData.length);    	non-compiled	[CE]  inconvertible  types	5	None	replace
35	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.max(cachedL,  lTData.length);  [CE]  inconvertible  types  [FE]                  AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.max(cachedL,  lTData.length);  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.max(cachedL,  lTData.length);	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    Math.max(order,    lTData.length);    	non-compiled	[CE]  inconvertible  types	5	None	replace
36	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.max(order,  cachedL,  lTData.length);  [CE]  inconvertible  types  [FE]                    AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.max(order,  cachedL,  lTData.length);  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.max(order,  cachedL,  lTData.length);	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    Math.max(order,    lTData.length);    	non-compiled	[CE]  inconvertible  types	5	None	replace
37	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.max(relativeSymmetryThreshold,  order,  lTData.length);  [CE]  inconvertible  types  [FE]                      AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.max(relativeSymmetryThreshold,  order,  lTData.length);  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.max(relativeSymmetryThreshold,  order,  lTData.length);	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    Math.max(order,    lTData.length);    	non-compiled	[CE]  inconvertible  types	5	None	replace
38	[BUG]  [BUGGY]  lTData  =  matrix.getData(order);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData  =  matrix.getData(order);  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData  =  matrix.getData(order);	      lTData    =    matrix.getData();    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	14	None	replace
39	[BUG]  [BUGGY]  lTData  =  matrix.getData(cachedL);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData  =  matrix.getData(cachedL);  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData  =  matrix.getData(cachedL);	      lTData    =    matrix.getData();    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	14	None	replace
40	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix(lTData,  cachedL);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]        AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  new  RealMatrix(lTData,  cachedL);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix(lTData,  cachedL);	  cachedLT    =    new    RealMatrix(cachedL,    lTData);    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	15	None	replace
41	[BUG]  [BUGGY]  CachedL  cachedLT  =  new  RealMatrix(lTData,  cachedL);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  CachedL  cachedLT  =  new  RealMatrix(lTData,  cachedL);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	CachedL  cachedLT  =  new  RealMatrix(lTData,  cachedL);	  cachedLT    =    new    RealMatrix(cachedL,    lTData);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
42	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix(cachedL,  lTData,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  new  RealMatrix(cachedL,  lTData,  absoluteSymmetryThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix(cachedL,  lTData,  absoluteSymmetryThreshold);	  cachedLT    =    new    RealMatrix(cachedL,    lTData);    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	15	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedL  =  null;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	add	cachedL  =  null;	      lTData    =    matrix.getColumnDimension();    cachedL    =    null;    	compilable	  [FE]  AssertionError  	3	2	replace
44	[BUG]  [BUGGY]  cachedL  =  null;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedL  =  null;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedL  =  null;	      lTData    =    matrix.getColumnDimension();    cachedL    =    null;    	compilable	  [FE]  AssertionError  	3	2	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	add	lTData  =  matrix.getData();  cachedL  =  null;	      lTData    =    matrix.getColumnDimension();    cachedL    =    null;    	compilable	  [FE]  AssertionError  	3	2	replace
46	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData  =  matrix.getData();  cachedL  =  null;	      lTData    =    matrix.getColumnDimension();    cachedL    =    null;    	compilable	  [FE]  AssertionError  	3	2	replace
47	[BUG]  [BUGGY]  lTData  =  matrix.getDataDimension();  cachedL  =  null;  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData  =  matrix.getDataDimension();  cachedL  =  null;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData  =  matrix.getDataDimension();  cachedL  =  null;	      lTData    =    matrix.getColumnDimension();    cachedL    =    null;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]      lTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	add	        lTData    =    matrix.getData();    lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	13	2	add
49	[BUG]  [BUGGY]      lTData  =  matrix.getData();  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]      lTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	        lTData    =    matrix.getData();    lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	13	2	add
50	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  lTData  =  matrix.getData();  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]      AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  lTData  =  matrix.getData();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  lTData  =  matrix.getData();	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	13	None	add
51	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]        AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	13	None	add
52	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  lTData.length;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  lTData.length;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  lTData.length;	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	13	None	add
53	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold?  totalDelta  :  totalDelta;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold?  totalDelta  :  totalDelta;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold?  totalDelta  :  totalDelta;	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	13	None	add
54	[BUG]  [BUGGY]  lTData  =  matrix.getRowDimension();  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData  =  matrix.getRowDimension();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData  =  matrix.getRowDimension();	      lTData    =    matrix.getColumnDimension();    	non-compiled	[CE]  incompatible  types	1	None	replace
55	[BUG]  [BUGGY]  lTData  =  matrix.getDataDimension();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData  =  matrix.getDataDimension();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData  =  matrix.getDataDimension();	      lTData    =    matrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
56	[BUG]  [BUGGY]  cachedLT  =  lTData.cloneTree();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  lTData.cloneTree();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  lTData.cloneTree();	  cachedLT    =    lTData;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
57	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix(cachedL,  lTData,  absolutePositivityThreshold);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]        AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  new  RealMatrix(cachedL,  lTData,  absolutePositivityThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix(cachedL,  lTData,  absolutePositivityThreshold);	  cachedLT    =    new    RealMatrix(cachedL,    lTData);    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	15	None	replace
58	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.min(order,  cachedL.length);  [CE]  inconvertible  types  [FE]                AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.min(order,  cachedL.length);  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.min(order,  cachedL.length);	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    Math.max(order,    lTData.length);    	non-compiled	[CE]  inconvertible  types	5	None	replace
59	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension();  cachedL  =  cachedL;  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData  =  matrix.getColumnDimension();  cachedL  =  cachedL;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData  =  matrix.getColumnDimension();  cachedL  =  cachedL;	      lTData    =    matrix.getColumnDimension();    cachedL    =    null;    	non-compiled	[CE]  incompatible  types	3	None	replace
60	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension();  cachedL  =  cachedLT;  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData  =  matrix.getColumnDimension();  cachedL  =  cachedLT;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData  =  matrix.getColumnDimension();  cachedL  =  cachedLT;	      lTData    =    matrix.getColumnDimension();    cachedL    =    null;    	non-compiled	[CE]  incompatible  types	3	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  matrix.getData();  }  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  matrix.getData();  }  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  matrix.getData();  }	      if(cachedL!=    null)    {    for(int    i    =    0;    i    <    order;    ++i)    {    lTData[i][i]    =    matrix.getData();    }    	non-compiled	[CE]  incompatible  types	11	None	replace
62	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).data  =  matrix.getData();  [CE]  cannot  find  symbol  data  [FE]    AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).data  =  matrix.getData();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).data  =  matrix.getData();	  	non-compiled	[CE]  cannot  find  symbol  data	13	None	add
63	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).cachedL  =  lTData;  [CE]  cannot  find  symbol  cachedL  [FE]      AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).cachedL  =  lTData;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).cachedL  =  lTData;	  	non-compiled	[CE]  cannot  find  symbol  cachedL	13	None	add
64	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).cachedL  =  null;  [CE]  cannot  find  symbol  cachedL  [FE]        AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).cachedL  =  null;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).cachedL  =  null;	  	non-compiled	[CE]  cannot  find  symbol  cachedL	13	None	add
65	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  super.relativeSymmetryThreshold  =  true;  [CE]  inconvertible  types  [FE]              AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  super.relativeSymmetryThreshold  =  true;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  super.relativeSymmetryThreshold  =  true;	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    true;    	non-compiled	[CE]  inconvertible  types	4	None	replace
66	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix(lTData,  lTData.length);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  new  RealMatrix(lTData,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix(lTData,  lTData.length);	  cachedLT    =    new    RealMatrix(lTData,    lTData);    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	8	None	replace
67	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix(cachedL);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  new  RealMatrix(cachedL);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix(cachedL);	  cachedLT    =    new    RealMatrix();    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	7	None	replace
68	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix(calendar);  [CE]  cannot  find  symbol  calendar  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  new  RealMatrix(calendar);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix(calendar);	  cachedLT    =    new    RealMatrix();    	non-compiled	[CE]  cannot  find  symbol  calendar	7	None	replace
69	[BUG]  [BUGGY]  if(cachedL!=  null)  {  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  cachedL[j]  =  Math.min(cachedL[j][j]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  if(cachedL!=  null)  {  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  cachedL[j]  =  Math.min(cachedL[j][j]);  }  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	if(cachedL!=  null)  {  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  cachedL[j]  =  Math.min(cachedL[j][j]);  }	      if(cachedL!=    null)    {    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    cachedL[j]    =    Math.max(cachedL[j][j]);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
70	[BUG]  [BUGGY]  if(cachedL!=  null)  {  for(int  j  =  0;  j  <  order;  ++j)  {  cachedL[j]  =  Math.max(cachedL[j][j]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  if(cachedL!=  null)  {  for(int  j  =  0;  j  <  order;  ++j)  {  cachedL[j]  =  Math.max(cachedL[j][j]);  }  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	if(cachedL!=  null)  {  for(int  j  =  0;  j  <  order;  ++j)  {  cachedL[j]  =  Math.max(cachedL[j][j]);  }	      if(cachedL!=    null)    {    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    cachedL[j]    =    Math.max(cachedL[j][j]);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
71	[BUG]  [BUGGY]  if(cachedL!=  null)  {  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  cachedL[j]  =  Math.min(cachedL[j][j],  absolutePositivityThreshold);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  if(cachedL!=  null)  {  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  cachedL[j]  =  Math.min(cachedL[j][j],  absolutePositivityThreshold);  }  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	if(cachedL!=  null)  {  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  cachedL[j]  =  Math.min(cachedL[j][j],  absolutePositivityThreshold);  }	      if(cachedL!=    null)    {    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    cachedL[j]    =    Math.max(cachedL[j][j]);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  lTData[i][i];  }  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	add	for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  lTData[i][i];  }	      if(cachedL!=    null)    {    for(int    i    =    0;    i    <    order;    ++i)    {    lTData[i][i]    =    lTData[i][i];    }    	compilable	  [FE]  AssertionError  	10	2	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  lTData[i][i];  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  lTData[i][i];  }  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  lTData[i][i];  }	      if(cachedL!=    null)    {    for(int    i    =    0;    i    <    order;    ++i)    {    lTData[i][i]    =    lTData[i][i];    }    	compilable	  [FE]  AssertionError  	10	2	replace
74	[BUG]  [BUGGY]  if(cachedL!=  null)  {  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  new  double[lTData[i][i];  }  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  if(cachedL!=  null)  {  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  new  double[lTData[i][i];  }  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	if(cachedL!=  null)  {  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  new  double[lTData[i][i];  }	      if(cachedL!=    null)    {    for(int    i    =    0;    i    <    order;    ++i)    {    lTData[i][i]    =    lTData[i][i];    }    	non-compiled	[CE]  ']'  expected	10	None	replace
75	[BUG]  [BUGGY]  lTData  =  matrix.getDataLength();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData  =  matrix.getDataLength();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData  =  matrix.getDataLength();	      lTData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
76	[BUG]  [BUGGY]  double[][]  lTData  =  matrix.getSymmetryDimension();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  double[][]  lTData  =  matrix.getSymmetryDimension();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	double[][]  lTData  =  matrix.getSymmetryDimension();	      double[][]    lTData    =    matrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
77	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold.doubleValue();  [CE]  inconvertible  types  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold.doubleValue();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold.doubleValue();	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  inconvertible  types	2	None	replace
78	[BUG]  [BUGGY]  lTData[i][i]  =  cachedL.clone();  [CE]  cannot  find  symbol  i  [FE]        AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData[i][i]  =  cachedL.clone();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData[i][i]  =  cachedL.clone();	      if(cachedL!=    null)    {    for(int    i    =    0;    i    <    order;    ++i)    {    lTData[i][i]    =    lTData[i][i];    }    	non-compiled	[CE]  cannot  find  symbol  i	10	None	replace
79	[BUG]  [BUGGY]  lTData[i][i]  =  cachedL[i];  [CE]  cannot  find  symbol  i  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData[i][i]  =  cachedL[i];  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData[i][i]  =  cachedL[i];	      if(cachedL!=    null)    {    for(int    i    =    0;    i    <    order;    ++i)    {    lTData[i][i]    =    lTData[i][i];    }    	non-compiled	[CE]  cannot  find  symbol  i	10	None	replace
80	[BUG]  [BUGGY]  double[][]  lTData  =  matrix.getLargerDimension();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  double[][]  lTData  =  matrix.getLargerDimension();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	double[][]  lTData  =  matrix.getLargerDimension();	      double[][]    lTData    =    matrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
81	[BUG]  [BUGGY]  lTData  =  matrix.getDataRef();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  lTData  =  matrix.getDataRef();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	lTData  =  matrix.getDataRef();	      lTData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
82	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  -=  absolutePositivityThreshold;  [CE]  inconvertible  types  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  -=  absolutePositivityThreshold;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  -=  absolutePositivityThreshold;	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  inconvertible  types	2	None	replace
83	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  -  absolutePositivityThreshold;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  -  absolutePositivityThreshold;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  -  absolutePositivityThreshold;	      ((    RealMatrix)lTData).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  not  a  statement	2	None	replace
84	[BUG]  [BUGGY]  LTData[i][i]  =  matrix.getData();  [CE]  cannot  find  symbol  LTData  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  LTData[i][i]  =  matrix.getData();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	LTData[i][i]  =  matrix.getData();	      if(cachedL!=    null)    {    for(int    i    =    0;    i    <    order;    ++i)    {    lTData[i][i]    =    matrix.getData();    }    	non-compiled	[CE]  cannot  find  symbol  LTData	11	None	replace
85	[BUG]  [BUGGY]  LtTData[i][i]  =  matrix.getData();  [CE]  cannot  find  symbol  LtTData  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  LtTData[i][i]  =  matrix.getData();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	LtTData[i][i]  =  matrix.getData();	      if(cachedL!=    null)    {    for(int    i    =    0;    i    <    order;    ++i)    {    lTData[i][i]    =    matrix.getData();    }    	non-compiled	[CE]  cannot  find  symbol  LtTData	11	None	replace
86	[BUG]  [BUGGY]  if(lTData!=  null)  {  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  cachedL[j]  =  Math.max(cachedL[j][j]);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  if(lTData!=  null)  {  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  cachedL[j]  =  Math.max(cachedL[j][j]);  }  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	if(lTData!=  null)  {  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  cachedL[j]  =  Math.max(cachedL[j][j]);  }	      if(cachedL!=    null)    {    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    cachedL[j]    =    Math.max(cachedL[j][j]);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
87	[BUG]  [BUGGY]  if(lTData!=  null)  {  for(int  j  =  0;  j  <  cachedL.length;  ++j)  {  cachedL[j]  =  Math.max(cachedL[j][j]);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  if(lTData!=  null)  {  for(int  j  =  0;  j  <  cachedL.length;  ++j)  {  cachedL[j]  =  Math.max(cachedL[j][j]);  }  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	if(lTData!=  null)  {  for(int  j  =  0;  j  <  cachedL.length;  ++j)  {  cachedL[j]  =  Math.max(cachedL[j][j]);  }	      if(cachedL!=    null)    {    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    cachedL[j]    =    Math.max(cachedL[j][j]);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]      lTData  =  matrix.getData();  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	add	        lTData    =    matrix.getData();    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	13	2	add
89	[BUG]  [BUGGY]      lTData  =  matrix.getData();  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]      lTData  =  matrix.getData();  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	        lTData    =    matrix.getData();    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	13	2	add
90	[BUG]  [BUGGY]      lTData  =  matrix.getData();  LTData  =  matrix.getData();  [CE]  cannot  find  symbol  LTData  [FE]      AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]      lTData  =  matrix.getData();  LTData  =  matrix.getData();  [BUGGY]    cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	        lTData    =    matrix.getData();    LTData  =  matrix.getData();	  	non-compiled	[CE]  cannot  find  symbol  LTData	13	None	add
91	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix(calendar,  lTData);  [CE]  cannot  find  symbol  calendar  [FE]        AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  new  RealMatrix(calendar,  lTData);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix(calendar,  lTData);	  cachedLT    =    new    RealMatrix(cachedL,    lTData);    	non-compiled	[CE]  cannot  find  symbol  calendar	15	None	replace
92	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix(cachedL,  lTData,  absolutePositiveThreshold);  [CE]  cannot  find  symbol  absolutePositiveThreshold  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedLT  =  new  RealMatrix(cachedL,  lTData,  absolutePositiveThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix(cachedL,  lTData,  absolutePositiveThreshold);	  cachedLT    =    new    RealMatrix(cachedL,    lTData);    	non-compiled	[CE]  cannot  find  symbol  absolutePositiveThreshold	15	None	replace
93	[BUG]  [BUGGY]  cachedL  =  new  RealMatrix();  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]          AssertionError    [CONTEXT]    NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;    [BUGGY]  cachedL  =  new  RealMatrix();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedL  =  new  RealMatrix();	  cachedLT    =    new    RealMatrix();    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	7	None	replace
