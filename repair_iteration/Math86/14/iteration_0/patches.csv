bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    lTData  =  matrix.getColumnDimension();  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]    lTData  =  matrix.getColumnDimension();  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	    lTData  =  matrix.getColumnDimension();		non-compiled	[CE]  incompatible  types	29	None	add
2	[BUG]  [BUGGY]    ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [CE]  inconvertible  types  [FE]      AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]    ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	    ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold;		non-compiled	[CE]  inconvertible  types	29	None	add
3	[BUG]  [BUGGY]    lTData  =  matrix.getColumnDimension();  cachedL  =  null;  [CE]  incompatible  types  [FE]        AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]    lTData  =  matrix.getColumnDimension();  cachedL  =  null;  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	    lTData  =  matrix.getColumnDimension();  cachedL  =  null;		non-compiled	[CE]  incompatible  types	29	None	add
4	[BUG]  [BUGGY]    ((  RealMatrix)lTData).relativeSymmetryThreshold  =  true;  [CE]  inconvertible  types  [FE]          AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]    ((  RealMatrix)lTData).relativeSymmetryThreshold  =  true;  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	    ((  RealMatrix)lTData).relativeSymmetryThreshold  =  true;		non-compiled	[CE]  inconvertible  types	29	None	add
5	[BUG]  [BUGGY]    ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.max(order,  lTData.length);  [CE]  inconvertible  types  [FE]            AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]    ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.max(order,  lTData.length);  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	    ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.max(order,  lTData.length);		non-compiled	[CE]  inconvertible  types	29	None	add
6	[BUG]  [BUGGY]  cachedLT  =  lTData;  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]  cachedLT  =  lTData;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  lTData;	cachedLT  =  null;  	non-compiled	[CE]  incompatible  types	28	None	replace
7	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix();  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]      AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]  cachedLT  =  new  RealMatrix();  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix();	cachedLT  =  null;  	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	28	None	replace
8	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix(lTData,  lTData);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]        AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]  cachedLT  =  new  RealMatrix(lTData,  lTData);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix(lTData,  lTData);	cachedLT  =  null;  	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	28	None	replace
9	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix[lTData.length];  [CE]  incompatible  types  [FE]          AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]  cachedLT  =  new  RealMatrix[lTData.length];  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix[lTData.length];	cachedLT  =  null;  	non-compiled	[CE]  incompatible  types	28	None	replace
10	[BUG]  [BUGGY]    if(cachedL!=  null)  {  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  lTData[i][i];  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]    if(cachedL!=  null)  {  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  lTData[i][i];  }  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	    if(cachedL!=  null)  {  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  lTData[i][i];  }		non-compiled	[CE]  illegal  start  of  expression	29	None	add
11	[BUG]  [BUGGY]    if(cachedL!=  null)  {  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  matrix.getData();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]    if(cachedL!=  null)  {  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  matrix.getData();  }  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	    if(cachedL!=  null)  {  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i][i]  =  matrix.getData();  }		non-compiled	[CE]  illegal  start  of  expression	29	None	add
12	[BUG]  [BUGGY]    if(cachedL!=  null)  {  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  cachedL[j]  =  Math.max(cachedL[j][j]);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]    if(cachedL!=  null)  {  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  cachedL[j]  =  Math.max(cachedL[j][j]);  }  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	    if(cachedL!=  null)  {  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  cachedL[j]  =  Math.max(cachedL[j][j]);  }		non-compiled	[CE]  illegal  start  of  expression	29	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]    lTData  =  matrix.getData();  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	add	    lTData  =  matrix.getData();		compilable	  [FE]  AssertionError  	29	2	add
14	[BUG]  [BUGGY]    lTData  =  matrix.getData();  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]    lTData  =  matrix.getData();  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	    lTData  =  matrix.getData();		compilable	  [FE]  AssertionError  	29	2	add
15	[BUG]  [BUGGY]  cachedLT  =  new  RealMatrix(cachedL,  lTData);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]  cachedLT  =  new  RealMatrix(cachedL,  lTData);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  =  new  RealMatrix(cachedL,  lTData);	cachedLT  =  null;  	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	28	None	replace
16	[BUG]  [BUGGY]    ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  [CE]  inconvertible  types  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]    ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	    ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold;		non-compiled	[CE]  inconvertible  types	29	None	add
17	[BUG]  [BUGGY]    double[][]  lTData  =  matrix.getColumnDimension();  [CE]  incompatible  types  [FE]      AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]    double[][]  lTData  =  matrix.getColumnDimension();  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	    double[][]  lTData  =  matrix.getColumnDimension();		non-compiled	[CE]  incompatible  types	29	None	add
18	[BUG]  [BUGGY]  cachedLT  -=  lTData;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  [BUGGY]  cachedLT  -=  lTData;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	107	107	2	replace	cachedLT  -=  lTData;	cachedLT  =  null;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	28	None	replace
