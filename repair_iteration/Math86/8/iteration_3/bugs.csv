bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedL[i];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltI  =  cachedL[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltI  =  cachedL[i];	  final    double[][]    ltI    =    data[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	61	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltI.length  -  1;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  for(int  i  =  0;  i  <  ltI.length  -  1;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	for(int  i  =  0;  i  <  ltI.length  -  1;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }	  for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltI[i]    =    Math.sqrt(ltI[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	89	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltI.length  -  2;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  for(int  i  =  0;  i  <  ltI.length  -  2;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	for(int  i  =  0;  i  <  ltI.length  -  2;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }	  for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltI[i]    =    Math.sqrt(ltI[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	89	None	replace
4	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i],  inverse);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[i],  inverse);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[i],  inverse);	  final    double[][]    ltData    =    lTData[q],    inverse);    	non-compiled	[CE]  ';'  expected	62	None	replace
5	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[0],  inverse);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[0],  inverse);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[0],  inverse);	  final    double[][]    ltData    =    lTData[q],    inverse);    	non-compiled	[CE]  ';'  expected	62	None	replace
6	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  -  2];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	final  double[]  ltQ  =  lTData[q  -  2];	  final    double[]    ltQ    =    lTData[q    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	7	replace
7	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  -  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  -  2];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[q  -  2];	  final    double[]    ltQ    =    lTData[q    -    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	65	7	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	20	5	add
9	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	20	5	add
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	20	5	add
11	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	20	5	add
12	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	non-compiled	[CE]  ']'  expected	20	None	add
13	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	20	None	add
14	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[1];  final  double[]  ltQ  =  lTData[1];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[1];  final  double[]  ltQ  =  lTData[1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[1];    final  double[]  ltQ  =  lTData[1];	  	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	32	None	add
15	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[1];  final  double[]  ltQ  =  lTData[2];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[1];  final  double[]  ltQ  =  lTData[2];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[1];    final  double[]  ltQ  =  lTData[2];	  	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	32	None	add
16	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[1];  Final  double[]  ltQ  =  lTData[1];  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[1];  Final  double[]  ltQ  =  lTData[1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[1];    Final  double[]  ltQ  =  lTData[1];	  	non-compiled	[CE]  not  a  statement	32	None	add
17	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[q  *  1];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltQ[q  *  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltQ[q  *  1];	  final    double[]    ltQ    =    ltData[q    *    1];    	non-compiled	[CE]  incompatible  types	91	None	replace
18	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q  *  1];  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[q  *  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[q  *  1];	  final    double[]    ltQ    =    ltData[q    *    1];    	non-compiled	[CE]  incompatible  types	91	None	replace
19	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[i]  *  lJI;  [CE]  cannot  find  symbol  lJI  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[i]  *  lJI;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[i]  *  lJI;	  final    double[]    ltQ    =    ltI[i];    	non-compiled	[CE]  cannot  find  symbol  lJI	9	None	replace
20	[BUG]  [BUGGY]  Final  double[]  ltQ  =  lTData[i];  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  Final  double[]  ltQ  =  lTData[i];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	Final  double[]  ltQ  =  lTData[i];	  final    double[]    ltQ    =    lTData[i];    Final    double[]    ltQ    =    lTData[i];    	non-compiled	[CE]  not  a  statement	13	None	replace
21	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[0].;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[0].;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[0].;	  final    double[]    ltQ    =    lTData[0];    final    double[]    ltQ    =    lTData[0].;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
22	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[1].;  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[1].;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[1].;	  final    double[]    ltQ    =    lTData[0];    final    double[]    ltQ    =    lTData[0].;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
23	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[i].;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[i].;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[i].;	  final    double[]    ltQ    =    lTData[0];    final    double[]    ltQ    =    lTData[0].;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.cos(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);	  	compilable	  [FE]  AssertionError  	24	5	add
25	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.cos(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);	  	compilable	  [FE]  AssertionError  	24	5	add
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.cos(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);	  	compilable	  [FE]  AssertionError  	24	4	add
27	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.cos(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);	  	compilable	  [FE]  AssertionError  	24	4	add
28	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.cos(ltI[i]);    final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);	  	non-compiled	[CE]  ']'  expected	24	None	add
29	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.cos(ltI[i]);    LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	24	None	add
30	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  +  1];  final  double[]  ltQ  =  ltQ[q  +  1];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  +  1];  final  double[]  ltQ  =  ltQ[q  +  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[q  +  1];  final  double[]  ltQ  =  ltQ[q  +  1];	  final    double[]    ltQ    =    lTData[q    +    1];    final    double[]    ltQ    =    lTData[q    +    1);    	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	78	None	replace
31	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  ltQ  =  lTData[q  +  1];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  ltQ  =  lTData[q  +  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  ltQ  =  lTData[q  +  1];	  final    double[]    ltQ    =    lTData[q    +    1];    final    double[]    ltQ    =    lTData[q    +    1);    	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	78	None	replace
32	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  ltQ  =  lTData[q  +  1);  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  ltQ  =  lTData[q  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  ltQ  =  lTData[q  +  1);	  final    double[]    ltQ    =    lTData[q    +    1];    final    double[]    ltQ    =    lTData[q    +    1);    	non-compiled	[CE]  ']'  expected	78	None	replace
33	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q]  *  ltQ;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[q]  *  ltQ;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[q]  *  ltQ;	  final    double[]    ltQ    =    ltI[q]    *    ltJI;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	44	None	replace
34	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q]  *  ltTData;  [CE]  cannot  find  symbol  ltTData  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[q]  *  ltTData;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[q]  *  ltTData;	  final    double[]    ltQ    =    ltI[q]    *    ltJI;    	non-compiled	[CE]  cannot  find  symbol  ltTData	44	None	replace
35	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q]  *  ltI[q];  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[q]  *  ltI[q];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[q]  *  ltI[q];	  final    double[]    ltQ    =    ltI[q]    *    ltJI;    	non-compiled	[CE]  incompatible  types	44	None	replace
36	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q-1]  *  ltJI;  [CE]  cannot  find  symbol  ltJI  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[q-1]  *  ltJI;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[q-1]  *  ltJI;	  final    double[]    ltQ    =    ltI[q-1];    	non-compiled	[CE]  cannot  find  symbol  ltJI	45	None	replace
37	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q-1]  *  ltQ;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[q-1]  *  ltQ;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[q-1]  *  ltQ;	  final    double[]    ltQ    =    ltI[q-1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	45	None	replace
38	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q-2];  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[q-2];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[q-2];	  final    double[]    ltQ    =    ltI[q-1];    	non-compiled	[CE]  incompatible  types	45	None	replace
39	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[1];  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltQ[1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltQ[1];	  final    double[]    ltQ    =    ltData[1];    	non-compiled	[CE]  incompatible  types	35	None	replace
40	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[1];  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[1];	  final    double[]    ltQ    =    ltData[1];    	non-compiled	[CE]  incompatible  types	35	None	replace
41	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].value;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltI  =  lTData[i].value;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltI  =  lTData[i].value;	  final    double[][]    ltI    =    lTData[i].symmetry;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	92	None	replace
42	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].axis;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltI  =  lTData[i].axis;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltI  =  lTData[i].axis;	  final    double[][]    ltI    =    lTData[i].symmetry;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	92	None	replace
43	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[q-1];  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  ltData[q-1];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  ltData[q-1];	  final    double[][]    ltData    =    ltData[q];    	non-compiled	[CE]  incompatible  types	55	None	replace
44	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[q],  inverse;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  ltData[q],  inverse;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  ltData[q],  inverse;	  final    double[][]    ltData    =    ltData[q];    	non-compiled	[CE]  incompatible  types	55	None	replace
45	[BUG]  [BUGGY]  ltI[q]  =  Math.sqrt(ltI[q]  +  1);  [CE]  cannot  find  symbol  ltQ  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[q]  =  Math.sqrt(ltI[q]  +  1);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[q]  =  Math.sqrt(ltI[q]  +  1);	  ltI[q]    =    Math.sqrt(ltI[q]);    	non-compiled	[CE]  cannot  find  symbol  ltQ	51	None	replace
46	[BUG]  [BUGGY]  ltI[q]  =  Math.sqrt(ltI[q]  *  inverse);  [CE]  cannot  find  symbol  ltQ  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[q]  =  Math.sqrt(ltI[q]  *  inverse);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[q]  =  Math.sqrt(ltI[q]  *  inverse);	  ltI[q]    =    Math.sqrt(ltI[q]);    	non-compiled	[CE]  cannot  find  symbol  ltQ	51	None	replace
47	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i-1];  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[i-1];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[i-1];	  final    double[][]    ltData    =    lTData[q-1];    	non-compiled	[CE]  incompatible  types	54	None	replace
48	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[q-1]  *  inverse;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[q-1]  *  inverse;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[q-1]  *  inverse;	  final    double[][]    ltData    =    lTData[q-1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	54	None	replace
49	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[q-1],  ltI[i];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[q-1],  ltI[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[q-1],  ltI[i];	  final    double[][]    ltData    =    lTData[q-1];    	non-compiled	[CE]  ']'  expected	54	None	replace
50	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[0];  final  double[]  ltQ  =  ltQ[1];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[0];  final  double[]  ltQ  =  ltQ[1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[0];  final  double[]  ltQ  =  ltQ[1];	  final    double[]    ltQ    =    lTData[0];    final    double[]    ltQ    =    lTData[1];    	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	38	None	replace
51	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i]  *  ltIJ;  [CE]  cannot  find  symbol  ltIJ  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[i]  *  ltIJ;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[i]  *  ltIJ;	  final    double[][]    ltData    =    lTData[i]    *    inverse;    	non-compiled	[CE]  cannot  find  symbol  ltIJ	63	None	replace
52	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i]  *  ltI[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[i]  *  ltI[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[i]  *  ltI[i];	  final    double[][]    ltData    =    lTData[i]    *    inverse;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	63	None	replace
53	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i]  *  inverse;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  ltData[i]  *  inverse;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  ltData[i]  *  inverse;	  final    double[][]    ltData    =    lTData[i]    *    inverse;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	63	None	replace
54	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  +  2);  [CE]  cannot  find  symbol  ltQ  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  +  2);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i]  +  2);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  cannot  find  symbol  ltQ	23	None	replace
55	[BUG]  [BUGGY]  []  ltI  =  lTData[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  []  ltI  =  lTData[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	[]  ltI  =  lTData[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }	  final    double[]    ltI    =    lTData[i];    for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltI[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	70	4	add
57	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	70	4	add
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	70	4	add
59	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	70	4	add
60	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	70	4	add
61	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	70	4	add
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	70	4	add
63	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	70	4	add
64	[BUG]  [BUGGY]  ltI[j]  -=  ltI[j]  *  ltI[j];  [CE]  cannot  find  symbol  j  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[j]  -=  ltI[j]  *  ltI[j];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[j]  -=  ltI[j]  *  ltI[j];	  for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltI[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  cannot  find  symbol  j	29	None	replace
65	[BUG]  [BUGGY]  int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }	  for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltI[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  >  expected	29	None	replace
66	[BUG]  [BUGGY]  LtI[j]  -=  ltI[j]  *  ltI[j];  [CE]  cannot  find  symbol  LtI  [FE]                          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  LtI[j]  -=  ltI[j]  *  ltI[j];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	LtI[j]  -=  ltI[j]  *  ltI[j];	  for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltI[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  cannot  find  symbol  LtI	29	None	replace
67	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i],  ltI[i];  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  ltData[i],  ltI[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  ltData[i],  ltI[i];	  final    double[][]    ltData    =    lTData[i],    ltI[i];    	non-compiled	[CE]  ']'  expected	39	None	replace
68	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[0],  ltI[0];  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[0],  ltI[0];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[0],  ltI[0];	  final    double[][]    ltData    =    lTData[i],    ltI[i];    	non-compiled	[CE]  ']'  expected	39	None	replace
69	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i],  ltI[i]  +  1;  [CE]  ']'  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[i],  ltI[i]  +  1;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[i],  ltI[i]  +  1;	  final    double[][]    ltData    =    lTData[i],    ltI[i];    	non-compiled	[CE]  ']'  expected	39	None	replace
70	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1];  final  double[]  ltQ  =  lTData[q  -  1];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1];  final  double[]  ltQ  =  lTData[q  -  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[q    -    1];    final  double[]  ltQ  =  lTData[q  -  1];	  	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	64	None	add
71	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1];  Final  double[]  ltQ  =  lTData[q  -  1];  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1];  Final  double[]  ltQ  =  lTData[q  -  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[q    -    1];    Final  double[]  ltQ  =  lTData[q  -  1];	  	non-compiled	[CE]  not  a  statement	64	None	add
72	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1];  final  double[]  ltQ  =  lTData[q  -  1]);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1];  final  double[]  ltQ  =  lTData[q  -  1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[q    -    1];    final  double[]  ltQ  =  lTData[q  -  1]);	  	non-compiled	[CE]  ';'  expected	64	None	add
73	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[i],  ltI[i];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltQ[i],  ltI[i];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltQ[i],  ltI[i];	  final    double[]    ltQ    =    ltQ[i];    	non-compiled	[CE]  ']'  expected	8	None	replace
74	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[i]  *  ltI[i];  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltQ[i]  *  ltI[i];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltQ[i]  *  ltI[i];	  final    double[]    ltQ    =    ltQ[i];    	non-compiled	[CE]  incompatible  types	8	None	replace
75	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]).doubleValue();  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i]).doubleValue();	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]).doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	19	None	replace
76	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[i].doubleValue();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[i].doubleValue();  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[i].doubleValue();	  final    double[]    ltQ    =    ltData[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
77	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[i].doubleValue();  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[i].doubleValue();	  final    double[]    ltQ    =    ltData[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	83	None	replace
78	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltTData[i].doubleValue();  [CE]  cannot  find  symbol  ltTData  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltTData[i].doubleValue();  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltTData[i].doubleValue();	  final    double[]    ltQ    =    ltData[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  ltTData	83	None	replace
79	[BUG]  [BUGGY]  final  double[]  lTQ  =  lTData[q  +  1];  [CE]  cannot  find  symbol  ltQ  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  lTQ  =  lTData[q  +  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  lTQ  =  lTData[q  +  1];	  final    double[]    ltQ    =    lTData[q    +    1];    final    double[]    lTQ    =    lTData[q    +    1];    	non-compiled	[CE]  cannot  find  symbol  ltQ	77	None	replace
80	[BUG]  [BUGGY]  final  double[]  lTQ  =  ltData[q  +  1];  [CE]  cannot  find  symbol  ltData  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  lTQ  =  ltData[q  +  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  lTQ  =  ltData[q  +  1];	  final    double[]    ltQ    =    lTData[q    +    1];    final    double[]    lTQ    =    lTData[q    +    1];    	non-compiled	[CE]  cannot  find  symbol  ltData	77	None	replace
81	[BUG]  [BUGGY]  final  double[]  lTQ  =  lTData[q  +  2];  [CE]  cannot  find  symbol  ltQ  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  lTQ  =  lTData[q  +  2];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  lTQ  =  lTData[q  +  2];	  final    double[]    ltQ    =    lTData[q    +    1];    final    double[]    lTQ    =    lTData[q    +    1];    	non-compiled	[CE]  cannot  find  symbol  ltQ	77	None	replace
82	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  ltQ  =  lTData[q  *  1];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  ltQ  =  lTData[q  *  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[q    *    1];    final  double[]  ltQ  =  lTData[q  *  1];	  	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	47	None	add
83	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  ltQ  =  lTData[q  *  2];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  ltQ  =  lTData[q  *  2];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[q    *    1];    final  double[]  ltQ  =  lTData[q  *  2];	  	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	47	None	add
84	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  Final  double[]  ltQ  =  lTData[q  *  1];  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  Final  double[]  ltQ  =  lTData[q  *  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[q    *    1];    Final  double[]  ltQ  =  lTData[q  *  1];	  	non-compiled	[CE]  not  a  statement	47	None	add
85	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  ltQ  =  lTData[q  *  1);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  ltQ  =  lTData[q  *  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[q    *    1];    final  double[]  ltQ  =  lTData[q  *  1);	  	non-compiled	[CE]  ']'  expected	47	None	add
86	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedLT[i];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  cachedLT[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  cachedLT[i];	  final    double[]    ltI    =    lTData[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	26	None	replace
87	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  inverse);  [CE]  cannot  find  symbol  ltQ  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  inverse);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i]  /  inverse);	  ltI[i]    =    Math.sqrt(ltI[i]    *    inverse);    	non-compiled	[CE]  cannot  find  symbol  ltQ	14	None	replace
88	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  maxDelta);  [CE]  cannot  find  symbol  maxDelta  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  maxDelta);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i]  *  maxDelta);	  ltI[i]    =    Math.sqrt(ltI[i]    *    inverse);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	14	None	replace
89	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i]);  [CE]  cannot  find  symbol  ltQ  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.log(ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.log(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  ltQ	21	None	replace
90	[BUG]  [BUGGY]  LtI[i]  =  Math.log(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  LtI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	LtI[i]  =  Math.log(ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.log(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  LtI	21	None	replace
91	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[1];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  lTData[1];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  lTData[1];	  final    double[]    ltI    =    lTData[0];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	60	None	replace
92	[BUG]  [BUGGY]  ltQ[j]  -=  ltI[j]  *  ltI[j];  [CE]  cannot  find  symbol  ltQ  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltQ[j]  -=  ltI[j]  *  ltI[j];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltQ[j]  -=  ltI[j]  *  ltI[j];	  for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltQ[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  cannot  find  symbol  ltQ	28	None	replace
93	[BUG]  [BUGGY]  LtQ[j]  -=  ltI[j]  *  ltI[j];  [CE]  cannot  find  symbol  LtQ  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  LtQ[j]  -=  ltI[j]  *  ltI[j];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	LtQ[j]  -=  ltI[j]  *  ltI[j];	  for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltQ[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  cannot  find  symbol  LtQ	28	None	replace
94	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[0];  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltQ[0];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltQ[0];	  final    double[]    ltQ    =    ltData[0];    	non-compiled	[CE]  incompatible  types	34	None	replace
95	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[0];  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[0];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[0];	  final    double[]    ltQ    =    ltData[0];    	non-compiled	[CE]  incompatible  types	34	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);	  	compilable	  [FE]  AssertionError  	17	4	add
97	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);	  	compilable	  [FE]  AssertionError  	17	4	add
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	17	4	add
99	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	17	4	add
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	17	4	add
101	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	17	4	add
102	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	17	None	add
103	[BUG]  [BUGGY]  ltQ[i]  -=  ltI[i]  *  ltI[i];  [CE]  cannot  find  symbol  ltQ  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltQ[i]  -=  ltI[i]  *  ltI[i];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltQ[i]  -=  ltI[i]  *  ltI[i];	  for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltQ[i]    -=    ltI[i]    *    ltI[i];    }    	non-compiled	[CE]  cannot  find  symbol  ltQ	30	None	replace
104	[BUG]  [BUGGY]  LtQ[]  -=  ltI[i]  *  ltI[i];  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  LtQ[]  -=  ltI[i]  *  ltI[i];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	LtQ[]  -=  ltI[i]  *  ltI[i];	  for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltQ[i]    -=    ltI[i]    *    ltI[i];    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
105	[BUG]  [BUGGY]  ltI[q]  =  Math.sqrt(ltI[q].doubleValue(),  inverse);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[q]  =  Math.sqrt(ltI[q].doubleValue(),  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[q]  =  Math.sqrt(ltI[q].doubleValue(),  inverse);	  ltI[q]    =    Math.sqrt(ltI[q].doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	76	None	replace
106	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  *  2];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	final  double[]  ltQ  =  lTData[q  *  2];	  final    double[]    ltQ    =    lTData[q    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	7	replace
107	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  *  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  *  2];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[q  *  2];	  final    double[]    ltQ    =    lTData[q    *    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	7	replace
108	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  /  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	final  double[]  ltQ  =  lTData[q  /  1];	  final    double[]    ltQ    =    lTData[q    *    1];    	compilable	  [FE]  AssertionError  	48	2	replace
109	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  /  1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  /  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[q  /  1];	  final    double[]    ltQ    =    lTData[q    *    1];    	compilable	  [FE]  AssertionError  	48	2	replace
110	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[q  -  1];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltQ[q  -  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltQ[q  -  1];	  final    double[]    ltQ    =    ltData[q    -    1];    	non-compiled	[CE]  incompatible  types	90	None	replace
111	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[q  +  1];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltQ[q  +  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltQ[q  +  1];	  final    double[]    ltQ    =    ltData[q    +    1];    	non-compiled	[CE]  incompatible  types	49	None	replace
112	[BUG]  [BUGGY]  final  double[]  ltI  =  data[i];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  data[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  data[i];	  final    double[]    ltI    =    data[q];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	59	None	replace
113	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q  +  3];  [CE]  incompatible  types  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[q  +  3];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[q  +  3];	  final    double[]    ltQ    =    ltI[q    +    1];    	non-compiled	[CE]  incompatible  types	50	None	replace
114	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q  +  2];  [CE]  incompatible  types  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[q  +  2];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[q  +  2];	  final    double[]    ltQ    =    ltI[q    +    1];    	non-compiled	[CE]  incompatible  types	50	None	replace
115	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q  +  1]  *  inverse;  [CE]  incompatible  types  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[q  +  1]  *  inverse;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[q  +  1]  *  inverse;	  final    double[]    ltQ    =    ltI[q    +    1];    	non-compiled	[CE]  incompatible  types	50	None	replace
116	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[q],  ltI[i];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltQ[q],  ltI[i];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltQ[q],  ltI[i];	  final    double[]    ltQ    =    ltQ[q];    	non-compiled	[CE]  ']'  expected	56	None	replace
117	[BUG]  [BUGGY]  Final  double[]  ltQ  =  lTData[0];  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  Final  double[]  ltQ  =  lTData[0];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	Final  double[]  ltQ  =  lTData[0];	  final    double[]    ltQ    =    lTData[0];    Final    double[]    ltQ    =    lTData[0];    	non-compiled	[CE]  not  a  statement	37	None	replace
118	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  =  Math.sqrt(ltI[j]);  }  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  lTData[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  =  Math.sqrt(ltI[j]);  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  lTData[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  =  Math.sqrt(ltI[j]);  }	  final    double[]    ltI    =    ltData[i];    for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltI[i]    =    Math.sqrt(ltI[i]);    }    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	82	None	replace
119	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[2];  final  double[]  ltQ  =  lTData[2];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[2];  final  double[]  ltQ  =  lTData[2];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[2];    final  double[]  ltQ  =  lTData[2];	  	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	66	None	add
120	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[2];  Final  double[]  ltQ  =  lTData[2];  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[2];  Final  double[]  ltQ  =  lTData[2];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[2];    Final  double[]  ltQ  =  lTData[2];	  	non-compiled	[CE]  not  a  statement	66	None	add
121	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[2];  final  double[]  ltQ  =  lTData[2)];  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[2];  final  double[]  ltQ  =  lTData[2)];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[2];    final  double[]  ltQ  =  lTData[2)];	  	non-compiled	[CE]  ']'  expected	66	None	add
122	[BUG]  [BUGGY]  Final  double[]  ltQ  =  lTData[q  +  1];  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  Final  double[]  ltQ  =  lTData[q  +  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	Final  double[]  ltQ  =  lTData[q  +  1];	  final    double[]    ltQ    =    lTData[q    +    1];    Final    double[]    ltQ    =    lTData[q    +    1];    	non-compiled	[CE]  not  a  statement	2	None	replace
123	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  +  2];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	final  double[]  ltQ  =  lTData[q  +  2];	  final    double[]    ltQ    =    lTData[q    +    1];    Final    double[]    ltQ    =    lTData[q    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	7	replace
124	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  +  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  +  2];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[q  +  2];	  final    double[]    ltQ    =    lTData[q    +    1];    Final    double[]    ltQ    =    lTData[q    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	7	replace
125	[BUG]  [BUGGY]  final  double[][]  ltData  =  cachedL[ltI[i];  [CE]  ']'  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  cachedL[ltI[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  cachedL[ltI[i];	  final    double[][]    ltData    =    cachedLT[ltI[i];    	non-compiled	[CE]  ']'  expected	7	None	replace
126	[BUG]  [BUGGY]  final  double[][]  ltData  =  cachedT[ltI[i];  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  cachedT[ltI[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  cachedT[ltI[i];	  final    double[][]    ltData    =    cachedLT[ltI[i];    	non-compiled	[CE]  ']'  expected	7	None	replace
127	[BUG]  [BUGGY]  final  double[][]  ltData  =  cachedL[ltI[i]  *  inverse;  [CE]  ']'  expected  [FE]                          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  cachedL[ltI[i]  *  inverse;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  cachedL[ltI[i]  *  inverse;	  final    double[][]    ltData    =    cachedLT[ltI[i];    	non-compiled	[CE]  ']'  expected	7	None	replace
128	[BUG]  [BUGGY]  final  double[][]  ltData  =  cachedL[ltI[i]  +  1];  [CE]  possible  loss  of  precision  [FE]                            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  cachedL[ltI[i]  +  1];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  cachedL[ltI[i]  +  1];	  final    double[][]    ltData    =    cachedLT[ltI[i];    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
129	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i]  *  ltI[i];  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  ltData[i]  *  ltI[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  ltData[i]  *  ltI[i];	  final    double[][]    ltData    =    ltData[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	40	None	replace
130	[BUG]  [BUGGY]  ltQ[j]  -=  ltI[q]  *  ltI[q];  [CE]  cannot  find  symbol  ltQ  [FE]                          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltQ[j]  -=  ltI[q]  *  ltI[q];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltQ[j]  -=  ltI[q]  *  ltI[q];	  for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltQ[j]    -=    ltI[q]    *    ltI[q];    }    	non-compiled	[CE]  cannot  find  symbol  ltQ	31	None	replace
131	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  order.length;  ++j)  {  ltQ[j]  -=  ltI[q]  *  ltI[q];  }  [CE]  int  cannot  be  dereferenced  [FE]                            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  for(int  j  =  0;  j  <  order.length;  ++j)  {  ltQ[j]  -=  ltI[q]  *  ltI[q];  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	for(int  j  =  0;  j  <  order.length;  ++j)  {  ltQ[j]  -=  ltI[q]  *  ltI[q];  }	  for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltQ[j]    -=    ltI[q]    *    ltI[q];    }    	non-compiled	[CE]  int  cannot  be  dereferenced	31	None	replace
132	[BUG]  [BUGGY]  LtQ[j]  -=  ltI[q]  *  ltI[q];  [CE]  cannot  find  symbol  LtQ  [FE]                              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  LtQ[j]  -=  ltI[q]  *  ltI[q];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	LtQ[j]  -=  ltI[q]  *  ltI[q];	  for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltQ[j]    -=    ltI[q]    *    ltI[q];    }    	non-compiled	[CE]  cannot  find  symbol  LtQ	31	None	replace
133	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].data;  [CE]  cannot  find  symbol  data  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[i].data;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[i].data;	  final    double[][]    ltData    =    lTData[i].symmetry;    	non-compiled	[CE]  cannot  find  symbol  data	87	None	replace
134	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].value;  [CE]  cannot  find  symbol  value  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[i].value;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[i].value;	  final    double[][]    ltData    =    lTData[i].symmetry;    	non-compiled	[CE]  cannot  find  symbol  value	87	None	replace
135	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].doubleValue;  [CE]  cannot  find  symbol  doubleValue  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[i].doubleValue;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[i].doubleValue;	  final    double[][]    ltData    =    lTData[i].symmetry;    	non-compiled	[CE]  cannot  find  symbol  doubleValue	87	None	replace
136	[BUG]  [BUGGY]  ltI[i]  =  Math.pow(10.0,  ltI[i]);  [CE]  cannot  find  symbol  ltQ  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.pow(10.0,  ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.pow(10.0,  ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  ltQ	18	None	replace
137	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  +  3];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	final  double[]  ltQ  =  lTData[q  +  3];	  final    double[]    ltQ    =    lTData[q    +    1];    final    double[]    ltQ    =    lTData[q    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	7	replace
138	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  +  3];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  +  3];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[q  +  3];	  final    double[]    ltQ    =    lTData[q    +    1];    final    double[]    ltQ    =    lTData[q    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	7	replace
139	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedLT[q];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  cachedLT[q];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  cachedLT[q];	  final    double[]    ltI    =    cachedL[q];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	27	None	replace
140	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedL[i];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  cachedL[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  cachedL[i];	  final    double[]    ltI    =    cachedL[q];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	27	None	replace
141	[BUG]  [BUGGY]  ltI[i]  =  Math.cos(ltI[i]);  [CE]  cannot  find  symbol  ltQ  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.cos(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.cos(ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.cos(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  ltQ	25	None	replace
142	[BUG]  [BUGGY]  ltI[i]  =  Math.sin(ltI[i]);  [CE]  cannot  find  symbol  ltQ  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sin(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sin(ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.cos(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  ltQ	25	None	replace
143	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  inverse);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  inverse);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  inverse);	  ltI[i]    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
144	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  maxDelta);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  maxDelta);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  maxDelta);	  ltI[i]    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	16	None	replace
145	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  [CE]  cannot  find  symbol  ltQ  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i]  *  1);	  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  cannot  find  symbol  ltQ	15	None	replace
146	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  +  inverse);  [CE]  cannot  find  symbol  ltQ  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  +  inverse);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i]  +  inverse);	  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  cannot  find  symbol  ltQ	15	None	replace
147	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  maxDelta);  [CE]  cannot  find  symbol  maxDelta  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  maxDelta);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  inverse,  maxDelta);	  ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	74	None	replace
148	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  lJI);  [CE]  cannot  find  symbol  lJI  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  lJI);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  inverse,  lJI);	  ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  cannot  find  symbol  lJI	74	None	replace
149	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  absoluteSymmetryThreshold);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  inverse,  absoluteSymmetryThreshold);	  ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	74	None	replace
150	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  [CE]  cannot  find  symbol  ltQ  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[0]  =  Math.sqrt(ltI[0]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  cannot  find  symbol  ltQ	71	None	replace
151	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	compilable	  [FE]  AssertionError  	22	4	add
152	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	compilable	  [FE]  AssertionError  	22	4	add
153	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	non-compiled	[CE]  ']'  expected	22	None	add
154	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [CE]  cannot  find  symbol  LtI  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	non-compiled	[CE]  cannot  find  symbol  LtI	22	None	add
155	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(LtI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(LtI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(LtI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	non-compiled	[CE]  cannot  find  symbol  LtI	22	None	add
156	[BUG]  [BUGGY]  final  double[][]  ltData  =  cachedL[i],  ltI[i];  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  cachedL[i],  ltI[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  cachedL[i],  ltI[i];	  final    double[][]    ltData    =    cachedL[i];    	non-compiled	[CE]  ']'  expected	6	None	replace
157	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[q],  inverse);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltQ[q],  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltQ[q],  inverse);	  final    double[]    ltQ    =    ltQ[q];    	non-compiled	[CE]  ';'  expected	56	None	replace
158	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[q-1],  inverse;  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[q-1],  inverse;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[q-1],  inverse;	  final    double[][]    ltData    =    lTData[q-1];    	non-compiled	[CE]  incompatible  types	54	None	replace
159	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[q],  inverse,  absoluteSymmetryThreshold);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[q],  inverse,  absoluteSymmetryThreshold);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[q],  inverse,  absoluteSymmetryThreshold);	  final    double[][]    ltData    =    lTData[q],    inverse);    	non-compiled	[CE]  ';'  expected	62	None	replace
160	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[q],  inverse,  maxDelta);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[q],  inverse,  maxDelta);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[q],  inverse,  maxDelta);	  final    double[][]    ltData    =    lTData[q],    inverse);    	non-compiled	[CE]  ';'  expected	62	None	replace
161	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[i]  *  lJI;  [CE]  cannot  find  symbol  lJI  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltQ[i]  *  lJI;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltQ[i]  *  lJI;	  final    double[]    ltQ    =    ltQ[i];    	non-compiled	[CE]  cannot  find  symbol  lJI	8	None	replace
162	[BUG]  [BUGGY]  final  double[]  ltI  =  data[i];  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  data[i];  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  data[i];  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }	  final    double[]    ltI    =    ltData[i];    for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltI[i]    =    Math.sqrt(ltI[i]);    }    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	82	None	replace
163	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltTData[q  +  1];  [CE]  cannot  find  symbol  ltTData  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltTData[q  +  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltTData[q  +  1];	  final    double[]    ltQ    =    ltData[q    +    1];    	non-compiled	[CE]  cannot  find  symbol  ltTData	49	None	replace
164	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  +  1];  final  double[]  ltQ  =  lTData[q  +  1]  *  inverse;  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  +  1];  final  double[]  ltQ  =  lTData[q  +  1]  *  inverse;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[q  +  1];  final  double[]  ltQ  =  lTData[q  +  1]  *  inverse;	  final    double[]    ltQ    =    lTData[q    +    1];    final    double[]    ltQ    =    lTData[q    +    1);    	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	78	None	replace
165	[BUG]  [BUGGY]  final  double[][]  ltI  =  data[i]  +  inverse;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltI  =  data[i]  +  inverse;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltI  =  data[i]  +  inverse;	  final    double[][]    ltI    =    data[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	61	None	replace
166	[BUG]  [BUGGY]  ltI[i]  =  Math.cos(ltI[i].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.cos(ltI[i].doubleValue());  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.cos(ltI[i].doubleValue());	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.cos(ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	25	None	replace
167	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedTData[q];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltI  =  cachedTData[q];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltI  =  cachedTData[q];	  final    double[][]    ltI    =    cachedLT[q];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	52	None	replace
168	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  ltQ  =  lTData[q  +  1)];  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  ltQ  =  lTData[q  +  1)];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  ltQ  =  lTData[q  +  1)];	  final    double[]    ltQ    =    lTData[q    +    1];    final    double[]    ltQ    =    lTData[q    +    1)];    	non-compiled	[CE]  ']'  expected	3	None	replace
169	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedTData[i];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltI  =  cachedTData[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltI  =  cachedTData[i];	  final    double[][]    ltI    =    cachedLT[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	58	None	replace
170	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1];  final  double[]  lTQ  =  lTData[q  -  1];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1];  final  double[]  lTQ  =  lTData[q  -  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[q    -    1];    final  double[]  lTQ  =  lTData[q  -  1];	  	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	64	None	add
171	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1];  final  double[]  ltQ  =  lTData[q  -  1);  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1];  final  double[]  ltQ  =  lTData[q  -  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[q    -    1];    final  double[]  ltQ  =  lTData[q  -  1);	  	non-compiled	[CE]  ']'  expected	64	None	add
172	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.log(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.log(ltI[0]);	  	compilable	  [FE]  AssertionError  	20	5	add
173	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.log(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.log(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.log(ltI[0]);	  	compilable	  [FE]  AssertionError  	20	5	add
174	[BUG]  [BUGGY]  if(ltI!=  null)  {  final  double[]  ltI  =  lTData[i];  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  if(ltI!=  null)  {  final  double[]  ltI  =  lTData[i];  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	if(ltI!=  null)  {  final  double[]  ltI  =  lTData[i];  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }	  final    double[]    ltI    =    lTData[i];    for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltQ.length;  ++i)  {  ltQ[i]  -=  ltI[i]  *  ltI[i];  }  [CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  for(int  i  =  0;  i  <  ltQ.length;  ++i)  {  ltQ[i]  -=  ltI[i]  *  ltI[i];  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	for(int  i  =  0;  i  <  ltQ.length;  ++i)  {  ltQ[i]  -=  ltI[i]  *  ltI[i];  }	  for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltQ[i]    -=    ltI[i]    *    ltI[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	30	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltQ[i]  -=  ltI[i]  *  lTData[i];  }  [CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltQ[i]  -=  ltI[i]  *  lTData[i];  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltQ[i]  -=  ltI[i]  *  lTData[i];  }	  for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltQ[i]    -=    ltI[i]    *    ltI[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	30	None	replace
177	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1]  *  inverse;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1]  *  inverse;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[q  -  1]  *  inverse;	  final    double[]    ltQ    =    lTData[q    -    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	65	None	replace
178	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1]  +  inverse;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1]  +  inverse;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[q  -  1]  +  inverse;	  final    double[]    ltQ    =    lTData[q    -    1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	65	None	replace
179	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[2];  final  double[]  ltQ  =  lTData[2,];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[2];  final  double[]  ltQ  =  lTData[2,];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[2];    final  double[]  ltQ  =  lTData[2,];	  	non-compiled	[CE]  ']'  expected	66	None	add
180	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[i].value;  [CE]  cannot  find  symbol  value  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[i].value;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[i].value;	  final    double[]    ltQ    =    lTData[i];    final    double[]    ltQ    =    lTData[i];    	non-compiled	[CE]  cannot  find  symbol  value	10	None	replace
181	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q]  *  lTData;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[q]  *  lTData;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[q]  *  lTData;	  final    double[]    ltQ    =    ltI[q]    *    ltJI;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	44	None	replace
182	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ltQ.length;  ++j)  {  ltQ[j]  -=  ltI[j]  *  ltI[j];  }  [CE]  cannot  find  symbol  ltQ  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  for(int  j  =  0;  j  <  ltQ.length;  ++j)  {  ltQ[j]  -=  ltI[j]  *  ltI[j];  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	for(int  j  =  0;  j  <  ltQ.length;  ++j)  {  ltQ[j]  -=  ltI[j]  *  ltI[j];  }	  for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltQ[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  cannot  find  symbol  ltQ	28	None	replace
183	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltQ[j]  -=  ltI[j]  *  ltI[j];  }  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  For(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltQ[j]  -=  ltI[j]  *  ltI[j];  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	For(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltQ[j]  -=  ltI[j]  *  ltI[j];  }	  for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltQ[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  '.class'  expected	28	None	replace
184	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].symbol;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltI  =  lTData[i].symbol;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltI  =  lTData[i].symbol;	  final    double[][]    ltI    =    lTData[i].symmetry;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	92	None	replace
185	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j]  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  lTData[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j]  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  lTData[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j]	  final    double[]    ltI    =    ltData[i];    for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltI[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  ';'  expected	85	None	replace
186	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedTData[q];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  cachedTData[q];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  cachedTData[q];	  final    double[]    ltI    =    cachedL[q];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	27	None	replace
187	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.cos(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);	  	compilable	  [FE]  AssertionError  	24	6	add
188	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.cos(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.cos(ltI[i]);	  	compilable	  [FE]  AssertionError  	24	6	add
189	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  absolutePositivityThreshold);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  absolutePositivityThreshold);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  inverse,  absolutePositivityThreshold);	  ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	74	None	replace
190	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[q]  *  inverse;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[q]  *  inverse;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[q]  *  inverse;	  final    double[][]    ltData    =    lTData[i]    *    inverse;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	63	None	replace
191	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i]  *  inverse.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[i]  *  inverse.doubleValue();  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[i]  *  inverse.doubleValue();	  final    double[][]    ltData    =    lTData[i]    *    inverse;    	non-compiled	[CE]  double  cannot  be  dereferenced	63	None	replace
192	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i],  ltI[i]  *  inverse;  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[i],  ltI[i]  *  inverse;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[i],  ltI[i]  *  inverse;	  final    double[][]    ltData    =    lTData[i],    ltI[i];    	non-compiled	[CE]  ']'  expected	39	None	replace
193	[BUG]  [BUGGY]  final  double[][]  ltData  =  cachedL[ltI[i]  +  inverse;  [CE]  ']'  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  cachedL[ltI[i]  +  inverse;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  cachedL[ltI[i]  +  inverse;	  final    double[][]    ltData    =    cachedLT[ltI[i];    	non-compiled	[CE]  ']'  expected	7	None	replace
194	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.log(ltI[i].doubleValue());  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.log(ltI[i].doubleValue());	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.log(ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	21	None	replace
195	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	70	5	add
196	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	70	5	add
197	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedLT[i];  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  cachedLT[i];  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  cachedLT[i];  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }	  final    double[]    ltI    =    lTData[i];    for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltI[i]    =    Math.sqrt(ltI[i]);    }    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	41	None	replace
198	[BUG]  [BUGGY]  final  double[][]  ltI  =  data[0];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltI  =  data[0];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltI  =  data[0];	  final    double[][]    ltI    =    data[q];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	75	None	replace
199	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedLT[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  cachedLT[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  cachedLT[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }	  final    double[]    ltI    =    lTData[i];    for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltI[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	4	None	replace
200	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  lTData[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  lTData[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[	  final    double[]    ltI    =    lTData[i];    for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltI[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
201	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].symbol;  [CE]  cannot  find  symbol  symbol  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  lTData[i].symbol;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  lTData[i].symbol;	  final    double[][]    ltData    =    lTData[i].symmetry;    	non-compiled	[CE]  cannot  find  symbol  symbol	87	None	replace
202	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q]  *  ltI;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[q]  *  ltI;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[q]  *  ltI;	  final    double[]    ltQ    =    ltI[q]    *    lJI;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	46	None	replace
203	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[q],  inverse);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  ltData[q],  inverse);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  ltData[q],  inverse);	  final    double[][]    ltData    =    ltData[q];    	non-compiled	[CE]  ';'  expected	55	None	replace
204	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	18	None	replace
205	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[1];  final  double[]  ltQ  =  lTData[0];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[1];  final  double[]  ltQ  =  lTData[0];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[1];    final  double[]  ltQ  =  lTData[0];	  	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	32	None	add
206	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  For(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	For(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }	  for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltI[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  '.class'  expected	29	None	replace
207	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  inverse  +  1);  [CE]  cannot  find  symbol  ltQ  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  inverse  +  1);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i]  *  inverse  +  1);	  ltI[i]    =    Math.sqrt(ltI[i]    *    inverse);    	non-compiled	[CE]  cannot  find  symbol  ltQ	14	None	replace
208	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltData[q  /  1];  [CE]  cannot  find  symbol  ltData  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltData[q  /  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltData[q  /  1];	  final    double[]    ltQ    =    lTData[q    *    1];    	non-compiled	[CE]  cannot  find  symbol  ltData	48	None	replace
209	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  ltQ.length;  ++j)  {  ltQ[j]  -=  ltI[q]  *  ltI[q];  }  [CE]  cannot  find  symbol  ltQ  [FE]                          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  for(int  j  =  0;  j  <  ltQ.length;  ++j)  {  ltQ[j]  -=  ltI[q]  *  ltI[q];  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	for(int  j  =  0;  j  <  ltQ.length;  ++j)  {  ltQ[j]  -=  ltI[q]  *  ltI[q];  }	  for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltQ[j]    -=    ltI[q]    *    ltI[q];    }    	non-compiled	[CE]  cannot  find  symbol  ltQ	31	None	replace
210	[BUG]  [BUGGY]  For(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltQ[j]  -=  ltI[q]  *  ltI[q];  }  [CE]  '.class'  expected  [FE]                            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  For(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltQ[j]  -=  ltI[q]  *  ltI[q];  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	For(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltQ[j]  -=  ltI[q]  *  ltI[q];  }	  for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltQ[j]    -=    ltI[q]    *    ltI[q];    }    	non-compiled	[CE]  '.class'  expected	31	None	replace
211	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].doubleValue());  [CE]  cannot  find  symbol  LtI  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].doubleValue());  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	LtI[i]  =  Math.sqrt(ltI[i].doubleValue());	  ltI[i]    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  LtI	16	None	replace
212	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltTData[1];  [CE]  cannot  find  symbol  ltTData  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltTData[1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltTData[1];	  final    double[]    ltQ    =    ltData[1];    	non-compiled	[CE]  cannot  find  symbol  ltTData	35	None	replace
213	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltTData[q  *  1];  [CE]  cannot  find  symbol  ltTData  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltTData[q  *  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltTData[q  *  1];	  final    double[]    ltQ    =    ltData[q    *    1];    	non-compiled	[CE]  cannot  find  symbol  ltTData	91	None	replace
214	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltTData[0];  [CE]  cannot  find  symbol  ltTData  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltTData[0];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltTData[0];	  final    double[]    ltQ    =    ltData[0];    	non-compiled	[CE]  cannot  find  symbol  ltTData	34	None	replace
215	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]	  	non-compiled	[CE]  ')'  expected	17	None	add
216	[BUG]  [BUGGY]  final  double[]  ltI  =  this.data[q];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  this.data[q];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  this.data[q];	  final    double[]    ltI    =    data[q];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	59	None	replace
217	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltTData[q  -  1];  [CE]  cannot  find  symbol  ltTData  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltTData[q  -  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltTData[q  -  1];	  final    double[]    ltQ    =    ltData[q    -    1];    	non-compiled	[CE]  cannot  find  symbol  ltTData	90	None	replace
218	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q-1]  *  inverse;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[q-1]  *  inverse;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[q-1]  *  inverse;	  final    double[]    ltQ    =    ltI[q-1];    	non-compiled	[CE]  incompatible  types	45	None	replace
219	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q-1]  *  lJI;  [CE]  cannot  find  symbol  lJI  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[q-1]  *  lJI;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[q-1]  *  lJI;	  final    double[]    ltQ    =    ltI[q-1];    	non-compiled	[CE]  cannot  find  symbol  lJI	45	None	replace
220	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[i]  *  DEFAULT_ABSOLUTE_POSITIVE_SYMMETRY_THRESHOLD;  [CE]  cannot  find  symbol  DEFAULT_ABSOLUTE_POSITIVE_SYMMETRY_THRESHOLD  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[i]  *  DEFAULT_ABSOLUTE_POSITIVE_SYMMETRY_THRESHOLD;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[i]  *  DEFAULT_ABSOLUTE_POSITIVE_SYMMETRY_THRESHOLD;	  final    double[]    ltQ    =    ltI[i];    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_ABSOLUTE_POSITIVE_SYMMETRY_THRESHOLD	9	None	replace
221	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  For(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	For(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }	  for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltI[i]    =    Math.sqrt(ltI[i]);    }    	non-compiled	[CE]  '.class'  expected	89	None	replace
222	[BUG]  [BUGGY]  (int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  (int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }	  for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltI[i]    =    Math.sqrt(ltI[i]);    }    	non-compiled	[CE]  ')'  expected	89	None	replace
223	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  lTQ  =  lTData[q  *  1];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  *  1];  final  double[]  lTQ  =  lTData[q  *  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[q    *    1];    final  double[]  lTQ  =  lTData[q  *  1];	  	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	47	None	add
224	[BUG]  [BUGGY]  ltI[q]  =  Math.sqrt(ltI[q].doubleValue()  -  1);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[q]  =  Math.sqrt(ltI[q].doubleValue()  -  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[q]  =  Math.sqrt(ltI[q].doubleValue()  -  1);	  ltI[q]    =    Math.sqrt(ltI[q].doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	76	None	replace
225	[BUG]  [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  [CE]  cannot  find  symbol  ltQ  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[1]  =  Math.sqrt(ltI[1]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  cannot  find  symbol  ltQ	71	None	replace
226	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  [CE]  cannot  find  symbol  ltQ  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[0]  =  Math.sqrt(ltI[1]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  cannot  find  symbol  ltQ	71	None	replace
227	[BUG]  [BUGGY]  ltI[q]  =  Math.sqrt(ltI[q].inverse);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[q]  =  Math.sqrt(ltI[q].inverse);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[q]  =  Math.sqrt(ltI[q].inverse);	  ltI[q]    =    Math.sqrt(ltI[q]);    	non-compiled	[CE]  double  cannot  be  dereferenced	51	None	replace
228	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltData[q  *  2];  [CE]  cannot  find  symbol  ltData  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltData[q  *  2];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltData[q  *  2];	  final    double[]    ltQ    =    ltData[q    *    1];    	non-compiled	[CE]  cannot  find  symbol  ltData	91	None	replace
229	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltData[q  *  3];  [CE]  cannot  find  symbol  ltData  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltData[q  *  3];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltData[q  *  3];	  final    double[]    ltQ    =    ltData[q    *    1];    	non-compiled	[CE]  cannot  find  symbol  ltData	91	None	replace
230	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[j]  =  Math.sqrt(ltI[j]);  ltI[0]  =  Math.sqrt(ltI[0]);  [CE]  cannot  find  symbol  j  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[j]  =  Math.sqrt(ltI[j]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[j]  =  Math.sqrt(ltI[j]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	non-compiled	[CE]  cannot  find  symbol  j	70	None	add
231	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	70	4	add
232	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	70	4	add
233	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i].symmetry;  [CE]  cannot  find  symbol  symmetry  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  ltData[i].symmetry;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  ltData[i].symmetry;	  final    double[][]    ltData    =    ltData[i];    	non-compiled	[CE]  cannot  find  symbol  symmetry	40	None	replace
234	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[j];  [CE]  cannot  find  symbol  j  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  ltData[j];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  ltData[j];	  final    double[][]    ltData    =    ltData[i];    	non-compiled	[CE]  cannot  find  symbol  j	40	None	replace
235	[BUG]  [BUGGY]  final  double[]  ltI  =  ltI[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  ltI[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  ltI[i];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }	  final    double[]    ltI    =    lTData[i];    for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltI[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	4	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i].doubleValue());  }  [CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i].doubleValue());  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i].doubleValue());  }	  for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltI[i]    =    Math.sqrt(ltI[i]);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	89	None	replace
237	[BUG]  [BUGGY]  ltI[i]  =  Math.cos(ltI[i].computeSymmetryThreshold());  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.cos(ltI[i].computeSymmetryThreshold());  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.cos(ltI[i].computeSymmetryThreshold());	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.cos(ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	25	None	replace
238	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltQ[i]  -=  ltI[i]  *  ltI[i];  }  [CE]  '.class'  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  For(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltQ[i]  -=  ltI[i]  *  ltI[i];  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	For(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltQ[i]  -=  ltI[i]  *  ltI[i];  }	  for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltQ[i]    -=    ltI[i]    *    ltI[i];    }    	non-compiled	[CE]  '.class'  expected	30	None	replace
239	[BUG]  [BUGGY]  if(ltI!=  null)  {  final  double[]  ltI  =  ltData[i];  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  if(ltI!=  null)  {  final  double[]  ltI  =  ltData[i];  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	if(ltI!=  null)  {  final  double[]  ltI  =  ltData[i];  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }	  final    double[]    ltI    =    ltData[i];    for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltI[i]    =    Math.sqrt(ltI[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
240	[BUG]  [BUGGY]  ltI[q]  =  Math.sqrt(ltI[q].doubleValue()  +  1);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[q]  =  Math.sqrt(ltI[q].doubleValue()  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[q]  =  Math.sqrt(ltI[q].doubleValue()  +  1);	  ltI[q]    =    Math.sqrt(ltI[q].doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	76	None	replace
241	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i]  *  ltIJ;  [CE]  cannot  find  symbol  ltIJ  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  ltData[i]  *  ltIJ;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  ltData[i]  *  ltIJ;	  final    double[][]    ltData    =    lTData[i]    *    inverse;    	non-compiled	[CE]  cannot  find  symbol  ltIJ	63	None	replace
242	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i].value;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  lTData[i].value;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  lTData[i].value;	  final    double[]    ltI    =    lTData[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	26	None	replace
243	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.log(ltI[i]);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.log(ltI[i]);	  	non-compiled	[CE]  <identifier>  expected	20	None	add
244	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.cos(ltI[i]);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.cos(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.cos(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.cos(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.cos(ltI[i]);	  	non-compiled	[CE]  <identifier>  expected	24	None	add
245	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i],  inverse);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  ltData[i],  inverse);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  ltData[i],  inverse);	  final    double[][]    ltData    =    lTData[q],    inverse);    	non-compiled	[CE]  ';'  expected	62	None	replace
246	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  +  1);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  +  1);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  +  1);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	23	None	replace
247	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[i].restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[i].restrictByNotNullOrUndefined();  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[i].restrictByNotNullOrUndefined();	  final    double[]    ltQ    =    lTData[i];    final    double[]    ltQ    =    lTData[i].;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
248	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1];  final  double[]  ltQ  =  lTData[q  -  1)];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[q  -  1];  final  double[]  ltQ  =  lTData[q  -  1)];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final    double[]    ltQ    =    lTData[q    -    1];    final  double[]  ltQ  =  lTData[q  -  1)];	  	non-compiled	[CE]  ']'  expected	64	None	add
249	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltJI[i];  [CE]  cannot  find  symbol  ltJI  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltJI[i];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltJI[i];	  final    double[]    ltQ    =    ltTData[i];    	non-compiled	[CE]  cannot  find  symbol  ltJI	79	None	replace
250	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i],  ltI[i].doubleValue();  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  ltData[i],  ltI[i].doubleValue();  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  ltData[i],  ltI[i].doubleValue();	  final    double[][]    ltData    =    lTData[i],    ltI[i];    	non-compiled	[CE]  ']'  expected	39	None	replace
251	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[j],  ltI[i];  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  ltData[j],  ltI[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  ltData[j],  ltI[i];	  final    double[][]    ltData    =    lTData[i],    ltI[i];    	non-compiled	[CE]  ']'  expected	39	None	replace
252	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i],  ltI[i]  +  1;  [CE]  ']'  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  ltData[i],  ltI[i]  +  1;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  ltData[i],  ltI[i]  +  1;	  final    double[][]    ltData    =    lTData[i],    ltI[i];    	non-compiled	[CE]  ']'  expected	39	None	replace
253	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i];  for(int  i  =  0;  i  <  order.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  lTData[i];  for(int  i  =  0;  i  <  order.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  lTData[i];  for(int  i  =  0;  i  <  order.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }	  final    double[]    ltI    =    lTData[i];    for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltI[i]    =    Math.sqrt(ltI[i]);    }    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	41	None	replace
254	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltI[i];  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  ltI[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  ltI[i];	  final    double[][]    ltData    =    cachedTData[i];    	non-compiled	[CE]  incompatible  types	68	None	replace
255	[BUG]  [BUGGY]  final  double[][]  ltI  =  this.data[q];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltI  =  this.data[q];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltI  =  this.data[q];	  final    double[][]    ltI    =    data[q];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	75	None	replace
256	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[2].;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[2].;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[2].;	  final    double[]    ltQ    =    lTData[0];    final    double[]    ltQ    =    lTData[0].;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
257	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[i  +  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	add	final  double[]  ltQ  =  lTData[i  +  1];	  final    double[]    ltQ    =    lTData[q    +    1];    final    double[]    ltQ    =    lTData[q    +    1);    	compilable	  [FE]  AssertionError  	78	5	replace
258	[BUG]  [BUGGY]  final  double[]  ltQ  =  lTData[i  +  1];  [FE]  AssertionError  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  lTData[i  +  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  lTData[i  +  1];	  final    double[]    ltQ    =    lTData[q    +    1];    final    double[]    ltQ    =    lTData[q    +    1);    	compilable	  [FE]  AssertionError  	78	5	replace
259	[BUG]  [BUGGY]  final  double[]  ltI  =  lTI[i];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  lTI[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  lTI[i];	  final    double[]    ltI    =    ltData[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	88	None	replace
260	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[j];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  ltData[j];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  ltData[j];  for(int  j  =  0;  j  <  ltI.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }	  final    double[]    ltI    =    lTData[j];    for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltI[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	72	None	replace
261	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	non-compiled	[CE]  <identifier>  expected	22	None	add
262	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[i];  for(int  j  =  0;  j  <  order.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  ltData[i];  for(int  j  =  0;  j  <  order.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  ltData[i];  for(int  j  =  0;  j  <  order.length;  ++j)  {  ltI[j]  -=  ltI[j]  *  ltI[j];  }	  final    double[]    ltI    =    ltData[i];    for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltI[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	85	None	replace
263	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[0];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  ltData[0];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  ltData[0];	  final    double[]    ltI    =    lTData[0];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	60	None	replace
264	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltData[q  -  2];  [CE]  cannot  find  symbol  ltData  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltData[q  -  2];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltData[q  -  2];	  final    double[]    ltQ    =    lTData[q    -    1];    	non-compiled	[CE]  cannot  find  symbol  ltData	65	None	replace
265	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q]  *  ltIJ;  [CE]  cannot  find  symbol  ltIJ  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltI[q]  *  ltIJ;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltI[q]  *  ltIJ;	  final    double[]    ltQ    =    ltI[q]    *    lJI;    	non-compiled	[CE]  cannot  find  symbol  ltIJ	46	None	replace
266	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[q],  ltI[i];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  ltData[q],  ltI[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  ltData[q],  ltI[i];	  final    double[][]    ltData    =    ltData[q];    	non-compiled	[CE]  ']'  expected	55	None	replace
267	[BUG]  [BUGGY]  final  double[][]  ltI  =  this.data[i];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltI  =  this.data[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltI  =  this.data[i];	  final    double[][]    ltI    =    data[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	61	None	replace
268	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i].inverse);  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.log(ltI[i].inverse);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.log(ltI[i].inverse);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.log(ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	21	None	replace
269	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedT[i];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltI  =  cachedT[i];  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltI  =  cachedT[i];	  final    double[][]    ltI    =    cachedLT[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	58	None	replace
270	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].inverse);  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].inverse);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].inverse);	  ltI[i]    =    Math.sqrt(ltI[i].inverse);    	non-compiled	[CE]  double  cannot  be  dereferenced	86	None	replace
271	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.sqrt(ltI[i]);	  	non-compiled	[CE]  <identifier>  expected	17	None	add
272	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[0];  for(int  i  =  0;  i  <  order.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltI  =  lTData[0];  for(int  i  =  0;  i  <  order.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltI  =  lTData[0];  for(int  i  =  0;  i  <  order.length;  ++i)  {  ltI[i]  =  Math.sqrt(ltI[i]);  }	  final    double[]    ltI    =    lTData[0];    for(int    i    =    0;    i    <    ltI.length;    ++i)    {    ltI[i]    =    Math.sqrt(ltI[i]);    }    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	42	None	replace
273	[BUG]  [BUGGY]  final  double[][]  ltData  =  cachedLT[ltI[i]  /  DEFAULT_ABSOLUTE_POSITIVE_SYMMETRY_THRESHOLD;  [CE]  ']'  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[][]  ltData  =  cachedLT[ltI[i]  /  DEFAULT_ABSOLUTE_POSITIVE_SYMMETRY_THRESHOLD;  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[][]  ltData  =  cachedLT[ltI[i]  /  DEFAULT_ABSOLUTE_POSITIVE_SYMMETRY_THRESHOLD;	  final    double[][]    ltData    =    cachedLT[ltI[i];    	non-compiled	[CE]  ']'  expected	7	None	replace
274	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltJI[q];  [CE]  cannot  find  symbol  ltJI  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  final  double[]  ltQ  =  ltJI[q];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	final  double[]  ltQ  =  ltJI[q];	  final    double[]    ltQ    =    ltTData[q];    	non-compiled	[CE]  cannot  find  symbol  ltJI	73	None	replace
275	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  order.length;  ++j)  {  ltQ[j]  -=  ltI[j]  *  ltI[j];  }  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  for(int  j  =  0;  j  <  order.length;  ++j)  {  ltQ[j]  -=  ltI[j]  *  ltI[j];  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	for(int  j  =  0;  j  <  order.length;  ++j)  {  ltQ[j]  -=  ltI[j]  *  ltI[j];  }	  for(int    j    =    0;    j    <    ltI.length;    ++j)    {    ltQ[j]    -=    ltI[j]    *    ltI[j];    }    	non-compiled	[CE]  int  cannot  be  dereferenced	28	None	replace
276	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].doubleValue());  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].doubleValue());	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	69	None	replace
277	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i]).doubleValue();  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i]).doubleValue();  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	LtI[i]  =  Math.sqrt(ltI[i]).doubleValue();	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]).doubleValue();    	non-compiled	[CE]  cannot  find  symbol  LtI	19	None	replace
278	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]),  ltI[i]).doubleValue();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]),  ltI[i]).doubleValue();  [BUGGY]      final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	143	143	2	replace	ltI[i]  =  Math.sqrt(ltI[i]),  ltI[i]).doubleValue();	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]).doubleValue();    	non-compiled	[CE]  ';'  expected	19	None	replace
