bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[]  lI  =  cachedLT[i]  *  lTData;  [CE]  array  required,  but  RealMatrix  found  [FE]            AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  cachedLT[i]  *  lTData;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedLT[i]  *  lTData;	  final    double[]    lI    =    lTData[i]    *    cachedLT;    	non-compiled	[CE]  array  required,  but  RealMatrix  found	3	None	replace
2	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  *  cachedL;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i]  *  cachedL;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  *  cachedL;	  final    double[]    lI    =    lTData[i]    *    cachedLT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	3	None	replace
3	[BUG]  [BUGGY]  final  double[]  lI  =  cachedL[i]  *  lTData;  [CE]  array  required,  but  RealMatrix  found  [FE]                AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  cachedL[i]  *  lTData;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedL[i]  *  lTData;	  final    double[]    lI    =    lTData[i]    *    cachedLT;    	non-compiled	[CE]  array  required,  but  RealMatrix  found	3	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cmdL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  cmdL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  cmdL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  lTData;  [CE]  cannot  find  symbol  cachedL  [FE]        AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).cachedL  =  lTData;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  lTData;	      ((    RealMatrix)matrix).cachedL    =    cachedLT;    	non-compiled	[CE]  cannot  find  symbol  cachedL	11	None	replace
9	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  maxDelta;  [CE]  cannot  find  symbol  cachedL  [FE]          AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).cachedL  =  maxDelta;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  maxDelta;	      ((    RealMatrix)matrix).cachedL    =    cachedLT;    	non-compiled	[CE]  cannot  find  symbol  cachedL	11	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [CE]  '('  or  '['  expected  [FE]                AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	9	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [CE]  '('  or  '['  expected  [FE]                  AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	9	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]                    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	9	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
14	[BUG]  [BUGGY]  lTData  =  matrix.getData(i);  cachedL  =  null;  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  lTData  =  matrix.getData(i);  cachedL  =  null;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData(i);  cachedL  =  null;	      lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	15	None	replace
15	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedL  =  new  RealMatrix[i];  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  lTData  =  matrix.getData();  cachedL  =  new  RealMatrix[i];  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData();  cachedL  =  new  RealMatrix[i];	      lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  incompatible  types	15	None	replace
16	[BUG]  [BUGGY]  lTData  =  matrix.getData(i);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  lTData  =  matrix.getData(i);  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData(i);	      lTData    =    matrix.getData();    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	17	None	replace
17	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  matrix.doubleValue();  [CE]  cannot  find  symbol  cachedL  [FE]          AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).cachedL  =  matrix.doubleValue();  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  matrix.doubleValue();	      ((    RealMatrix)matrix).cachedL    =    cachedLT.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  cachedL	12	None	replace
18	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  lTData.doubleValue();  [CE]  cannot  find  symbol  cachedL  [FE]            AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).cachedL  =  lTData.doubleValue();  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  lTData.doubleValue();	      ((    RealMatrix)matrix).cachedL    =    cachedLT.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  cachedL	12	None	replace
19	[BUG]  [BUGGY]  ((  RealMatrix)matrice).cachedL  =  cachedLT.doubleValue();  [CE]  cannot  find  symbol  matrice  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrice).cachedL  =  cachedLT.doubleValue();  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrice).cachedL  =  cachedLT.doubleValue();	      ((    RealMatrix)matrix).cachedL    =    cachedLT.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  matrice	12	None	replace
20	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i]  +  2;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  +  2;	  final    double[]    lI    =    lTData[i]    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
21	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i]  *  1;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  *  1;	  final    double[]    lI    =    lTData[i]    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	2	None	replace
22	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  +  4;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i]  +  4;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  +  4;	  final    double[]    lI    =    lTData[i]    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  '('  or  '['  expected  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '('  or  '['  expected	7	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [CE]  '('  or  '['  expected  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '('  or  '['  expected	8	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [CE]  '('  or  '['  expected  [FE]                    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '('  or  '['  expected	8	None	replace
35	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i][1];  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i][1];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i][1];	  final    double[]    lI    =    lTData[i][0];    	non-compiled	[CE]  incompatible  types	10	None	replace
36	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i][0]  +  1;  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i][0]  +  1;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i][0]  +  1;	  final    double[]    lI    =    lTData[i][0];    	non-compiled	[CE]  incompatible  types	10	None	replace
37	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  lTData[i  +  1];  [CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    NotSymmetricMatrixException    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  lTData[i  +  1];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    +    1];    final  double[]  lI  =  lTData[i  +  1];	  	non-compiled	[CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	19	None	add
38	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  Final  double[]  lI  =  lTData[i  +  1];  [CE]  not  a  statement  [FE]      NotSymmetricMatrixException    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  Final  double[]  lI  =  lTData[i  +  1];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    +    1];    Final  double[]  lI  =  lTData[i  +  1];	  	non-compiled	[CE]  not  a  statement	19	None	add
39	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  ltData[i  +  1];  [CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        NotSymmetricMatrixException    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  ltData[i  +  1];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    +    1];    final  double[]  lI  =  ltData[i  +  1];	  	non-compiled	[CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	19	None	add
40	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  lTData[i  +  1)];  [CE]  ']'  expected  [FE]          NotSymmetricMatrixException    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  lTData[i  +  1)];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    +    1];    final  double[]  lI  =  lTData[i  +  1)];	  	non-compiled	[CE]  ']'  expected	19	None	add
41	[BUG]  [BUGGY]  final  double[]  lI  =  cachedL[i];  [CE]  array  required,  but  RealMatrix  found  [FE]        AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  cachedL[i];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedL[i];	  final    double[]    lI    =    cachedLT[i];    	non-compiled	[CE]  array  required,  but  RealMatrix  found	1	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	add	        lTData    =    matrix.getData();    lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	16	5	add
43	[BUG]  [BUGGY]      lTData  =  matrix.getData();  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	        lTData    =    matrix.getData();    lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	16	5	add
44	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]      AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	16	None	add
45	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]        AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	16	None	add
46	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]          AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	16	None	add
47	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  lTData  =  matrix.getData();  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]            AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  lTData  =  matrix.getData();  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  lTData  =  matrix.getData();	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	16	None	add
48	[BUG]  [BUGGY]  final  double[]  lI  =  cachedLT[i]  *  lTData.doubleValue();  [CE]  array  required,  but  RealMatrix  found  [FE]          AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  cachedLT[i]  *  lTData.doubleValue();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedLT[i]  *  lTData.doubleValue();	  final    double[]    lI    =    lTData[i]    *    cachedLT.doubleValue();    	non-compiled	[CE]  array  required,  but  RealMatrix  found	21	None	replace
49	[BUG]  [BUGGY]  final  double[]  lI  =  cachedL[i]  *  lTData.doubleValue();  [CE]  array  required,  but  RealMatrix  found  [FE]            AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  cachedL[i]  *  lTData.doubleValue();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedL[i]  *  lTData.doubleValue();	  final    double[]    lI    =    lTData[i]    *    cachedLT.doubleValue();    	non-compiled	[CE]  array  required,  but  RealMatrix  found	21	None	replace
50	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  *  cachedL.doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i]  *  cachedL.doubleValue();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  *  cachedL.doubleValue();	  final    double[]    lI    =    lTData[i]    *    cachedLT.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
51	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  cachedL;  [CE]  cannot  find  symbol  cachedLT  [FE]            AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  cachedL;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  cachedL;	      ((    RealMatrix)matrix).cachedLT    =    cachedLT;    	non-compiled	[CE]  cannot  find  symbol  cachedLT	13	None	replace
52	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  lTData;  [CE]  cannot  find  symbol  cachedLT  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  lTData;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  lTData;	      ((    RealMatrix)matrix).cachedLT    =    cachedLT;    	non-compiled	[CE]  cannot  find  symbol  cachedLT	13	None	replace
53	[BUG]  [BUGGY]  ((  RealMatrix)matrice).cachedLT  =  cachedLT;  [CE]  cannot  find  symbol  matrice  [FE]                AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrice).cachedLT  =  cachedLT;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrice).cachedLT  =  cachedLT;	      ((    RealMatrix)matrix).cachedLT    =    cachedLT;    	non-compiled	[CE]  cannot  find  symbol  matrice	13	None	replace
54	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i  +  2];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	add	final  double[]  lI  =  lTData[i  +  2];	  final    double[]    lI    =    lTData[i    +    1];    	compilable	  [FE]  NotSymmetricMatrixException  	20	7	replace
55	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  2];  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i  +  2];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  +  2];	  final    double[]    lI    =    lTData[i    +    1];    	compilable	  [FE]  NotSymmetricMatrixException  	20	7	replace
56	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]      NotSymmetricMatrixException    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i  +  3];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	add	final  double[]  lI  =  lTData[i  +  3];	  final    double[]    lI    =    lTData[i    +    1];    	compilable	  [FE]  NotSymmetricMatrixException  	20	7	replace
57	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  3];  [FE]  NotSymmetricMatrixException  [FE]      NotSymmetricMatrixException    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i  +  3];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  +  3];	  final    double[]    lI    =    lTData[i    +    1];    	compilable	  [FE]  NotSymmetricMatrixException  	20	7	replace
58	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  matrix.clone();  [CE]  cannot  find  symbol  cachedL  [FE]            AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).cachedL  =  matrix.clone();  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  matrix.clone();	      ((    RealMatrix)matrix).cachedL    =    cachedLT.clone();    	non-compiled	[CE]  cannot  find  symbol  cachedL	18	None	replace
59	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  lTData.clone();  [CE]  cannot  find  symbol  cachedL  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).cachedL  =  lTData.clone();  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  lTData.clone();	      ((    RealMatrix)matrix).cachedL    =    cachedLT.clone();    	non-compiled	[CE]  cannot  find  symbol  cachedL	18	None	replace
60	[BUG]  [BUGGY]  ((  RealMatrix)matrice).cachedL  =  cachedLT.clone();  [CE]  cannot  find  symbol  matrice  [FE]                AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrice).cachedL  =  cachedLT.clone();  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrice).cachedL  =  cachedLT.clone();	      ((    RealMatrix)matrix).cachedL    =    cachedLT.clone();    	non-compiled	[CE]  cannot  find  symbol  matrice	18	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	add	        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	14	5	add
62	[BUG]  [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	14	5	add
63	[BUG]  [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cadL  =  null;  [CE]  cannot  find  symbol  cadL  [FE]      AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cadL  =  null;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cadL  =  null;	  	non-compiled	[CE]  cannot  find  symbol  cadL	14	None	add
64	[BUG]  [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).cachedL  =  null;  [CE]  cannot  find  symbol  cachedL  [FE]        AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).cachedL  =  null;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	        lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).cachedL  =  null;	  	non-compiled	[CE]  cannot  find  symbol  cachedL	14	None	add
65	[BUG]  [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).cachedLT  =  null;  [CE]  cannot  find  symbol  cachedLT  [FE]          AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).cachedLT  =  null;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	        lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).cachedLT  =  null;	  	non-compiled	[CE]  cannot  find  symbol  cachedLT	14	None	add
66	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  lTData  =  matrix.getData();  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  lTData  =  matrix.getData();  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  lTData  =  matrix.getData();	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	16	None	add
67	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  +  i;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]      AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  +  i;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  +  i;	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	16	None	add
68	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  computedL[i];  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]        AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  computedL[i];  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  computedL[i];	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	16	None	add
69	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  ltData.doubleValue();  [CE]  cannot  find  symbol  cachedL  [FE]          AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).cachedL  =  ltData.doubleValue();  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  ltData.doubleValue();	      ((    RealMatrix)matrix).cachedL    =    cachedLT.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  cachedL	12	None	replace
70	[BUG]  [BUGGY]  final  double[]  lI  =  cachedLT[i].value;  [CE]  array  required,  but  RealMatrix  found  [FE]        AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  cachedLT[i].value;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedLT[i].value;	  final    double[]    lI    =    cachedLT[i];    	non-compiled	[CE]  array  required,  but  RealMatrix  found	1	None	replace
71	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1]  *  absoluteSymmetryThreshold;  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]    NotSymmetricMatrixException    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i  +  1]  *  absoluteSymmetryThreshold;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  +  1]  *  absoluteSymmetryThreshold;	  final    double[]    lI    =    lTData[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	20	None	replace
72	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  +  1L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i]  +  1L;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  +  1L;	  final    double[]    lI    =    lTData[i]    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
73	[BUG]  [BUGGY]  lTData  =  matrix.getDataItem(i);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  lTData  =  matrix.getDataItem(i);  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getDataItem(i);	      lTData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]          AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	      for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	6	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  '('  or  '['  expected  [FE]                AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	9	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [CE]  '('  or  '['  expected  [FE]                  AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	9	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  '('  or  '['  expected  [FE]                    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	9	None	replace
78	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  matrix;  [CE]  cannot  find  symbol  cachedL  [FE]        AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).cachedL  =  matrix;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  matrix;	      ((    RealMatrix)matrix).cachedL    =    cachedLT;    	non-compiled	[CE]  cannot  find  symbol  cachedL	11	None	replace
79	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  matrix;  [CE]  cannot  find  symbol  cachedLT  [FE]          AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  matrix;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  matrix;	      ((    RealMatrix)matrix).cachedL    =    cachedLT;    	non-compiled	[CE]  cannot  find  symbol  cachedLT	11	None	replace
80	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  cachedLT[i];  [CE]  cannot  find  symbol  cachedL  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).cachedL  =  cachedLT[i];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  cachedLT[i];	      	non-compiled	[CE]  cannot  find  symbol  cachedL	4	None	replace
81	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  cachedLT[i].doubleValue();  [CE]  cannot  find  symbol  cachedL  [FE]                AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).cachedL  =  cachedLT[i].doubleValue();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  cachedLT[i].doubleValue();	      	non-compiled	[CE]  cannot  find  symbol  cachedL	4	None	replace
82	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  lTData[i  +  1);  [CE]  ']'  expected  [FE]    NotSymmetricMatrixException    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  lTData[i  +  1);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    +    1];    final  double[]  lI  =  lTData[i  +  1);	  	non-compiled	[CE]  ']'  expected	19	None	add
83	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  absolutePositivityThreshold;  [CE]  cannot  find  symbol  cachedLT  [FE]            AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  absolutePositivityThreshold;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  absolutePositivityThreshold;	      ((    RealMatrix)matrix).cachedLT    =    cachedLT;    	non-compiled	[CE]  cannot  find  symbol  cachedLT	13	None	replace
84	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i][2];  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i][2];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i][2];	  final    double[]    lI    =    lTData[i][0];    	non-compiled	[CE]  incompatible  types	10	None	replace
85	[BUG]  [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  LTData  =  matrix.getData();  cachedL  =  null;  [CE]  cannot  find  symbol  LTData  [FE]    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  LTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	        lTData    =    matrix.getData();    cachedL    =    null;    LTData  =  matrix.getData();  cachedL  =  null;	  	non-compiled	[CE]  cannot  find  symbol  LTData	14	None	add
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  '('  or  '['  expected  [FE]        AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	      for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '('  or  '['  expected	5	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '('  or  '['  expected	8	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  '('  or  '['  expected  [FE]                AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '('  or  '['  expected	8	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefi  [CE]  '('  or  '['  expected  [FE]                  AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefi  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefi	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '('  or  '['  expected	8	None	replace
90	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
91	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;	      	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	4	None	replace
92	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i,  maxDelta);  [CE]  cannot  find  symbol  maxDelta  [FE]                AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i,  maxDelta);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold(i,  maxDelta);	      	non-compiled	[CE]  cannot  find  symbol  maxDelta	4	None	replace
93	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold(i);	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
94	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold();  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold();	      	non-compiled	[CE]  cannot  find  symbol	4	None	replace
95	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i][0],  cachedLT[i];  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i][0],  cachedLT[i];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i][0],  cachedLT[i];	  final    double[]    lI    =    lTData[i][0];    	non-compiled	[CE]  ']'  expected	10	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]                AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	9	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
99	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  *  order.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i]  *  order.doubleValue();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  *  order.doubleValue();	  final    double[]    lI    =    lTData[i]    *    cachedLT.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	21	None	replace
100	[BUG]  [BUGGY]  final  double[]  lI  =  ltData[i];  [CE]  cannot  find  symbol  ltData  [FE]        AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  ltData[i];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  ltData[i];	  final    double[]    lI    =    cachedLT[i];    	non-compiled	[CE]  cannot  find  symbol  ltData	1	None	replace
101	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDecompositionImpl;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDecompositionImpl;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDecompositionImpl;	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	16	None	add
102	[BUG]  [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  L  =  matrix.getData();  cachedL  =  null;  [CE]  cannot  find  symbol  L  [FE]    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  L  =  matrix.getData();  cachedL  =  null;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	        lTData    =    matrix.getData();    cachedL    =    null;    L  =  matrix.getData();  cachedL  =  null;	  	non-compiled	[CE]  cannot  find  symbol  L	14	None	add
103	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  *  order;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i]  *  order;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  *  order;	  final    double[]    lI    =    lTData[i]    *    cachedLT;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	3	None	replace
104	[BUG]  [BUGGY]  lTData  =  matrix.getDataRef();  cachedL  =  null;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  lTData  =  matrix.getDataRef();  cachedL  =  null;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getDataRef();  cachedL  =  null;	      lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
106	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
107	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
108	[BUG]  [BUGGY]  lTData  =  matrix.getDataRef();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  lTData  =  matrix.getDataRef();  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getDataRef();	      lTData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
109	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NotSymmetricMatrixException    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i  *  1];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	add	final  double[]  lI  =  lTData[i  *  1];	  final    double[]    lI    =    lTData[i    +    1];    	compilable	  [FE]  AssertionError  	20	2	replace
110	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  *  1];  [FE]  AssertionError  [FE]    NotSymmetricMatrixException    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  double[]  lI  =  lTData[i  *  1];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  *  1];	  final    double[]    lI    =    lTData[i    +    1];    	compilable	  [FE]  AssertionError  	20	2	replace
111	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  final  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	      for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
112	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  matrix.cachedLT;  [CE]  cannot  find  symbol  cachedL  [FE]        AssertionError    [CONTEXT]    }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {    [BUGGY]  ((  RealMatrix)matrix).cachedL  =  matrix.cachedLT;  [BUGGY]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  matrix.cachedLT;	      ((    RealMatrix)matrix).cachedL    =    cachedLT;    	non-compiled	[CE]  cannot  find  symbol  cachedL	11	None	replace
